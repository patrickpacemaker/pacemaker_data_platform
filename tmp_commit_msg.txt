diff --git a/.DS_Store b/.DS_Store
index dd3eceb..6554f6a 100644
Binary files a/.DS_Store and b/.DS_Store differ
diff --git a/.dart_tool/dartpad/web_plugin_registrant.dart b/.dart_tool/dartpad/web_plugin_registrant.dart
new file mode 100644
index 0000000..93ca578
--- /dev/null
+++ b/.dart_tool/dartpad/web_plugin_registrant.dart
@@ -0,0 +1,26 @@
+// Flutter web plugin registrant file.
+//
+// Generated file. Do not edit.
+//
+
+// @dart = 2.13
+// ignore_for_file: type=lint
+
+import 'package:firebase_auth_web/firebase_auth_web.dart';
+import 'package:firebase_core_web/firebase_core_web.dart';
+import 'package:google_sign_in_web/google_sign_in_web.dart';
+import 'package:shared_preferences_web/shared_preferences_web.dart';
+import 'package:sign_in_with_apple_web/sign_in_with_apple_web.dart';
+import 'package:url_launcher_web/url_launcher_web.dart';
+import 'package:flutter_web_plugins/flutter_web_plugins.dart';
+
+void registerPlugins([final Registrar? pluginRegistrar]) {
+  final Registrar registrar = pluginRegistrar ?? webPluginRegistrar;
+  FirebaseAuthWeb.registerWith(registrar);
+  FirebaseCoreWeb.registerWith(registrar);
+  GoogleSignInPlugin.registerWith(registrar);
+  SharedPreferencesPlugin.registerWith(registrar);
+  SignInWithApplePlugin.registerWith(registrar);
+  UrlLauncherPlugin.registerWith(registrar);
+  registrar.registerMessageHandler();
+}
diff --git a/.dart_tool/package_config.json b/.dart_tool/package_config.json
new file mode 100644
index 0000000..9dece9d
--- /dev/null
+++ b/.dart_tool/package_config.json
@@ -0,0 +1,662 @@
+{
+  "configVersion": 2,
+  "packages": [
+    {
+      "name": "_flutterfire_internals",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/_flutterfire_internals-1.3.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "args",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/args-2.4.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.19"
+    },
+    {
+      "name": "async",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/async-2.11.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "auto_size_text",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/auto_size_text-3.0.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "boolean_selector",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/boolean_selector-2.1.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "cached_network_image",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cached_network_image-3.2.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "cached_network_image_platform_interface",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cached_network_image_platform_interface-1.0.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "cached_network_image_web",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cached_network_image_web-1.0.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "characters",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/characters-1.3.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "clock",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/clock-1.1.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "collection",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/collection-1.17.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "crypto",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/crypto-3.0.3",
+      "packageUri": "lib/",
+      "languageVersion": "2.19"
+    },
+    {
+      "name": "cupertino_icons",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cupertino_icons-1.0.5",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "fake_async",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/fake_async-1.3.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "ffi",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/ffi-2.0.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "file",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/file-6.1.4",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "firebase_auth",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth-4.6.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "firebase_auth_platform_interface",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth_platform_interface-6.15.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "firebase_auth_web",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth_web-5.5.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "firebase_core",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core-2.13.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "firebase_core_platform_interface",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core_platform_interface-4.8.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "firebase_core_web",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core_web-2.5.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "flutter",
+      "rootUri": "file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter",
+      "packageUri": "lib/",
+      "languageVersion": "3.0"
+    },
+    {
+      "name": "flutter_animate",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_animate-4.1.1+1",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "flutter_blurhash",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_blurhash-0.7.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.15"
+    },
+    {
+      "name": "flutter_cache_manager",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_cache_manager-3.3.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "flutter_localizations",
+      "rootUri": "file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter_localizations",
+      "packageUri": "lib/",
+      "languageVersion": "3.0"
+    },
+    {
+      "name": "flutter_spinkit",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_spinkit-5.1.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "flutter_svg",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_svg-2.0.4",
+      "packageUri": "lib/",
+      "languageVersion": "2.19"
+    },
+    {
+      "name": "flutter_test",
+      "rootUri": "file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter_test",
+      "packageUri": "lib/",
+      "languageVersion": "3.0"
+    },
+    {
+      "name": "flutter_web_plugins",
+      "rootUri": "file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter_web_plugins",
+      "packageUri": "lib/",
+      "languageVersion": "3.0"
+    },
+    {
+      "name": "font_awesome_flutter",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/font_awesome_flutter-10.1.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "from_css_color",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/from_css_color-2.0.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "go_router",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/go_router-7.1.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "google_fonts",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_fonts-4.0.3",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "google_identity_services_web",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_identity_services_web-0.2.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "google_sign_in",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in-6.0.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.14"
+    },
+    {
+      "name": "google_sign_in_android",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_android-6.1.8",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "google_sign_in_ios",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_ios-5.6.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "google_sign_in_platform_interface",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_platform_interface-2.4.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "google_sign_in_web",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_web-0.11.0+2",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "http",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/http-0.13.6",
+      "packageUri": "lib/",
+      "languageVersion": "2.19"
+    },
+    {
+      "name": "http_parser",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/http_parser-4.0.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "intl",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/intl-0.18.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "js",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/js-0.6.7",
+      "packageUri": "lib/",
+      "languageVersion": "2.19"
+    },
+    {
+      "name": "json_path",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/json_path-0.4.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.16"
+    },
+    {
+      "name": "logging",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/logging-1.2.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.19"
+    },
+    {
+      "name": "matcher",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/matcher-0.12.15",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "material_color_utilities",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/material_color_utilities-0.2.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.13"
+    },
+    {
+      "name": "meta",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/meta-1.9.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "nested",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/nested-1.0.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "octo_image",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/octo_image-1.0.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "page_transition",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/page_transition-2.0.4",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "path",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path-1.8.3",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "path_parsing",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_parsing-1.0.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "path_provider",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider-2.0.14",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "path_provider_android",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_android-2.0.25",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "path_provider_foundation",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_foundation-2.2.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "path_provider_linux",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_linux-2.1.11",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "path_provider_platform_interface",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_platform_interface-2.0.6",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "path_provider_windows",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_windows-2.1.7",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "pedantic",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/pedantic-1.11.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "petitparser",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/petitparser-5.4.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.19"
+    },
+    {
+      "name": "platform",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/platform-3.1.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "plugin_platform_interface",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/plugin_platform_interface-2.1.3",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "provider",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/provider-6.0.4",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "quiver",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/quiver-3.2.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "rfc_6901",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/rfc_6901-0.1.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.15"
+    },
+    {
+      "name": "rxdart",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/rxdart-0.27.7",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "shared_preferences",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences-2.0.15",
+      "packageUri": "lib/",
+      "languageVersion": "2.14"
+    },
+    {
+      "name": "shared_preferences_android",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_android-2.1.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "shared_preferences_ios",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_ios-2.1.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.14"
+    },
+    {
+      "name": "shared_preferences_linux",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_linux-2.2.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "shared_preferences_macos",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_macos-2.0.5",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "shared_preferences_platform_interface",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_platform_interface-2.2.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "shared_preferences_web",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_web-2.1.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "shared_preferences_windows",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_windows-2.2.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "sign_in_with_apple",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple-4.3.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "sign_in_with_apple_platform_interface",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "sign_in_with_apple_web",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple_web-1.0.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "sky_engine",
+      "rootUri": "file:///Users/patrickpetter/Documents/Flutter/flutter/bin/cache/pkg/sky_engine",
+      "packageUri": "lib/",
+      "languageVersion": "3.0"
+    },
+    {
+      "name": "source_span",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/source_span-1.9.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.14"
+    },
+    {
+      "name": "sqflite",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sqflite-2.2.6",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "sqflite_common",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sqflite_common-2.5.0",
+      "packageUri": "lib/",
+      "languageVersion": "3.0"
+    },
+    {
+      "name": "stack_trace",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/stack_trace-1.11.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "stream_channel",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/stream_channel-2.1.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.14"
+    },
+    {
+      "name": "string_scanner",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/string_scanner-1.2.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "synchronized",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/synchronized-3.1.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "term_glyph",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/term_glyph-1.2.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "test_api",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/test_api-0.5.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "timeago",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/timeago-3.2.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "typed_data",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/typed_data-1.3.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "url_launcher",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher-6.1.10",
+      "packageUri": "lib/",
+      "languageVersion": "2.14"
+    },
+    {
+      "name": "url_launcher_android",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_android-6.0.27",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "url_launcher_ios",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_ios-6.1.4",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "url_launcher_linux",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_linux-3.0.5",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "url_launcher_macos",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_macos-3.0.6",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "url_launcher_platform_interface",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_platform_interface-2.1.2",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "url_launcher_web",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_web-2.0.18",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "url_launcher_windows",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_windows-3.0.7",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "uuid",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/uuid-3.0.7",
+      "packageUri": "lib/",
+      "languageVersion": "2.12"
+    },
+    {
+      "name": "vector_graphics",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_graphics-1.1.7",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "vector_graphics_codec",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_graphics_codec-1.1.7",
+      "packageUri": "lib/",
+      "languageVersion": "2.17"
+    },
+    {
+      "name": "vector_graphics_compiler",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_graphics_compiler-1.1.7",
+      "packageUri": "lib/",
+      "languageVersion": "2.19"
+    },
+    {
+      "name": "vector_math",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_math-2.1.4",
+      "packageUri": "lib/",
+      "languageVersion": "2.14"
+    },
+    {
+      "name": "win32",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/win32-5.0.6",
+      "packageUri": "lib/",
+      "languageVersion": "3.0"
+    },
+    {
+      "name": "xdg_directories",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/xdg_directories-1.0.1",
+      "packageUri": "lib/",
+      "languageVersion": "2.18"
+    },
+    {
+      "name": "xml",
+      "rootUri": "file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/xml-6.3.0",
+      "packageUri": "lib/",
+      "languageVersion": "2.19"
+    },
+    {
+      "name": "pacemaker_data_platform",
+      "rootUri": "../",
+      "packageUri": "lib/",
+      "languageVersion": "3.0"
+    }
+  ],
+  "generated": "2023-08-13T13:06:52.100040Z",
+  "generator": "pub",
+  "generatorVersion": "3.0.6"
+}
diff --git a/.dart_tool/package_config_subset b/.dart_tool/package_config_subset
new file mode 100644
index 0000000..40f1173
--- /dev/null
+++ b/.dart_tool/package_config_subset
@@ -0,0 +1,437 @@
+_flutterfire_internals
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/_flutterfire_internals-1.3.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/_flutterfire_internals-1.3.2/lib/
+args
+2.19
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/args-2.4.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/args-2.4.2/lib/
+async
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/async-2.11.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/async-2.11.0/lib/
+auto_size_text
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/auto_size_text-3.0.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/auto_size_text-3.0.0/lib/
+boolean_selector
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/boolean_selector-2.1.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/boolean_selector-2.1.1/lib/
+cached_network_image
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cached_network_image-3.2.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cached_network_image-3.2.1/lib/
+cached_network_image_platform_interface
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cached_network_image_platform_interface-1.0.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cached_network_image_platform_interface-1.0.0/lib/
+cached_network_image_web
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cached_network_image_web-1.0.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cached_network_image_web-1.0.1/lib/
+characters
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/characters-1.3.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/characters-1.3.0/lib/
+clock
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/clock-1.1.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/clock-1.1.1/lib/
+collection
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/collection-1.17.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/collection-1.17.1/lib/
+crypto
+2.19
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/crypto-3.0.3/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/crypto-3.0.3/lib/
+cupertino_icons
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cupertino_icons-1.0.5/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/cupertino_icons-1.0.5/lib/
+fake_async
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/fake_async-1.3.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/fake_async-1.3.1/lib/
+ffi
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/ffi-2.0.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/ffi-2.0.2/lib/
+file
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/file-6.1.4/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/file-6.1.4/lib/
+firebase_auth
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth-4.6.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth-4.6.2/lib/
+firebase_auth_platform_interface
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth_platform_interface-6.15.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth_platform_interface-6.15.2/lib/
+firebase_auth_web
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth_web-5.5.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth_web-5.5.2/lib/
+firebase_core
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core-2.13.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core-2.13.1/lib/
+firebase_core_platform_interface
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core_platform_interface-4.8.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core_platform_interface-4.8.0/lib/
+firebase_core_web
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core_web-2.5.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core_web-2.5.0/lib/
+flutter_animate
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_animate-4.1.1+1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_animate-4.1.1+1/lib/
+flutter_blurhash
+2.15
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_blurhash-0.7.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_blurhash-0.7.0/lib/
+flutter_cache_manager
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_cache_manager-3.3.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_cache_manager-3.3.0/lib/
+flutter_spinkit
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_spinkit-5.1.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_spinkit-5.1.0/lib/
+flutter_svg
+2.19
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_svg-2.0.4/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/flutter_svg-2.0.4/lib/
+font_awesome_flutter
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/font_awesome_flutter-10.1.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/font_awesome_flutter-10.1.0/lib/
+from_css_color
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/from_css_color-2.0.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/from_css_color-2.0.0/lib/
+go_router
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/go_router-7.1.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/go_router-7.1.1/lib/
+google_fonts
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_fonts-4.0.3/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_fonts-4.0.3/lib/
+google_identity_services_web
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_identity_services_web-0.2.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_identity_services_web-0.2.1/lib/
+google_sign_in
+2.14
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in-6.0.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in-6.0.2/lib/
+google_sign_in_android
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_android-6.1.8/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_android-6.1.8/lib/
+google_sign_in_ios
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_ios-5.6.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_ios-5.6.1/lib/
+google_sign_in_platform_interface
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_platform_interface-2.4.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_platform_interface-2.4.0/lib/
+google_sign_in_web
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_web-0.11.0+2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_web-0.11.0+2/lib/
+http
+2.19
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/http-0.13.6/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/http-0.13.6/lib/
+http_parser
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/http_parser-4.0.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/http_parser-4.0.2/lib/
+intl
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/intl-0.18.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/intl-0.18.0/lib/
+js
+2.19
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/js-0.6.7/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/js-0.6.7/lib/
+json_path
+2.16
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/json_path-0.4.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/json_path-0.4.1/lib/
+logging
+2.19
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/logging-1.2.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/logging-1.2.0/lib/
+matcher
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/matcher-0.12.15/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/matcher-0.12.15/lib/
+material_color_utilities
+2.13
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/material_color_utilities-0.2.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/material_color_utilities-0.2.0/lib/
+meta
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/meta-1.9.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/meta-1.9.1/lib/
+nested
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/nested-1.0.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/nested-1.0.0/lib/
+octo_image
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/octo_image-1.0.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/octo_image-1.0.2/lib/
+page_transition
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/page_transition-2.0.4/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/page_transition-2.0.4/lib/
+path
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path-1.8.3/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path-1.8.3/lib/
+path_parsing
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_parsing-1.0.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_parsing-1.0.1/lib/
+path_provider
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider-2.0.14/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider-2.0.14/lib/
+path_provider_android
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_android-2.0.25/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_android-2.0.25/lib/
+path_provider_foundation
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_foundation-2.2.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_foundation-2.2.2/lib/
+path_provider_linux
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_linux-2.1.11/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_linux-2.1.11/lib/
+path_provider_platform_interface
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_platform_interface-2.0.6/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_platform_interface-2.0.6/lib/
+path_provider_windows
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_windows-2.1.7/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_windows-2.1.7/lib/
+pedantic
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/pedantic-1.11.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/pedantic-1.11.1/lib/
+petitparser
+2.19
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/petitparser-5.4.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/petitparser-5.4.0/lib/
+platform
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/platform-3.1.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/platform-3.1.0/lib/
+plugin_platform_interface
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/plugin_platform_interface-2.1.3/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/plugin_platform_interface-2.1.3/lib/
+provider
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/provider-6.0.4/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/provider-6.0.4/lib/
+quiver
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/quiver-3.2.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/quiver-3.2.1/lib/
+rfc_6901
+2.15
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/rfc_6901-0.1.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/rfc_6901-0.1.1/lib/
+rxdart
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/rxdart-0.27.7/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/rxdart-0.27.7/lib/
+shared_preferences
+2.14
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences-2.0.15/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences-2.0.15/lib/
+shared_preferences_android
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_android-2.1.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_android-2.1.0/lib/
+shared_preferences_ios
+2.14
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_ios-2.1.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_ios-2.1.1/lib/
+shared_preferences_linux
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_linux-2.2.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_linux-2.2.0/lib/
+shared_preferences_macos
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_macos-2.0.5/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_macos-2.0.5/lib/
+shared_preferences_platform_interface
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_platform_interface-2.2.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_platform_interface-2.2.0/lib/
+shared_preferences_web
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_web-2.1.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_web-2.1.0/lib/
+shared_preferences_windows
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_windows-2.2.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_windows-2.2.0/lib/
+sign_in_with_apple
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple-4.3.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple-4.3.0/lib/
+sign_in_with_apple_platform_interface
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/lib/
+sign_in_with_apple_web
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple_web-1.0.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple_web-1.0.1/lib/
+source_span
+2.14
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/source_span-1.9.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/source_span-1.9.1/lib/
+sqflite
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sqflite-2.2.6/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sqflite-2.2.6/lib/
+sqflite_common
+3.0
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sqflite_common-2.5.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/sqflite_common-2.5.0/lib/
+stack_trace
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/stack_trace-1.11.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/stack_trace-1.11.0/lib/
+stream_channel
+2.14
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/stream_channel-2.1.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/stream_channel-2.1.1/lib/
+string_scanner
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/string_scanner-1.2.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/string_scanner-1.2.0/lib/
+synchronized
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/synchronized-3.1.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/synchronized-3.1.0/lib/
+term_glyph
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/term_glyph-1.2.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/term_glyph-1.2.1/lib/
+test_api
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/test_api-0.5.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/test_api-0.5.1/lib/
+timeago
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/timeago-3.2.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/timeago-3.2.2/lib/
+typed_data
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/typed_data-1.3.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/typed_data-1.3.2/lib/
+url_launcher
+2.14
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher-6.1.10/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher-6.1.10/lib/
+url_launcher_android
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_android-6.0.27/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_android-6.0.27/lib/
+url_launcher_ios
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_ios-6.1.4/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_ios-6.1.4/lib/
+url_launcher_linux
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_linux-3.0.5/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_linux-3.0.5/lib/
+url_launcher_macos
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_macos-3.0.6/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_macos-3.0.6/lib/
+url_launcher_platform_interface
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_platform_interface-2.1.2/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_platform_interface-2.1.2/lib/
+url_launcher_web
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_web-2.0.18/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_web-2.0.18/lib/
+url_launcher_windows
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_windows-3.0.7/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_windows-3.0.7/lib/
+uuid
+2.12
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/uuid-3.0.7/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/uuid-3.0.7/lib/
+vector_graphics
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_graphics-1.1.7/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_graphics-1.1.7/lib/
+vector_graphics_codec
+2.17
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_graphics_codec-1.1.7/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_graphics_codec-1.1.7/lib/
+vector_graphics_compiler
+2.19
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_graphics_compiler-1.1.7/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_graphics_compiler-1.1.7/lib/
+vector_math
+2.14
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_math-2.1.4/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/vector_math-2.1.4/lib/
+win32
+3.0
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/win32-5.0.6/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/win32-5.0.6/lib/
+xdg_directories
+2.18
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/xdg_directories-1.0.1/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/xdg_directories-1.0.1/lib/
+xml
+2.19
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/xml-6.3.0/
+file:///Users/patrickpetter/.pub-cache/hosted/pub.dev/xml-6.3.0/lib/
+pacemaker_data_platform
+3.0
+file:///Users/patrickpetter/Desktop/pacemaker_dev/pacemaker_dataplatform/
+file:///Users/patrickpetter/Desktop/pacemaker_dev/pacemaker_dataplatform/lib/
+sky_engine
+3.0
+file:///Users/patrickpetter/Documents/Flutter/flutter/bin/cache/pkg/sky_engine/
+file:///Users/patrickpetter/Documents/Flutter/flutter/bin/cache/pkg/sky_engine/lib/
+flutter
+3.0
+file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter/
+file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter/lib/
+flutter_localizations
+3.0
+file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter_localizations/
+file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter_localizations/lib/
+flutter_test
+3.0
+file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter_test/
+file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter_test/lib/
+flutter_web_plugins
+3.0
+file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter_web_plugins/
+file:///Users/patrickpetter/Documents/Flutter/flutter/packages/flutter_web_plugins/lib/
+2
diff --git a/.dart_tool/version b/.dart_tool/version
new file mode 100644
index 0000000..14fc9e9
--- /dev/null
+++ b/.dart_tool/version
@@ -0,0 +1 @@
+3.10.6
\ No newline at end of file
diff --git a/.flutter-plugins b/.flutter-plugins
new file mode 100644
index 0000000..157a82b
--- /dev/null
+++ b/.flutter-plugins
@@ -0,0 +1,31 @@
+# This is a generated file; do not edit or check into version control.
+firebase_auth=/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth-4.6.2/
+firebase_auth_web=/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth_web-5.5.2/
+firebase_core=/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core-2.13.1/
+firebase_core_web=/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core_web-2.5.0/
+google_sign_in=/Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in-6.0.2/
+google_sign_in_android=/Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_android-6.1.8/
+google_sign_in_ios=/Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_ios-5.6.1/
+google_sign_in_web=/Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_web-0.11.0+2/
+path_provider=/Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider-2.0.14/
+path_provider_android=/Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_android-2.0.25/
+path_provider_foundation=/Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_foundation-2.2.2/
+path_provider_linux=/Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_linux-2.1.11/
+path_provider_windows=/Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_windows-2.1.7/
+shared_preferences=/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences-2.0.15/
+shared_preferences_android=/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_android-2.1.0/
+shared_preferences_ios=/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_ios-2.1.1/
+shared_preferences_linux=/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_linux-2.2.0/
+shared_preferences_macos=/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_macos-2.0.5/
+shared_preferences_web=/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_web-2.1.0/
+shared_preferences_windows=/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_windows-2.2.0/
+sign_in_with_apple=/Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple-4.3.0/
+sign_in_with_apple_web=/Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple_web-1.0.1/
+sqflite=/Users/patrickpetter/.pub-cache/hosted/pub.dev/sqflite-2.2.6/
+url_launcher=/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher-6.1.10/
+url_launcher_android=/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_android-6.0.27/
+url_launcher_ios=/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_ios-6.1.4/
+url_launcher_linux=/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_linux-3.0.5/
+url_launcher_macos=/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_macos-3.0.6/
+url_launcher_web=/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_web-2.0.18/
+url_launcher_windows=/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_windows-3.0.7/
diff --git a/.flutter-plugins-dependencies b/.flutter-plugins-dependencies
new file mode 100644
index 0000000..0163069
--- /dev/null
+++ b/.flutter-plugins-dependencies
@@ -0,0 +1 @@
+{"info":"This is a generated file; do not edit or check into version control.","plugins":{"ios":[{"name":"firebase_auth","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth-4.6.2/","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_core","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core-2.13.1/","native_build":true,"dependencies":[]},{"name":"google_sign_in_ios","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_ios-5.6.1/","native_build":true,"dependencies":[]},{"name":"path_provider_foundation","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_foundation-2.2.2/","shared_darwin_source":true,"native_build":true,"dependencies":[]},{"name":"shared_preferences_ios","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_ios-2.1.1/","native_build":true,"dependencies":[]},{"name":"sign_in_with_apple","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple-4.3.0/","native_build":true,"dependencies":[]},{"name":"sqflite","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/sqflite-2.2.6/","native_build":true,"dependencies":[]},{"name":"url_launcher_ios","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_ios-6.1.4/","native_build":true,"dependencies":[]}],"android":[{"name":"firebase_auth","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth-4.6.2/","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_core","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core-2.13.1/","native_build":true,"dependencies":[]},{"name":"google_sign_in_android","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_android-6.1.8/","native_build":true,"dependencies":[]},{"name":"path_provider_android","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_android-2.0.25/","native_build":true,"dependencies":[]},{"name":"shared_preferences_android","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_android-2.1.0/","native_build":true,"dependencies":[]},{"name":"sign_in_with_apple","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple-4.3.0/","native_build":true,"dependencies":[]},{"name":"sqflite","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/sqflite-2.2.6/","native_build":true,"dependencies":[]},{"name":"url_launcher_android","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_android-6.0.27/","native_build":true,"dependencies":[]}],"macos":[{"name":"firebase_auth","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth-4.6.2/","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_core","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core-2.13.1/","native_build":true,"dependencies":[]},{"name":"path_provider_foundation","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_foundation-2.2.2/","shared_darwin_source":true,"native_build":true,"dependencies":[]},{"name":"shared_preferences_macos","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_macos-2.0.5/","native_build":true,"dependencies":[]},{"name":"sign_in_with_apple","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple-4.3.0/","native_build":true,"dependencies":[]},{"name":"sqflite","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/sqflite-2.2.6/","native_build":true,"dependencies":[]},{"name":"url_launcher_macos","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_macos-3.0.6/","native_build":true,"dependencies":[]}],"linux":[{"name":"path_provider_linux","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_linux-2.1.11/","native_build":false,"dependencies":[]},{"name":"shared_preferences_linux","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_linux-2.2.0/","native_build":false,"dependencies":["path_provider_linux"]},{"name":"url_launcher_linux","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_linux-3.0.5/","native_build":true,"dependencies":[]}],"windows":[{"name":"firebase_core","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core-2.13.1/","native_build":true,"dependencies":[]},{"name":"path_provider_windows","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/path_provider_windows-2.1.7/","native_build":false,"dependencies":[]},{"name":"shared_preferences_windows","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_windows-2.2.0/","native_build":false,"dependencies":["path_provider_windows"]},{"name":"url_launcher_windows","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_windows-3.0.7/","native_build":true,"dependencies":[]}],"web":[{"name":"firebase_auth_web","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_auth_web-5.5.2/","dependencies":["firebase_core_web"]},{"name":"firebase_core_web","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/firebase_core_web-2.5.0/","dependencies":[]},{"name":"google_sign_in_web","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/google_sign_in_web-0.11.0+2/","dependencies":[]},{"name":"shared_preferences_web","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/shared_preferences_web-2.1.0/","dependencies":[]},{"name":"sign_in_with_apple_web","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/sign_in_with_apple_web-1.0.1/","dependencies":[]},{"name":"url_launcher_web","path":"/Users/patrickpetter/.pub-cache/hosted/pub.dev/url_launcher_web-2.0.18/","dependencies":[]}]},"dependencyGraph":[{"name":"firebase_auth","dependencies":["firebase_auth_web","firebase_core"]},{"name":"firebase_auth_web","dependencies":["firebase_core","firebase_core_web"]},{"name":"firebase_core","dependencies":["firebase_core_web"]},{"name":"firebase_core_web","dependencies":[]},{"name":"google_sign_in","dependencies":["google_sign_in_android","google_sign_in_ios","google_sign_in_web"]},{"name":"google_sign_in_android","dependencies":[]},{"name":"google_sign_in_ios","dependencies":[]},{"name":"google_sign_in_web","dependencies":[]},{"name":"path_provider","dependencies":["path_provider_android","path_provider_foundation","path_provider_linux","path_provider_windows"]},{"name":"path_provider_android","dependencies":[]},{"name":"path_provider_foundation","dependencies":[]},{"name":"path_provider_linux","dependencies":[]},{"name":"path_provider_windows","dependencies":[]},{"name":"shared_preferences","dependencies":["shared_preferences_android","shared_preferences_ios","shared_preferences_linux","shared_preferences_macos","shared_preferences_web","shared_preferences_windows"]},{"name":"shared_preferences_android","dependencies":[]},{"name":"shared_preferences_ios","dependencies":[]},{"name":"shared_preferences_linux","dependencies":["path_provider_linux"]},{"name":"shared_preferences_macos","dependencies":[]},{"name":"shared_preferences_web","dependencies":[]},{"name":"shared_preferences_windows","dependencies":["path_provider_windows"]},{"name":"sign_in_with_apple","dependencies":["sign_in_with_apple_web"]},{"name":"sign_in_with_apple_web","dependencies":[]},{"name":"sqflite","dependencies":[]},{"name":"url_launcher","dependencies":["url_launcher_android","url_launcher_ios","url_launcher_linux","url_launcher_macos","url_launcher_web","url_launcher_windows"]},{"name":"url_launcher_android","dependencies":[]},{"name":"url_launcher_ios","dependencies":[]},{"name":"url_launcher_linux","dependencies":[]},{"name":"url_launcher_macos","dependencies":[]},{"name":"url_launcher_web","dependencies":[]},{"name":"url_launcher_windows","dependencies":[]}],"date_created":"2023-08-13 15:06:52.179056","version":"3.10.6"}
\ No newline at end of file
diff --git a/android/.DS_Store b/android/.DS_Store
index eb3d316..77cae4c 100644
Binary files a/android/.DS_Store and b/android/.DS_Store differ
diff --git a/android/app/build.gradle b/android/app/build.gradle
index 1b228c9..d8a41f2 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -24,6 +24,7 @@ if (flutterVersionName == null) {
 apply plugin: 'com.android.application'
 apply plugin: 'kotlin-android'
 apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
+apply plugin: 'com.google.gms.google-services'  // Google Services plugin
 
 
 def keystoreProperties = new Properties()
@@ -47,7 +48,7 @@ android {
 
     defaultConfig {
         // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
-        applicationId "com.mycompany.pacemakerdataplatform"
+        applicationId "ai.pacemaker.dataplatform"
         minSdkVersion 21
         targetSdkVersion 33
         versionCode flutterVersionCode.toInteger()
diff --git a/android/app/google-services.json b/android/app/google-services.json
new file mode 100644
index 0000000..32cad40
--- /dev/null
+++ b/android/app/google-services.json
@@ -0,0 +1,54 @@
+{
+  "project_info": {
+    "project_number": "825775316217",
+    "project_id": "pacemaker-data-platform",
+    "storage_bucket": "pacemaker-data-platform.appspot.com"
+  },
+  "client": [
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:825775316217:android:392b533f716dc77ff89628",
+        "android_client_info": {
+          "package_name": "ai.pacemaker.dataplatform"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "825775316217-so0fjpv593biuq4rt9up8lrlhaai2v2e.apps.googleusercontent.com",
+          "client_type": 1,
+          "android_info": {
+            "package_name": "ai.pacemaker.dataplatform",
+            "certificate_hash": "9bbb3186b2189ef16d8f272bdab59362c395cbb4"
+          }
+        },
+        {
+          "client_id": "825775316217-p9ukluhg22c40anpd38uec28qfh64sk8.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyCx1VmeAarn4vwHv3iFLDH0l_cHaTUQWxo"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": [
+            {
+              "client_id": "825775316217-p9ukluhg22c40anpd38uec28qfh64sk8.apps.googleusercontent.com",
+              "client_type": 3
+            },
+            {
+              "client_id": "825775316217-7f0tlcrtjatljjf85m1tspnko0bq1kqe.apps.googleusercontent.com",
+              "client_type": 2,
+              "ios_info": {
+                "bundle_id": "ai.pacemaker.dataplatform"
+              }
+            }
+          ]
+        }
+      }
+    }
+  ],
+  "configuration_version": "1"
+}
\ No newline at end of file
diff --git a/android/app/src/debug/AndroidManifest.xml b/android/app/src/debug/AndroidManifest.xml
index f6e789e..f998bd8 100644
--- a/android/app/src/debug/AndroidManifest.xml
+++ b/android/app/src/debug/AndroidManifest.xml
@@ -1,5 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.mycompany.pacemakerdataplatform">
+    package="ai.pacemaker.dataplatform">
     <!-- Flutter needs it to communicate with the running application
          to allow setting breakpoints, to provide hot reload, etc.
     -->
diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
index 7e6886b..0028c2b 100644
--- a/android/app/src/main/AndroidManifest.xml
+++ b/android/app/src/main/AndroidManifest.xml
@@ -1,5 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.mycompany.pacemakerdataplatform"
+    package="ai.pacemaker.dataplatform"
     xmlns:tools="http://schemas.android.com/tools">
     <uses-permission android:name="android.permission.INTERNET"/>
 
diff --git a/android/app/src/main/kotlin/com/example/my_project/MainActivity.kt b/android/app/src/main/kotlin/com/example/my_project/MainActivity.kt
index 9a072af..904d77c 100644
--- a/android/app/src/main/kotlin/com/example/my_project/MainActivity.kt
+++ b/android/app/src/main/kotlin/com/example/my_project/MainActivity.kt
@@ -1,4 +1,4 @@
-package com.mycompany.pacemakerdataplatform
+package ai.pacemaker.dataplatform
 
 import io.flutter.embedding.android.FlutterActivity
 
diff --git a/android/app/src/profile/AndroidManifest.xml b/android/app/src/profile/AndroidManifest.xml
index f6e789e..f998bd8 100644
--- a/android/app/src/profile/AndroidManifest.xml
+++ b/android/app/src/profile/AndroidManifest.xml
@@ -1,5 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.mycompany.pacemakerdataplatform">
+    package="ai.pacemaker.dataplatform">
     <!-- Flutter needs it to communicate with the running application
          to allow setting breakpoints, to provide hot reload, etc.
     -->
diff --git a/android/build.gradle b/android/build.gradle
index 9a4a41b..dacf67c 100644
--- a/android/build.gradle
+++ b/android/build.gradle
@@ -8,7 +8,7 @@ buildscript {
     dependencies {
         classpath 'com.android.tools.build:gradle:7.3.0'
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
-        
+        classpath 'com.google.gms:google-services:4.3.8'  // Google Services plugin
         
     }
 }
diff --git a/assets/.DS_Store b/assets/.DS_Store
index 379472c..fe880ad 100644
Binary files a/assets/.DS_Store and b/assets/.DS_Store differ
diff --git a/assets/fonts/Lexend Deca-Medium.ttf b/assets/fonts/Lexend Deca-Medium.ttf
new file mode 100644
index 0000000..5cc0c27
Binary files /dev/null and b/assets/fonts/Lexend Deca-Medium.ttf differ
diff --git a/assets/fonts/Lexend Deca-Regular.ttf b/assets/fonts/Lexend Deca-Regular.ttf
new file mode 100644
index 0000000..fe75f59
Binary files /dev/null and b/assets/fonts/Lexend Deca-Regular.ttf differ
diff --git a/ios/.DS_Store b/ios/.DS_Store
index 82bf14c..270b335 100644
Binary files a/ios/.DS_Store and b/ios/.DS_Store differ
diff --git a/ios/Runner.xcodeproj/.DS_Store b/ios/Runner.xcodeproj/.DS_Store
new file mode 100644
index 0000000..5dc9086
Binary files /dev/null and b/ios/Runner.xcodeproj/.DS_Store differ
diff --git a/ios/Runner.xcodeproj/project.pbxproj b/ios/Runner.xcodeproj/project.pbxproj
index d9af72e..09d2b66 100644
--- a/ios/Runner.xcodeproj/project.pbxproj
+++ b/ios/Runner.xcodeproj/project.pbxproj
@@ -3,15 +3,17 @@
 	archiveVersion = 1;
 	classes = {
 	};
-	objectVersion = 46;
+	objectVersion = 50;
 	objects = {
 
 /* Begin PBXBuildFile section */
 		1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */ = {isa = PBXBuildFile; fileRef = 1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */; };
 		3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */ = {isa = PBXBuildFile; fileRef = 3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */; };
+		60CEEDB492F577A653BC6E45 /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = B8285832C7E7A3262A5A897C /* Pods_Runner.framework */; };
+		6426BE1225AC0EBD0080CC2A /* GoogleService-Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = 6426BE1125AC0EBD0080CC2A /* GoogleService-Info.plist */; };
 		74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74858FAE1ED2DC5600515810 /* AppDelegate.swift */; };
-		6436409A27A31CD800820AF7 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 6436409C27A31CD800820AF7 /* InfoPlist.strings */; };
 		97C146FC1CF9000F007C117D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FA1CF9000F007C117D /* Main.storyboard */; };
+		6436409A27A31CD800820AF7 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 6436409C27A31CD800820AF7 /* InfoPlist.strings */; };
 		97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FD1CF9000F007C117D /* Assets.xcassets */; };
 		97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */; };
 /* End PBXBuildFile section */
@@ -33,6 +35,9 @@
 		1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GeneratedPluginRegistrant.h; sourceTree = "<group>"; };
 		1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GeneratedPluginRegistrant.m; sourceTree = "<group>"; };
 		3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = AppFrameworkInfo.plist; path = Flutter/AppFrameworkInfo.plist; sourceTree = "<group>"; };
+		64E3CA8B26FC10FF0070C5E0 /* Runner.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = Runner.entitlements; sourceTree = "<group>"; };
+		3DCE399542E9B8C63BEA38E6 /* Pods-Runner.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.profile.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"; sourceTree = "<group>"; };
+		6426BE1125AC0EBD0080CC2A /* GoogleService-Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = "GoogleService-Info.plist"; sourceTree = "<group>"; };
 		74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Runner-Bridging-Header.h"; sourceTree = "<group>"; };
 		74858FAE1ED2DC5600515810 /* AppDelegate.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
 		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = Release.xcconfig; path = Flutter/Release.xcconfig; sourceTree = "<group>"; };
@@ -42,7 +47,12 @@
 		97C146FB1CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
 		97C146FD1CF9000F007C117D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
 		97C147001CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
+		6436409D27A31CD200820AF7 /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
+		6436409727A31CDD00820AF7 /* de */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = de; path = de.lproj/InfoPlist.strings; sourceTree = "<group>"; };
 		97C147021CF9000F007C117D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
+		A9C17DEFA21738E5FBD7F54A /* Pods-Runner.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.release.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"; sourceTree = "<group>"; };
+		B8285832C7E7A3262A5A897C /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		FA9015B13AC8FF8CBD8DD673 /* Pods-Runner.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.debug.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"; sourceTree = "<group>"; };
 /* End PBXFileReference section */
 
 /* Begin PBXFrameworksBuildPhase section */
@@ -50,12 +60,24 @@
 			isa = PBXFrameworksBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
+				60CEEDB492F577A653BC6E45 /* Pods_Runner.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
 /* End PBXFrameworksBuildPhase section */
 
 /* Begin PBXGroup section */
+		33098FC5D2106DCB44CAEA79 /* Pods */ = {
+			isa = PBXGroup;
+			children = (
+				FA9015B13AC8FF8CBD8DD673 /* Pods-Runner.debug.xcconfig */,
+				A9C17DEFA21738E5FBD7F54A /* Pods-Runner.release.xcconfig */,
+				3DCE399542E9B8C63BEA38E6 /* Pods-Runner.profile.xcconfig */,
+			);
+			name = Pods;
+			path = Pods;
+			sourceTree = "<group>";
+		};
 		9740EEB11CF90186004384FC /* Flutter */ = {
 			isa = PBXGroup;
 			children = (
@@ -73,6 +95,8 @@
 				9740EEB11CF90186004384FC /* Flutter */,
 				97C146F01CF9000F007C117D /* Runner */,
 				97C146EF1CF9000F007C117D /* Products */,
+				33098FC5D2106DCB44CAEA79 /* Pods */,
+				CC79BB5F4B7E86C62E930C2C /* Frameworks */,
 			);
 			sourceTree = "<group>";
 		};
@@ -87,6 +111,8 @@
 		97C146F01CF9000F007C117D /* Runner */ = {
 			isa = PBXGroup;
 			children = (
+				64E3CA8B26FC10FF0070C5E0 /* Runner.entitlements */,
+				6426BE1125AC0EBD0080CC2A /* GoogleService-Info.plist */,
 				97C146FA1CF9000F007C117D /* Main.storyboard */,
 				97C146FD1CF9000F007C117D /* Assets.xcassets */,
 				97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */,
@@ -100,6 +126,14 @@
 			path = Runner;
 			sourceTree = "<group>";
 		};
+		CC79BB5F4B7E86C62E930C2C /* Frameworks */ = {
+			isa = PBXGroup;
+			children = (
+				B8285832C7E7A3262A5A897C /* Pods_Runner.framework */,
+			);
+			name = Frameworks;
+			sourceTree = "<group>";
+		};
 /* End PBXGroup section */
 
 /* Begin PBXNativeTarget section */
@@ -107,12 +141,15 @@
 			isa = PBXNativeTarget;
 			buildConfigurationList = 97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */;
 			buildPhases = (
+				3EA46EF11B42FC3BFF6A4BBC /* [CP] Check Pods Manifest.lock */,
 				9740EEB61CF901F6004384FC /* Run Script */,
 				97C146EA1CF9000F007C117D /* Sources */,
 				97C146EB1CF9000F007C117D /* Frameworks */,
 				97C146EC1CF9000F007C117D /* Resources */,
 				9705A1C41CF9048500538489 /* Embed Frameworks */,
 				3B06AD1E1E4923F5004D2608 /* Thin Binary */,
+				2838A0ADC44730F0A2303575 /* [CP] Embed Pods Frameworks */,
+				55067970987309DE09E9DE72 /* [CP] Copy Pods Resources */,
 			);
 			buildRules = (
 			);
@@ -144,6 +181,7 @@
 			hasScannedForEncodings = 0;
 			knownRegions = (
 				en,
+				de,
 				Base,
 			);
 			mainGroup = 97C146E51CF9000F007C117D;
@@ -164,6 +202,7 @@
 				97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */,
 				6436409A27A31CD800820AF7 /* InfoPlist.strings in Resources */,
 				3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */,
+				6426BE1225AC0EBD0080CC2A /* GoogleService-Info.plist in Resources */,
 				97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */,
 				97C146FC1CF9000F007C117D /* Main.storyboard in Resources */,
 			);
@@ -172,6 +211,23 @@
 /* End PBXResourcesBuildPhase section */
 
 /* Begin PBXShellScriptBuildPhase section */
+		2838A0ADC44730F0A2303575 /* [CP] Embed Pods Frameworks */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-input-files.xcfilelist",
+			);
+			name = "[CP] Embed Pods Frameworks";
+			outputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-output-files.xcfilelist",
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks.sh\"\n";
+			showEnvVarsInLog = 0;
+		};
 		3B06AD1E1E4923F5004D2608 /* Thin Binary */ = {
 			isa = PBXShellScriptBuildPhase;
 			buildActionMask = 2147483647;
@@ -186,6 +242,45 @@
 			shellPath = /bin/sh;
 			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin";
 		};
+		3EA46EF11B42FC3BFF6A4BBC /* [CP] Check Pods Manifest.lock */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputFileListPaths = (
+			);
+			inputPaths = (
+				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
+				"${PODS_ROOT}/Manifest.lock",
+			);
+			name = "[CP] Check Pods Manifest.lock";
+			outputFileListPaths = (
+			);
+			outputPaths = (
+				"$(DERIVED_FILE_DIR)/Pods-Runner-checkManifestLockResult.txt",
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
+			showEnvVarsInLog = 0;
+		};
+		55067970987309DE09E9DE72 /* [CP] Copy Pods Resources */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-resources-${CONFIGURATION}-input-files.xcfilelist",
+			);
+			name = "[CP] Copy Pods Resources";
+			outputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-resources-${CONFIGURATION}-output-files.xcfilelist",
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-resources.sh\"\n";
+			showEnvVarsInLog = 0;
+		};
 		9740EEB61CF901F6004384FC /* Run Script */ = {
 			isa = PBXShellScriptBuildPhase;
 			buildActionMask = 2147483647;
@@ -218,7 +313,8 @@
 		6436409C27A31CD800820AF7 /* InfoPlist.strings */ = {
 			isa = PBXVariantGroup;
 			children = (
-
+				6436409D27A31CD200820AF7 /* en */,
+				6436409727A31CDD00820AF7 /* de */,
 			);
 			name = InfoPlist.strings;
 			sourceTree = "<group>";
@@ -296,8 +392,10 @@
 			isa = XCBuildConfiguration;
 			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
 			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
 				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
 				ENABLE_BITCODE = NO;
 				FRAMEWORK_SEARCH_PATHS = (
@@ -305,12 +403,15 @@
 					"$(PROJECT_DIR)/Flutter",
 				);
 				INFOPLIST_FILE = Runner/Info.plist;
-				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(PROJECT_DIR)/Flutter",
 				);
-				PRODUCT_BUNDLE_IDENTIFIER = com.mycompany.pacemakerdataplatform;
+				PRODUCT_BUNDLE_IDENTIFIER = ai.pacemaker.dataplatform;
 				PRODUCT_NAME = "$(TARGET_NAME)";
 				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
 				SWIFT_VERSION = 5.0;
@@ -418,7 +519,8 @@
 				MTL_ENABLE_DEBUG_INFO = NO;
 				SDKROOT = iphoneos;
 				SUPPORTED_PLATFORMS = iphoneos;
-				SWIFT_OPTIMIZATION_LEVEL = "-Owholemodule";
+				SWIFT_COMPILATION_MODE = wholemodule;
+				SWIFT_OPTIMIZATION_LEVEL = "-O";
 				TARGETED_DEVICE_FAMILY = "1,2";
 				VALIDATE_PRODUCT = YES;
 			};
@@ -428,8 +530,10 @@
 			isa = XCBuildConfiguration;
 			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
 			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
 				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
 				ENABLE_BITCODE = NO;
 				FRAMEWORK_SEARCH_PATHS = (
@@ -437,12 +541,15 @@
 					"$(PROJECT_DIR)/Flutter",
 				);
 				INFOPLIST_FILE = Runner/Info.plist;
-				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(PROJECT_DIR)/Flutter",
 				);
-				PRODUCT_BUNDLE_IDENTIFIER = com.mycompany.pacemakerdataplatform;
+				PRODUCT_BUNDLE_IDENTIFIER = ai.pacemaker.dataplatform;
 				PRODUCT_NAME = "$(TARGET_NAME)";
 				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
 				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
@@ -455,8 +562,10 @@
 			isa = XCBuildConfiguration;
 			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
 			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
 				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
 				ENABLE_BITCODE = NO;
 				FRAMEWORK_SEARCH_PATHS = (
@@ -464,12 +573,15 @@
 					"$(PROJECT_DIR)/Flutter",
 				);
 				INFOPLIST_FILE = Runner/Info.plist;
-				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(PROJECT_DIR)/Flutter",
 				);
-				PRODUCT_BUNDLE_IDENTIFIER = com.mycompany.pacemakerdataplatform;
+				PRODUCT_BUNDLE_IDENTIFIER = ai.pacemaker.dataplatform;
 				PRODUCT_NAME = "$(TARGET_NAME)";
 				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
 				SWIFT_VERSION = 5.0;
diff --git a/ios/Runner/.DS_Store b/ios/Runner/.DS_Store
new file mode 100644
index 0000000..b768c02
Binary files /dev/null and b/ios/Runner/.DS_Store differ
diff --git a/ios/Runner/GoogleService-Info.plist b/ios/Runner/GoogleService-Info.plist
new file mode 100644
index 0000000..b2931cd
--- /dev/null
+++ b/ios/Runner/GoogleService-Info.plist
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CLIENT_ID</key>
+	<string>825775316217-7f0tlcrtjatljjf85m1tspnko0bq1kqe.apps.googleusercontent.com</string>
+	<key>REVERSED_CLIENT_ID</key>
+	<string>com.googleusercontent.apps.825775316217-7f0tlcrtjatljjf85m1tspnko0bq1kqe</string>
+	<key>ANDROID_CLIENT_ID</key>
+	<string>825775316217-so0fjpv593biuq4rt9up8lrlhaai2v2e.apps.googleusercontent.com</string>
+	<key>API_KEY</key>
+	<string>AIzaSyAvPyyNxIcz4qzk9rFghUNzv00-5vl_AFc</string>
+	<key>GCM_SENDER_ID</key>
+	<string>825775316217</string>
+	<key>PLIST_VERSION</key>
+	<string>1</string>
+	<key>BUNDLE_ID</key>
+	<string>ai.pacemaker.dataplatform</string>
+	<key>PROJECT_ID</key>
+	<string>pacemaker-data-platform</string>
+	<key>STORAGE_BUCKET</key>
+	<string>pacemaker-data-platform.appspot.com</string>
+	<key>IS_ADS_ENABLED</key>
+	<false></false>
+	<key>IS_ANALYTICS_ENABLED</key>
+	<false></false>
+	<key>IS_APPINVITE_ENABLED</key>
+	<true></true>
+	<key>IS_GCM_ENABLED</key>
+	<true></true>
+	<key>IS_SIGNIN_ENABLED</key>
+	<true></true>
+	<key>GOOGLE_APP_ID</key>
+	<string>1:825775316217:ios:7887ec7510ee6a5cf89628</string>
+</dict>
+</plist>
\ No newline at end of file
diff --git a/ios/Runner/Info.plist b/ios/Runner/Info.plist
index 6a5246a..d647251 100644
--- a/ios/Runner/Info.plist
+++ b/ios/Runner/Info.plist
@@ -16,13 +16,29 @@
 	<string>pacemaker Data Platform</string>
 	<key>CFBundlePackageType</key>
 	<string>APPL</string>
+	<key>CFBundleLocalizations</key>
+	<array>
+		<string>en</string>
+		<string>de</string>
+	</array>
 
 	<key>CFBundleShortVersionString</key>
 	<string>$(FLUTTER_BUILD_NAME)</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleURLTypes</key>
-	<array>        <dict>
+	<array>
+        <dict>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>CFBundleURLSchemes</key>
+            <array>
+                <string>com.googleusercontent.apps.825775316217-7f0tlcrtjatljjf85m1tspnko0bq1kqe</string>
+                
+            </array>
+        </dict>
+
+        <dict>
         <key>CFBundleTypeRole</key>
         <string>Editor</string>
         <key>CFBundleURLName</key>
diff --git a/ios/Runner/de.lproj/InfoPlist.strings b/ios/Runner/de.lproj/InfoPlist.strings
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/ios/Runner/de.lproj/InfoPlist.strings
@@ -0,0 +1 @@
+
diff --git a/ios/Runner/en.lproj/InfoPlist.strings b/ios/Runner/en.lproj/InfoPlist.strings
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/ios/Runner/en.lproj/InfoPlist.strings
@@ -0,0 +1 @@
+
diff --git a/lib/.DS_Store b/lib/.DS_Store
index 3c5e370..c3d71a9 100644
Binary files a/lib/.DS_Store and b/lib/.DS_Store differ
diff --git a/lib/auth/auth_manager.dart b/lib/auth/auth_manager.dart
new file mode 100644
index 0000000..b39c357
--- /dev/null
+++ b/lib/auth/auth_manager.dart
@@ -0,0 +1,74 @@
+import 'package:flutter/material.dart';
+
+import 'base_auth_user_provider.dart';
+
+abstract class AuthManager {
+  Future signOut();
+  Future deleteUser(BuildContext context);
+  Future updateEmail({required String email, required BuildContext context});
+  Future resetPassword({required String email, required BuildContext context});
+  Future sendEmailVerification() async => currentUser?.sendEmailVerification();
+  Future refreshUser() async => currentUser?.refreshUser();
+}
+
+mixin EmailSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithEmail(
+    BuildContext context,
+    String email,
+    String password,
+  );
+
+  Future<BaseAuthUser?> createAccountWithEmail(
+    BuildContext context,
+    String email,
+    String password,
+  );
+}
+
+mixin AnonymousSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInAnonymously(BuildContext context);
+}
+
+mixin AppleSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithApple(BuildContext context);
+}
+
+mixin GoogleSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithGoogle(BuildContext context);
+}
+
+mixin JwtSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithJwtToken(
+    BuildContext context,
+    String jwtToken,
+  );
+}
+
+mixin PhoneSignInManager on AuthManager {
+  Future beginPhoneAuth({
+    required BuildContext context,
+    required String phoneNumber,
+    required void Function(BuildContext) onCodeSent,
+  });
+
+  Future verifySmsCode({
+    required BuildContext context,
+    required String smsCode,
+  });
+}
+
+mixin FacebookSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithFacebook(BuildContext context);
+}
+
+mixin MicrosoftSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithMicrosoft(
+    BuildContext context,
+    List<String> scopes,
+    String tenantId,
+  );
+}
+
+mixin GithubSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithGithub(BuildContext context);
+}
diff --git a/lib/auth/base_auth_user_provider.dart b/lib/auth/base_auth_user_provider.dart
new file mode 100644
index 0000000..1578da1
--- /dev/null
+++ b/lib/auth/base_auth_user_provider.dart
@@ -0,0 +1,36 @@
+class AuthUserInfo {
+  const AuthUserInfo({
+    this.uid,
+    this.email,
+    this.displayName,
+    this.photoUrl,
+    this.phoneNumber,
+  });
+
+  final String? uid;
+  final String? email;
+  final String? displayName;
+  final String? photoUrl;
+  final String? phoneNumber;
+}
+
+abstract class BaseAuthUser {
+  bool get loggedIn;
+  bool get emailVerified;
+
+  AuthUserInfo get authUserInfo;
+
+  Future? delete();
+  Future? updateEmail(String email);
+  Future? sendEmailVerification();
+  Future refreshUser() async {}
+
+  String? get uid => authUserInfo.uid;
+  String? get email => authUserInfo.email;
+  String? get displayName => authUserInfo.displayName;
+  String? get photoUrl => authUserInfo.photoUrl;
+  String? get phoneNumber => authUserInfo.phoneNumber;
+}
+
+BaseAuthUser? currentUser;
+bool get loggedIn => currentUser?.loggedIn ?? false;
diff --git a/lib/auth/firebase_auth/anonymous_auth.dart b/lib/auth/firebase_auth/anonymous_auth.dart
new file mode 100644
index 0000000..bf6502c
--- /dev/null
+++ b/lib/auth/firebase_auth/anonymous_auth.dart
@@ -0,0 +1,4 @@
+import 'package:firebase_auth/firebase_auth.dart';
+
+Future<UserCredential?> anonymousSignInFunc() =>
+    FirebaseAuth.instance.signInAnonymously();
diff --git a/lib/auth/firebase_auth/apple_auth.dart b/lib/auth/firebase_auth/apple_auth.dart
new file mode 100644
index 0000000..39fc206
--- /dev/null
+++ b/lib/auth/firebase_auth/apple_auth.dart
@@ -0,0 +1,72 @@
+import 'dart:convert';
+import 'dart:math';
+
+import 'package:crypto/crypto.dart';
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:flutter/foundation.dart';
+import 'package:sign_in_with_apple/sign_in_with_apple.dart';
+
+/// Generates a cryptographically secure random nonce, to be included in a
+/// credential request.
+String generateNonce([int length = 32]) {
+  final charset =
+      '0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._';
+  final random = Random.secure();
+  return List.generate(length, (_) => charset[random.nextInt(charset.length)])
+      .join();
+}
+
+/// Returns the sha256 hash of [input] in hex notation.
+String sha256ofString(String input) {
+  final bytes = utf8.encode(input);
+  final digest = sha256.convert(bytes);
+  return digest.toString();
+}
+
+Future<UserCredential> appleSignIn() async {
+  if (kIsWeb) {
+    final provider = OAuthProvider("apple.com")
+      ..addScope('email')
+      ..addScope('name');
+
+    // Sign in the user with Firebase.
+    return await FirebaseAuth.instance.signInWithPopup(provider);
+  }
+  // To prevent replay attacks with the credential returned from Apple, we
+  // include a nonce in the credential request. When signing in in with
+  // Firebase, the nonce in the id token returned by Apple, is expected to
+  // match the sha256 hash of `rawNonce`.
+  final rawNonce = generateNonce();
+  final nonce = sha256ofString(rawNonce);
+
+  // Request credential for the currently signed in Apple account.
+  final appleCredential = await SignInWithApple.getAppleIDCredential(
+    scopes: [
+      AppleIDAuthorizationScopes.email,
+      AppleIDAuthorizationScopes.fullName,
+    ],
+    nonce: nonce,
+  );
+
+  // Create an `OAuthCredential` from the credential returned by Apple.
+  final oauthCredential = OAuthProvider("apple.com").credential(
+    idToken: appleCredential.identityToken,
+    rawNonce: rawNonce,
+  );
+
+  // Sign in the user with Firebase. If the nonce we generated earlier does
+  // not match the nonce in `appleCredential.identityToken`, sign in will fail.
+  final user =
+      await FirebaseAuth.instance.signInWithCredential(oauthCredential);
+
+  final displayName = [appleCredential.givenName, appleCredential.familyName]
+      .where((name) => name != null)
+      .join(' ');
+
+  // The display name does not automatically come with the user.
+  if (displayName.isNotEmpty) {
+    await user.user?.updateDisplayName(displayName);
+  }
+
+  return user;
+}
diff --git a/lib/auth/firebase_auth/auth_util.dart b/lib/auth/firebase_auth/auth_util.dart
new file mode 100644
index 0000000..417f279
--- /dev/null
+++ b/lib/auth/firebase_auth/auth_util.dart
@@ -0,0 +1,37 @@
+import 'dart:async';
+
+import 'package:flutter/foundation.dart' show kIsWeb;
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:flutter/material.dart';
+import '../auth_manager.dart';
+import '../base_auth_user_provider.dart';
+import '../../flutter_flow/flutter_flow_util.dart';
+
+import 'firebase_auth_manager.dart';
+
+export 'firebase_auth_manager.dart';
+
+final _authManager = FirebaseAuthManager();
+FirebaseAuthManager get authManager => _authManager;
+
+String get currentUserEmail => currentUser?.email ?? '';
+
+String get currentUserUid => currentUser?.uid ?? '';
+
+String get currentUserDisplayName => currentUser?.displayName ?? '';
+
+String get currentUserPhoto => currentUser?.photoUrl ?? '';
+
+String get currentPhoneNumber => currentUser?.phoneNumber ?? '';
+
+String get currentJwtToken => _currentJwtToken ?? '';
+
+bool get currentUserEmailVerified => currentUser?.emailVerified ?? false;
+
+/// Create a Stream that listens to the current user's JWT Token, since Firebase
+/// generates a new token every hour.
+String? _currentJwtToken;
+final jwtTokenStream = FirebaseAuth.instance
+    .idTokenChanges()
+    .map((user) async => _currentJwtToken = await user?.getIdToken())
+    .asBroadcastStream();
diff --git a/lib/auth/firebase_auth/email_auth.dart b/lib/auth/firebase_auth/email_auth.dart
new file mode 100644
index 0000000..f917ce8
--- /dev/null
+++ b/lib/auth/firebase_auth/email_auth.dart
@@ -0,0 +1,17 @@
+import 'package:firebase_auth/firebase_auth.dart';
+
+Future<UserCredential?> emailSignInFunc(
+  String email,
+  String password,
+) =>
+    FirebaseAuth.instance
+        .signInWithEmailAndPassword(email: email.trim(), password: password);
+
+Future<UserCredential?> emailCreateAccountFunc(
+  String email,
+  String password,
+) =>
+    FirebaseAuth.instance.createUserWithEmailAndPassword(
+      email: email.trim(),
+      password: password,
+    );
diff --git a/lib/auth/firebase_auth/firebase_auth_manager.dart b/lib/auth/firebase_auth/firebase_auth_manager.dart
new file mode 100644
index 0000000..ee69106
--- /dev/null
+++ b/lib/auth/firebase_auth/firebase_auth_manager.dart
@@ -0,0 +1,297 @@
+import 'dart:async';
+
+import 'package:flutter/foundation.dart' show kIsWeb;
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:flutter/material.dart';
+import '../auth_manager.dart';
+import '../base_auth_user_provider.dart';
+import '../../flutter_flow/flutter_flow_util.dart';
+
+import 'anonymous_auth.dart';
+import 'apple_auth.dart';
+import 'email_auth.dart';
+import 'firebase_user_provider.dart';
+import 'google_auth.dart';
+import 'jwt_token_auth.dart';
+import 'github_auth.dart';
+
+export '../base_auth_user_provider.dart';
+
+class FirebasePhoneAuthManager extends ChangeNotifier {
+  bool? _triggerOnCodeSent;
+  FirebaseAuthException? phoneAuthError;
+  // Set when using phone verification (after phone number is provided).
+  String? phoneAuthVerificationCode;
+  // Set when using phone sign in in web mode (ignored otherwise).
+  ConfirmationResult? webPhoneAuthConfirmationResult;
+  // Used for handling verification codes for phone sign in.
+  void Function(BuildContext)? _onCodeSent;
+
+  bool get triggerOnCodeSent => _triggerOnCodeSent ?? false;
+  set triggerOnCodeSent(bool val) => _triggerOnCodeSent = val;
+
+  void Function(BuildContext) get onCodeSent =>
+      _onCodeSent == null ? (_) {} : _onCodeSent!;
+  set onCodeSent(void Function(BuildContext) func) => _onCodeSent = func;
+
+  void update(VoidCallback callback) {
+    callback();
+    notifyListeners();
+  }
+}
+
+class FirebaseAuthManager extends AuthManager
+    with
+        EmailSignInManager,
+        AnonymousSignInManager,
+        AppleSignInManager,
+        GoogleSignInManager,
+        GithubSignInManager,
+        JwtSignInManager,
+        PhoneSignInManager {
+  // Set when using phone verification (after phone number is provided).
+  String? _phoneAuthVerificationCode;
+  // Set when using phone sign in in web mode (ignored otherwise).
+  ConfirmationResult? _webPhoneAuthConfirmationResult;
+  FirebasePhoneAuthManager phoneAuthManager = FirebasePhoneAuthManager();
+
+  @override
+  Future signOut() {
+    return FirebaseAuth.instance.signOut();
+  }
+
+  @override
+  Future deleteUser(BuildContext context) async {
+    try {
+      if (!loggedIn) {
+        print('Error: delete user attempted with no logged in user!');
+        return;
+      }
+      await currentUser?.delete();
+    } on FirebaseAuthException catch (e) {
+      if (e.code == 'requires-recent-login') {
+        ScaffoldMessenger.of(context).hideCurrentSnackBar();
+        ScaffoldMessenger.of(context).showSnackBar(
+          SnackBar(
+              content: Text(
+                  'Too long since most recent sign in. Sign in again before deleting your account.')),
+        );
+      }
+    }
+  }
+
+  @override
+  Future updateEmail({
+    required String email,
+    required BuildContext context,
+  }) async {
+    try {
+      if (!loggedIn) {
+        print('Error: update email attempted with no logged in user!');
+        return;
+      }
+      await currentUser?.updateEmail(email);
+    } on FirebaseAuthException catch (e) {
+      if (e.code == 'requires-recent-login') {
+        ScaffoldMessenger.of(context).hideCurrentSnackBar();
+        ScaffoldMessenger.of(context).showSnackBar(
+          SnackBar(
+              content: Text(
+                  'Too long since most recent sign in. Sign in again before updating your email.')),
+        );
+      }
+    }
+  }
+
+  @override
+  Future resetPassword({
+    required String email,
+    required BuildContext context,
+  }) async {
+    try {
+      await FirebaseAuth.instance.sendPasswordResetEmail(email: email);
+    } on FirebaseAuthException catch (e) {
+      ScaffoldMessenger.of(context).hideCurrentSnackBar();
+      ScaffoldMessenger.of(context).showSnackBar(
+        SnackBar(content: Text('Error: ${e.message!}')),
+      );
+      return null;
+    }
+    ScaffoldMessenger.of(context).showSnackBar(
+      SnackBar(content: Text('Password reset email sent')),
+    );
+  }
+
+  @override
+  Future<BaseAuthUser?> signInWithEmail(
+    BuildContext context,
+    String email,
+    String password,
+  ) =>
+      _signInOrCreateAccount(
+        context,
+        () => emailSignInFunc(email, password),
+        'EMAIL',
+      );
+
+  @override
+  Future<BaseAuthUser?> createAccountWithEmail(
+    BuildContext context,
+    String email,
+    String password,
+  ) =>
+      _signInOrCreateAccount(
+        context,
+        () => emailCreateAccountFunc(email, password),
+        'EMAIL',
+      );
+
+  @override
+  Future<BaseAuthUser?> signInAnonymously(
+    BuildContext context,
+  ) =>
+      _signInOrCreateAccount(context, anonymousSignInFunc, 'ANONYMOUS');
+
+  @override
+  Future<BaseAuthUser?> signInWithApple(BuildContext context) =>
+      _signInOrCreateAccount(context, appleSignIn, 'APPLE');
+
+  @override
+  Future<BaseAuthUser?> signInWithGoogle(BuildContext context) =>
+      _signInOrCreateAccount(context, googleSignInFunc, 'GOOGLE');
+
+  @override
+  Future<BaseAuthUser?> signInWithGithub(BuildContext context) =>
+      _signInOrCreateAccount(context, githubSignInFunc, 'GITHUB');
+
+  @override
+  Future<BaseAuthUser?> signInWithJwtToken(
+    BuildContext context,
+    String jwtToken,
+  ) =>
+      _signInOrCreateAccount(context, () => jwtTokenSignIn(jwtToken), 'JWT');
+
+  void handlePhoneAuthStateChanges(BuildContext context) {
+    phoneAuthManager.addListener(() {
+      if (!context.mounted) {
+        return;
+      }
+
+      if (phoneAuthManager.triggerOnCodeSent) {
+        phoneAuthManager.onCodeSent(context);
+        phoneAuthManager
+            .update(() => phoneAuthManager.triggerOnCodeSent = false);
+      } else if (phoneAuthManager.phoneAuthError != null) {
+        final e = phoneAuthManager.phoneAuthError!;
+        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
+          content: Text('Error: ${e.message!}'),
+        ));
+        phoneAuthManager.update(() => phoneAuthManager.phoneAuthError = null);
+      }
+    });
+  }
+
+  @override
+  Future beginPhoneAuth({
+    required BuildContext context,
+    required String phoneNumber,
+    required void Function(BuildContext) onCodeSent,
+  }) async {
+    phoneAuthManager.update(() => phoneAuthManager.onCodeSent = onCodeSent);
+    if (kIsWeb) {
+      phoneAuthManager.webPhoneAuthConfirmationResult =
+          await FirebaseAuth.instance.signInWithPhoneNumber(phoneNumber);
+      phoneAuthManager.update(() => phoneAuthManager.triggerOnCodeSent = true);
+      return;
+    }
+    final completer = Completer<bool>();
+    // If you'd like auto-verification, without the user having to enter the SMS
+    // code manually. Follow these instructions:
+    // * For Android: https://firebase.google.com/docs/auth/android/phone-auth?authuser=0#enable-app-verification (SafetyNet set up)
+    // * For iOS: https://firebase.google.com/docs/auth/ios/phone-auth?authuser=0#start-receiving-silent-notifications
+    // * Finally modify verificationCompleted below as instructed.
+    await FirebaseAuth.instance.verifyPhoneNumber(
+      phoneNumber: phoneNumber,
+      timeout:
+          Duration(seconds: 0), // Skips Android's default auto-verification
+      verificationCompleted: (phoneAuthCredential) async {
+        await FirebaseAuth.instance.signInWithCredential(phoneAuthCredential);
+        phoneAuthManager.update(() {
+          phoneAuthManager.triggerOnCodeSent = false;
+          phoneAuthManager.phoneAuthError = null;
+        });
+        // If you've implemented auto-verification, navigate to home page or
+        // onboarding page here manually. Uncomment the lines below and replace
+        // DestinationPage() with the desired widget.
+        // await Navigator.push(
+        //   context,
+        //   MaterialPageRoute(builder: (_) => DestinationPage()),
+        // );
+      },
+      verificationFailed: (e) {
+        phoneAuthManager.update(() {
+          phoneAuthManager.triggerOnCodeSent = false;
+          phoneAuthManager.phoneAuthError = e;
+        });
+        completer.complete(false);
+      },
+      codeSent: (verificationId, _) {
+        phoneAuthManager.update(() {
+          phoneAuthManager.phoneAuthVerificationCode = verificationId;
+          phoneAuthManager.triggerOnCodeSent = true;
+          phoneAuthManager.phoneAuthError = null;
+        });
+        completer.complete(true);
+      },
+      codeAutoRetrievalTimeout: (_) {},
+    );
+
+    return completer.future;
+  }
+
+  @override
+  Future verifySmsCode({
+    required BuildContext context,
+    required String smsCode,
+  }) {
+    if (kIsWeb) {
+      return _signInOrCreateAccount(
+        context,
+        () => phoneAuthManager.webPhoneAuthConfirmationResult!.confirm(smsCode),
+        'PHONE',
+      );
+    } else {
+      final authCredential = PhoneAuthProvider.credential(
+        verificationId: phoneAuthManager.phoneAuthVerificationCode!,
+        smsCode: smsCode,
+      );
+      return _signInOrCreateAccount(
+        context,
+        () => FirebaseAuth.instance.signInWithCredential(authCredential),
+        'PHONE',
+      );
+    }
+  }
+
+  /// Tries to sign in or create an account using Firebase Auth.
+  /// Returns the User object if sign in was successful.
+  Future<BaseAuthUser?> _signInOrCreateAccount(
+    BuildContext context,
+    Future<UserCredential?> Function() signInFunc,
+    String authProvider,
+  ) async {
+    try {
+      final userCredential = await signInFunc();
+      return userCredential == null
+          ? null
+          : PacemakerDataPlatformFirebaseUser.fromUserCredential(
+              userCredential);
+    } on FirebaseAuthException catch (e) {
+      ScaffoldMessenger.of(context).hideCurrentSnackBar();
+      ScaffoldMessenger.of(context).showSnackBar(
+        SnackBar(content: Text('Error: ${e.message!}')),
+      );
+      return null;
+    }
+  }
+}
diff --git a/lib/auth/firebase_auth/firebase_user_provider.dart b/lib/auth/firebase_auth/firebase_user_provider.dart
new file mode 100644
index 0000000..03f98b1
--- /dev/null
+++ b/lib/auth/firebase_auth/firebase_user_provider.dart
@@ -0,0 +1,65 @@
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:rxdart/rxdart.dart';
+
+import '../base_auth_user_provider.dart';
+
+export '../base_auth_user_provider.dart';
+
+class PacemakerDataPlatformFirebaseUser extends BaseAuthUser {
+  PacemakerDataPlatformFirebaseUser(this.user);
+  User? user;
+  bool get loggedIn => user != null;
+
+  @override
+  AuthUserInfo get authUserInfo => AuthUserInfo(
+        uid: user?.uid,
+        email: user?.email,
+        displayName: user?.displayName,
+        photoUrl: user?.photoURL,
+        phoneNumber: user?.phoneNumber,
+      );
+
+  @override
+  Future? delete() => user?.delete();
+
+  @override
+  Future? updateEmail(String email) async => await user?.updateEmail(email);
+
+  @override
+  Future? sendEmailVerification() => user?.sendEmailVerification();
+
+  @override
+  bool get emailVerified {
+    // Reloads the user when checking in order to get the most up to date
+    // email verified status.
+    if (loggedIn && !user!.emailVerified) {
+      refreshUser();
+    }
+    return user?.emailVerified ?? false;
+  }
+
+  @override
+  Future refreshUser() async {
+    await FirebaseAuth.instance.currentUser
+        ?.reload()
+        .then((_) => user = FirebaseAuth.instance.currentUser);
+  }
+
+  static BaseAuthUser fromUserCredential(UserCredential userCredential) =>
+      fromFirebaseUser(userCredential.user);
+  static BaseAuthUser fromFirebaseUser(User? user) =>
+      PacemakerDataPlatformFirebaseUser(user);
+}
+
+Stream<BaseAuthUser> pacemakerDataPlatformFirebaseUserStream() =>
+    FirebaseAuth.instance
+        .authStateChanges()
+        .debounce((user) => user == null && !loggedIn
+            ? TimerStream(true, const Duration(seconds: 1))
+            : Stream.value(user))
+        .map<BaseAuthUser>(
+      (user) {
+        currentUser = PacemakerDataPlatformFirebaseUser(user);
+        return currentUser!;
+      },
+    );
diff --git a/lib/auth/firebase_auth/github_auth.dart b/lib/auth/firebase_auth/github_auth.dart
new file mode 100644
index 0000000..ff72a73
--- /dev/null
+++ b/lib/auth/firebase_auth/github_auth.dart
@@ -0,0 +1,11 @@
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:flutter/foundation.dart';
+
+// https://firebase.flutter.dev/docs/auth/social/#github
+Future<UserCredential?> githubSignInFunc() async {
+  // Create a new provider
+  GithubAuthProvider githubProvider = GithubAuthProvider();
+
+  // Once signed in, return the UserCredential
+  return await FirebaseAuth.instance.signInWithPopup(githubProvider);
+}
diff --git a/lib/auth/firebase_auth/google_auth.dart b/lib/auth/firebase_auth/google_auth.dart
new file mode 100644
index 0000000..ff860b2
--- /dev/null
+++ b/lib/auth/firebase_auth/google_auth.dart
@@ -0,0 +1,23 @@
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:flutter/foundation.dart';
+import 'package:google_sign_in/google_sign_in.dart';
+
+final _googleSignIn = GoogleSignIn();
+
+Future<UserCredential?> googleSignInFunc() async {
+  if (kIsWeb) {
+    // Once signed in, return the UserCredential
+    return await FirebaseAuth.instance.signInWithPopup(GoogleAuthProvider());
+  }
+
+  await signOutWithGoogle().catchError((_) => null);
+  final auth = await (await _googleSignIn.signIn())?.authentication;
+  if (auth == null) {
+    return null;
+  }
+  final credential = GoogleAuthProvider.credential(
+      idToken: auth.idToken, accessToken: auth.accessToken);
+  return FirebaseAuth.instance.signInWithCredential(credential);
+}
+
+Future signOutWithGoogle() => _googleSignIn.signOut();
diff --git a/lib/auth/firebase_auth/jwt_token_auth.dart b/lib/auth/firebase_auth/jwt_token_auth.dart
new file mode 100644
index 0000000..35cd56c
--- /dev/null
+++ b/lib/auth/firebase_auth/jwt_token_auth.dart
@@ -0,0 +1,4 @@
+import 'package:firebase_auth/firebase_auth.dart';
+
+Future<UserCredential?> jwtTokenSignIn(String jwtToken) =>
+    FirebaseAuth.instance.signInWithCustomToken(jwtToken);
diff --git a/lib/authenticate_solo1/authenticate_solo1_model.dart b/lib/authenticate_solo1/authenticate_solo1_model.dart
new file mode 100644
index 0000000..95b832a
--- /dev/null
+++ b/lib/authenticate_solo1/authenticate_solo1_model.dart
@@ -0,0 +1,47 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/flutter_flow/flutter_flow_button_tabbar.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter_spinkit/flutter_spinkit.dart';
+import 'package:flutter_svg/flutter_svg.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class AuthenticateSolo1Model extends FlutterFlowModel {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  // State field(s) for TabBar widget.
+  TabController? tabBarController;
+  int get tabBarCurrentIndex =>
+      tabBarController != null ? tabBarController!.index : 0;
+
+  // State field(s) for emailAddress_Login widget.
+  TextEditingController? emailAddressLoginController;
+  String? Function(BuildContext, String?)? emailAddressLoginControllerValidator;
+  // State field(s) for password_Login widget.
+  TextEditingController? passwordLoginController;
+  late bool passwordLoginVisibility;
+  String? Function(BuildContext, String?)? passwordLoginControllerValidator;
+  // State field(s) for Checkbox widget.
+  bool? checkboxValue;
+
+  /// Initialization and disposal methods.
+
+  void initState(BuildContext context) {
+    passwordLoginVisibility = false;
+  }
+
+  void dispose() {
+    unfocusNode.dispose();
+    tabBarController?.dispose();
+    emailAddressLoginController?.dispose();
+    passwordLoginController?.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
diff --git a/lib/authenticate_solo1/authenticate_solo1_widget.dart b/lib/authenticate_solo1/authenticate_solo1_widget.dart
new file mode 100644
index 0000000..4df11c4
--- /dev/null
+++ b/lib/authenticate_solo1/authenticate_solo1_widget.dart
@@ -0,0 +1,492 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/flutter_flow/flutter_flow_button_tabbar.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter_spinkit/flutter_spinkit.dart';
+import 'package:flutter_svg/flutter_svg.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'authenticate_solo1_model.dart';
+export 'authenticate_solo1_model.dart';
+
+class AuthenticateSolo1Widget extends StatefulWidget {
+  const AuthenticateSolo1Widget({Key? key}) : super(key: key);
+
+  @override
+  _AuthenticateSolo1WidgetState createState() =>
+      _AuthenticateSolo1WidgetState();
+}
+
+class _AuthenticateSolo1WidgetState extends State<AuthenticateSolo1Widget>
+    with TickerProviderStateMixin {
+  late AuthenticateSolo1Model _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => AuthenticateSolo1Model());
+
+    _model.tabBarController = TabController(
+      vsync: this,
+      length: 1,
+      initialIndex: 0,
+    );
+    _model.emailAddressLoginController ??= TextEditingController();
+    _model.passwordLoginController ??= TextEditingController();
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return GestureDetector(
+      onTap: () => FocusScope.of(context).requestFocus(_model.unfocusNode),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: Color(0xFF14181B),
+        body: Container(
+          width: MediaQuery.sizeOf(context).width * 1.0,
+          height: MediaQuery.sizeOf(context).height * 1.0,
+          decoration: BoxDecoration(
+            color: Color(0xFF14181B),
+            image: DecorationImage(
+              fit: BoxFit.cover,
+              image: Image.network(
+                'https://images.unsplash.com/photo-1525824236856-8c0a31dfe3be?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OXx8d2F0ZXJmYWxsfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60',
+              ).image,
+            ),
+          ),
+          child: Container(
+            width: 100.0,
+            height: 100.0,
+            decoration: BoxDecoration(
+              color: Color(0x990F1113),
+            ),
+            child: Padding(
+              padding: EdgeInsetsDirectional.fromSTEB(0.0, 70.0, 0.0, 0.0),
+              child: Column(
+                mainAxisSize: MainAxisSize.max,
+                children: [
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 16.0, 0.0, 20.0),
+                    child: Row(
+                      mainAxisSize: MainAxisSize.max,
+                      mainAxisAlignment: MainAxisAlignment.center,
+                      children: [
+                        SvgPicture.asset(
+                          'assets/images/pacemaker_logo.svg',
+                          width: 160.0,
+                          height: 105.0,
+                          fit: BoxFit.cover,
+                        ),
+                      ],
+                    ),
+                  ),
+                  Expanded(
+                    child: Column(
+                      children: [
+                        Align(
+                          alignment: Alignment(0.0, 0),
+                          child: FlutterFlowButtonTabBar(
+                            useToggleButtonStyle: false,
+                            isScrollable: true,
+                            labelStyle:
+                                FlutterFlowTheme.of(context).titleMedium,
+                            unselectedLabelStyle: TextStyle(),
+                            labelColor: Colors.white,
+                            borderWidth: 0.0,
+                            borderRadius: 0.0,
+                            elevation: 0.0,
+                            tabs: [
+                              Tab(
+                                text: FFLocalizations.of(context).getText(
+                                  'vymklxe7' /* Login */,
+                                ),
+                              ),
+                            ],
+                            controller: _model.tabBarController,
+                            onTap: (value) => setState(() {}),
+                          ),
+                        ),
+                        Expanded(
+                          child: TabBarView(
+                            controller: _model.tabBarController,
+                            children: [
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    44.0, 0.0, 44.0, 0.0),
+                                child: SingleChildScrollView(
+                                  child: Column(
+                                    mainAxisSize: MainAxisSize.max,
+                                    children: [
+                                      Padding(
+                                        padding: EdgeInsetsDirectional.fromSTEB(
+                                            0.0, 20.0, 0.0, 0.0),
+                                        child: TextFormField(
+                                          controller: _model
+                                              .emailAddressLoginController,
+                                          obscureText: false,
+                                          decoration: InputDecoration(
+                                            labelText:
+                                                FFLocalizations.of(context)
+                                                    .getText(
+                                              'xzjihr7v' /* Email Address */,
+                                            ),
+                                            labelStyle:
+                                                FlutterFlowTheme.of(context)
+                                                    .bodyMedium
+                                                    .override(
+                                                      fontFamily: 'Lexend Deca',
+                                                      color: Color(0xFF95A1AC),
+                                                      fontSize: 14.0,
+                                                      fontWeight:
+                                                          FontWeight.normal,
+                                                    ),
+                                            hintStyle:
+                                                FlutterFlowTheme.of(context)
+                                                    .bodyMedium
+                                                    .override(
+                                                      fontFamily: 'Lexend Deca',
+                                                      color: Color(0xFF95A1AC),
+                                                      fontSize: 14.0,
+                                                      fontWeight:
+                                                          FontWeight.normal,
+                                                    ),
+                                            enabledBorder: OutlineInputBorder(
+                                              borderSide: BorderSide(
+                                                color: Color(0x00000000),
+                                                width: 1.0,
+                                              ),
+                                              borderRadius:
+                                                  BorderRadius.circular(8.0),
+                                            ),
+                                            focusedBorder: OutlineInputBorder(
+                                              borderSide: BorderSide(
+                                                color: Color(0x00000000),
+                                                width: 1.0,
+                                              ),
+                                              borderRadius:
+                                                  BorderRadius.circular(8.0),
+                                            ),
+                                            errorBorder: OutlineInputBorder(
+                                              borderSide: BorderSide(
+                                                color: Color(0x00000000),
+                                                width: 1.0,
+                                              ),
+                                              borderRadius:
+                                                  BorderRadius.circular(8.0),
+                                            ),
+                                            focusedErrorBorder:
+                                                OutlineInputBorder(
+                                              borderSide: BorderSide(
+                                                color: Color(0x00000000),
+                                                width: 1.0,
+                                              ),
+                                              borderRadius:
+                                                  BorderRadius.circular(8.0),
+                                            ),
+                                            filled: true,
+                                            fillColor: Colors.white,
+                                            contentPadding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    20.0, 24.0, 20.0, 24.0),
+                                          ),
+                                          style: FlutterFlowTheme.of(context)
+                                              .titleSmall
+                                              .override(
+                                                fontFamily: 'Poppins',
+                                                color: Color(0xFF0F1113),
+                                              ),
+                                          maxLines: null,
+                                          validator: _model
+                                              .emailAddressLoginControllerValidator
+                                              .asValidator(context),
+                                        ),
+                                      ),
+                                      Padding(
+                                        padding: EdgeInsetsDirectional.fromSTEB(
+                                            0.0, 12.0, 0.0, 0.0),
+                                        child: TextFormField(
+                                          controller:
+                                              _model.passwordLoginController,
+                                          textInputAction: TextInputAction.done,
+                                          obscureText:
+                                              !_model.passwordLoginVisibility,
+                                          decoration: InputDecoration(
+                                            labelText:
+                                                FFLocalizations.of(context)
+                                                    .getText(
+                                              'cfco8cq6' /* Password */,
+                                            ),
+                                            labelStyle:
+                                                FlutterFlowTheme.of(context)
+                                                    .bodyMedium
+                                                    .override(
+                                                      fontFamily: 'Lexend Deca',
+                                                      color: Color(0xFF95A1AC),
+                                                      fontSize: 14.0,
+                                                      fontWeight:
+                                                          FontWeight.normal,
+                                                    ),
+                                            hintText:
+                                                FFLocalizations.of(context)
+                                                    .getText(
+                                              'tstxq2u0' /* Password */,
+                                            ),
+                                            hintStyle:
+                                                FlutterFlowTheme.of(context)
+                                                    .bodyMedium
+                                                    .override(
+                                                      fontFamily: 'Lexend Deca',
+                                                      color: Color(0xFF95A1AC),
+                                                      fontSize: 14.0,
+                                                      fontWeight:
+                                                          FontWeight.normal,
+                                                    ),
+                                            enabledBorder: OutlineInputBorder(
+                                              borderSide: BorderSide(
+                                                color: Color(0x00000000),
+                                                width: 1.0,
+                                              ),
+                                              borderRadius:
+                                                  BorderRadius.circular(8.0),
+                                            ),
+                                            focusedBorder: OutlineInputBorder(
+                                              borderSide: BorderSide(
+                                                color: Color(0x00000000),
+                                                width: 1.0,
+                                              ),
+                                              borderRadius:
+                                                  BorderRadius.circular(8.0),
+                                            ),
+                                            errorBorder: OutlineInputBorder(
+                                              borderSide: BorderSide(
+                                                color: Color(0x00000000),
+                                                width: 1.0,
+                                              ),
+                                              borderRadius:
+                                                  BorderRadius.circular(8.0),
+                                            ),
+                                            focusedErrorBorder:
+                                                OutlineInputBorder(
+                                              borderSide: BorderSide(
+                                                color: Color(0x00000000),
+                                                width: 1.0,
+                                              ),
+                                              borderRadius:
+                                                  BorderRadius.circular(8.0),
+                                            ),
+                                            filled: true,
+                                            fillColor: Colors.white,
+                                            contentPadding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    20.0, 24.0, 20.0, 24.0),
+                                            suffixIcon: InkWell(
+                                              onTap: () => setState(
+                                                () => _model
+                                                        .passwordLoginVisibility =
+                                                    !_model
+                                                        .passwordLoginVisibility,
+                                              ),
+                                              focusNode: FocusNode(
+                                                  skipTraversal: true),
+                                              child: Icon(
+                                                _model.passwordLoginVisibility
+                                                    ? Icons.visibility_outlined
+                                                    : Icons
+                                                        .visibility_off_outlined,
+                                                color: Color(0xFF95A1AC),
+                                                size: 20.0,
+                                              ),
+                                            ),
+                                          ),
+                                          style: FlutterFlowTheme.of(context)
+                                              .titleSmall
+                                              .override(
+                                                fontFamily: 'Poppins',
+                                                color: Color(0xFF0F1113),
+                                              ),
+                                          validator: _model
+                                              .passwordLoginControllerValidator
+                                              .asValidator(context),
+                                        ),
+                                      ),
+                                      Row(
+                                        mainAxisSize: MainAxisSize.max,
+                                        mainAxisAlignment:
+                                            MainAxisAlignment.center,
+                                        children: [
+                                          Text(
+                                            FFLocalizations.of(context).getText(
+                                              'j3zrsklq' /* Save Credentials  */,
+                                            ),
+                                            style: FlutterFlowTheme.of(context)
+                                                .bodyMedium
+                                                .override(
+                                                  fontFamily: 'Poppins',
+                                                  color: FlutterFlowTheme.of(
+                                                          context)
+                                                      .primaryBtnText,
+                                                ),
+                                          ),
+                                          Theme(
+                                            data: ThemeData(
+                                              checkboxTheme: CheckboxThemeData(
+                                                visualDensity:
+                                                    VisualDensity.compact,
+                                                materialTapTargetSize:
+                                                    MaterialTapTargetSize
+                                                        .shrinkWrap,
+                                                shape: RoundedRectangleBorder(
+                                                  borderRadius:
+                                                      BorderRadius.circular(
+                                                          4.0),
+                                                ),
+                                              ),
+                                              unselectedWidgetColor:
+                                                  FlutterFlowTheme.of(context)
+                                                      .secondaryText,
+                                            ),
+                                            child: Checkbox(
+                                              value: _model.checkboxValue ??=
+                                                  true,
+                                              onChanged: (newValue) async {
+                                                setState(() => _model
+                                                    .checkboxValue = newValue!);
+                                              },
+                                              activeColor:
+                                                  FlutterFlowTheme.of(context)
+                                                      .lineColor,
+                                              checkColor:
+                                                  FlutterFlowTheme.of(context)
+                                                      .info,
+                                            ),
+                                          ),
+                                        ],
+                                      ),
+                                      Padding(
+                                        padding: EdgeInsetsDirectional.fromSTEB(
+                                            0.0, 24.0, 0.0, 0.0),
+                                        child: FFButtonWidget(
+                                          onPressed: () async {
+                                            GoRouter.of(context)
+                                                .prepareAuthEvent();
+
+                                            final user = await authManager
+                                                .signInWithEmail(
+                                              context,
+                                              _model.emailAddressLoginController
+                                                  .text,
+                                              _model
+                                                  .passwordLoginController.text,
+                                            );
+                                            if (user == null) {
+                                              return;
+                                            }
+
+                                            context.goNamedAuth(
+                                                'Dashboard', context.mounted);
+                                          },
+                                          text: FFLocalizations.of(context)
+                                              .getText(
+                                            'pdnqp7u9' /* Login */,
+                                          ),
+                                          options: FFButtonOptions(
+                                            width: 230.0,
+                                            height: 50.0,
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 0.0, 0.0, 0.0),
+                                            iconPadding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 0.0, 0.0, 0.0),
+                                            color: FlutterFlowTheme.of(context)
+                                                .secondary,
+                                            textStyle: FlutterFlowTheme.of(
+                                                    context)
+                                                .titleSmall
+                                                .override(
+                                                  fontFamily: 'Lexend Deca',
+                                                  color: FlutterFlowTheme.of(
+                                                          context)
+                                                      .primaryBtnText,
+                                                  fontSize: 16.0,
+                                                  fontWeight: FontWeight.normal,
+                                                ),
+                                            elevation: 3.0,
+                                            borderSide: BorderSide(
+                                              color: Colors.transparent,
+                                              width: 1.0,
+                                            ),
+                                          ),
+                                        ),
+                                      ),
+                                      Padding(
+                                        padding: EdgeInsetsDirectional.fromSTEB(
+                                            0.0, 20.0, 0.0, 0.0),
+                                        child: FFButtonWidget(
+                                          onPressed: () async {
+                                            context.pushNamed('forgotPassword');
+                                          },
+                                          text: FFLocalizations.of(context)
+                                              .getText(
+                                            'bi1xolfq' /* Forgot Password? */,
+                                          ),
+                                          options: FFButtonOptions(
+                                            width: 170.0,
+                                            height: 40.0,
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 0.0, 0.0, 0.0),
+                                            iconPadding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 0.0, 0.0, 0.0),
+                                            color: Color(0x0039D2C0),
+                                            textStyle:
+                                                FlutterFlowTheme.of(context)
+                                                    .titleMedium
+                                                    .override(
+                                                      fontFamily: 'Poppins',
+                                                      color:
+                                                          FlutterFlowTheme.of(
+                                                                  context)
+                                                              .primaryBtnText,
+                                                    ),
+                                            elevation: 0.0,
+                                            borderSide: BorderSide(
+                                              color: Colors.transparent,
+                                              width: 1.0,
+                                            ),
+                                          ),
+                                        ),
+                                      ),
+                                    ],
+                                  ),
+                                ),
+                              ),
+                            ],
+                          ),
+                        ),
+                      ],
+                    ),
+                  ),
+                ],
+              ),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
diff --git a/lib/backend/firebase/firebase_config.dart b/lib/backend/firebase/firebase_config.dart
new file mode 100644
index 0000000..669ed67
--- /dev/null
+++ b/lib/backend/firebase/firebase_config.dart
@@ -0,0 +1,18 @@
+import 'package:firebase_core/firebase_core.dart';
+import 'package:flutter/foundation.dart';
+
+Future initFirebase() async {
+  if (kIsWeb) {
+    await Firebase.initializeApp(
+        options: FirebaseOptions(
+            apiKey: "AIzaSyDu0jx3Uxl9MM7NoFAe5e4ZHPwI9N8qTHc",
+            authDomain: "pacemaker-data-platform.firebaseapp.com",
+            projectId: "pacemaker-data-platform",
+            storageBucket: "pacemaker-data-platform.appspot.com",
+            messagingSenderId: "825775316217",
+            appId: "1:825775316217:web:a59d13f05eff358ff89628",
+            measurementId: "G-5SS4N4BL80"));
+  } else {
+    await Firebase.initializeApp();
+  }
+}
diff --git a/lib/flutter_flow/flutter_flow_button_tabbar.dart b/lib/flutter_flow/flutter_flow_button_tabbar.dart
new file mode 100644
index 0000000..c0151fe
--- /dev/null
+++ b/lib/flutter_flow/flutter_flow_button_tabbar.dart
@@ -0,0 +1,865 @@
+import 'dart:math' as math;
+import 'dart:ui' show lerpDouble;
+
+import 'package:flutter/foundation.dart';
+import 'package:flutter/gestures.dart' show DragStartBehavior;
+import 'package:flutter/material.dart';
+import 'package:flutter/rendering.dart';
+
+const double _kTabHeight = 46.0;
+
+typedef _LayoutCallback = void Function(
+    List<double> xOffsets, TextDirection textDirection, double width);
+
+class _TabLabelBarRenderer extends RenderFlex {
+  _TabLabelBarRenderer({
+    required Axis direction,
+    required MainAxisSize mainAxisSize,
+    required MainAxisAlignment mainAxisAlignment,
+    required CrossAxisAlignment crossAxisAlignment,
+    required TextDirection textDirection,
+    required VerticalDirection verticalDirection,
+    required this.onPerformLayout,
+  }) : super(
+          direction: direction,
+          mainAxisSize: mainAxisSize,
+          mainAxisAlignment: mainAxisAlignment,
+          crossAxisAlignment: crossAxisAlignment,
+          textDirection: textDirection,
+          verticalDirection: verticalDirection,
+        );
+
+  _LayoutCallback onPerformLayout;
+
+  @override
+  void performLayout() {
+    super.performLayout();
+    // xOffsets will contain childCount+1 values, giving the offsets of the
+    // leading edge of the first tab as the first value, of the leading edge of
+    // the each subsequent tab as each subsequent value, and of the trailing
+    // edge of the last tab as the last value.
+    RenderBox? child = firstChild;
+    final List<double> xOffsets = <double>[];
+    while (child != null) {
+      final FlexParentData childParentData =
+          child.parentData! as FlexParentData;
+      xOffsets.add(childParentData.offset.dx);
+      assert(child.parentData == childParentData);
+      child = childParentData.nextSibling;
+    }
+    assert(textDirection != null);
+    switch (textDirection!) {
+      case TextDirection.rtl:
+        xOffsets.insert(0, size.width);
+        break;
+      case TextDirection.ltr:
+        xOffsets.add(size.width);
+        break;
+    }
+    onPerformLayout(xOffsets, textDirection!, size.width);
+  }
+}
+
+// This class and its renderer class only exist to report the widths of the tabs
+// upon layout. The tab widths are only used at paint time (see _IndicatorPainter)
+// or in response to input.
+class _TabLabelBar extends Flex {
+  _TabLabelBar({
+    required List<Widget> children,
+    required this.onPerformLayout,
+  }) : super(
+          children: children,
+          direction: Axis.horizontal,
+          mainAxisSize: MainAxisSize.max,
+          mainAxisAlignment: MainAxisAlignment.start,
+          crossAxisAlignment: CrossAxisAlignment.center,
+          verticalDirection: VerticalDirection.down,
+        );
+
+  final _LayoutCallback onPerformLayout;
+
+  @override
+  RenderFlex createRenderObject(BuildContext context) {
+    return _TabLabelBarRenderer(
+      direction: direction,
+      mainAxisAlignment: mainAxisAlignment,
+      mainAxisSize: mainAxisSize,
+      crossAxisAlignment: crossAxisAlignment,
+      textDirection: getEffectiveTextDirection(context)!,
+      verticalDirection: verticalDirection,
+      onPerformLayout: onPerformLayout,
+    );
+  }
+
+  @override
+  void updateRenderObject(
+      BuildContext context, _TabLabelBarRenderer renderObject) {
+    super.updateRenderObject(context, renderObject);
+    renderObject.onPerformLayout = onPerformLayout;
+  }
+}
+
+class _IndicatorPainter extends CustomPainter {
+  _IndicatorPainter({
+    required this.controller,
+    required this.tabKeys,
+    required _IndicatorPainter? old,
+  }) : super(repaint: controller.animation) {
+    if (old != null) {
+      saveTabOffsets(old._currentTabOffsets, old._currentTextDirection);
+    }
+  }
+
+  final TabController controller;
+
+  final List<GlobalKey> tabKeys;
+
+  // _currentTabOffsets and _currentTextDirection are set each time TabBar
+  // layout is completed. These values can be null when TabBar contains no
+  // tabs, since there are nothing to lay out.
+  List<double>? _currentTabOffsets;
+  TextDirection? _currentTextDirection;
+
+  BoxPainter? _painter;
+  bool _needsPaint = false;
+  void markNeedsPaint() {
+    _needsPaint = true;
+  }
+
+  void dispose() {
+    _painter?.dispose();
+  }
+
+  void saveTabOffsets(List<double>? tabOffsets, TextDirection? textDirection) {
+    _currentTabOffsets = tabOffsets;
+    _currentTextDirection = textDirection;
+  }
+
+  // _currentTabOffsets[index] is the offset of the start edge of the tab at index, and
+  // _currentTabOffsets[_currentTabOffsets.length] is the end edge of the last tab.
+  int get maxTabIndex => _currentTabOffsets!.length - 2;
+
+  double centerOf(int tabIndex) {
+    assert(_currentTabOffsets != null);
+    assert(_currentTabOffsets!.isNotEmpty);
+    assert(tabIndex >= 0);
+    assert(tabIndex <= maxTabIndex);
+    return (_currentTabOffsets![tabIndex] + _currentTabOffsets![tabIndex + 1]) /
+        2.0;
+  }
+
+  @override
+  void paint(Canvas canvas, Size size) {
+    _needsPaint = false;
+  }
+
+  @override
+  bool shouldRepaint(_IndicatorPainter old) {
+    return _needsPaint ||
+        controller != old.controller ||
+        tabKeys.length != old.tabKeys.length ||
+        (!listEquals(_currentTabOffsets, old._currentTabOffsets)) ||
+        _currentTextDirection != old._currentTextDirection;
+  }
+}
+
+// This class, and TabBarScrollController, only exist to handle the case
+// where a scrollable TabBar has a non-zero initialIndex. In that case we can
+// only compute the scroll position's initial scroll offset (the "correct"
+// pixels value) after the TabBar viewport width and scroll limits are known.
+
+class _TabBarScrollPosition extends ScrollPositionWithSingleContext {
+  _TabBarScrollPosition({
+    required ScrollPhysics physics,
+    required ScrollContext context,
+    required ScrollPosition? oldPosition,
+    required this.tabBar,
+  }) : super(
+          initialPixels: null,
+          physics: physics,
+          context: context,
+          oldPosition: oldPosition,
+        );
+
+  final _FlutterFlowButtonTabBarState tabBar;
+
+  bool _viewportDimensionWasNonZero = false;
+
+  // Position should be adjusted at least once.
+  bool _needsPixelsCorrection = true;
+
+  @override
+  bool applyContentDimensions(double minScrollExtent, double maxScrollExtent) {
+    bool result = true;
+    if (!_viewportDimensionWasNonZero) {
+      _viewportDimensionWasNonZero = viewportDimension != 0.0;
+    }
+    // If the viewport never had a non-zero dimension, we just want to jump
+    // to the initial scroll position to avoid strange scrolling effects in
+    // release mode: In release mode, the viewport temporarily may have a
+    // dimension of zero before the actual dimension is calculated. In that
+    // scenario, setting the actual dimension would cause a strange scroll
+    // effect without this guard because the super call below would starts a
+    // ballistic scroll activity.
+    if (!_viewportDimensionWasNonZero || _needsPixelsCorrection) {
+      _needsPixelsCorrection = false;
+      correctPixels(tabBar._initialScrollOffset(
+          viewportDimension, minScrollExtent, maxScrollExtent));
+      result = false;
+    }
+    return super.applyContentDimensions(minScrollExtent, maxScrollExtent) &&
+        result;
+  }
+
+  void markNeedsPixelsCorrection() {
+    _needsPixelsCorrection = true;
+  }
+}
+
+// This class, and TabBarScrollPosition, only exist to handle the case
+// where a scrollable TabBar has a non-zero initialIndex.
+class _TabBarScrollController extends ScrollController {
+  _TabBarScrollController(this.tabBar);
+
+  final _FlutterFlowButtonTabBarState tabBar;
+
+  @override
+  ScrollPosition createScrollPosition(ScrollPhysics physics,
+      ScrollContext context, ScrollPosition? oldPosition) {
+    return _TabBarScrollPosition(
+      physics: physics,
+      context: context,
+      oldPosition: oldPosition,
+      tabBar: tabBar,
+    );
+  }
+}
+
+/// A Flutterflow Design widget that displays a horizontal row of tabs.
+class FlutterFlowButtonTabBar extends StatefulWidget
+    implements PreferredSizeWidget {
+  /// The [tabs] argument must not be null and its length must match the [controller]'s
+  /// [TabController.length].
+  ///
+  /// If a [TabController] is not provided, then there must be a
+  /// [DefaultTabController] ancestor.
+  ///
+  const FlutterFlowButtonTabBar({
+    Key? key,
+    required this.tabs,
+    this.controller,
+    this.isScrollable = false,
+    this.useToggleButtonStyle = false,
+    this.dragStartBehavior = DragStartBehavior.start,
+    this.onTap,
+    this.backgroundColor,
+    this.unselectedBackgroundColor,
+    this.decoration,
+    this.unselectedDecoration,
+    this.labelStyle,
+    this.unselectedLabelStyle,
+    this.labelColor,
+    this.unselectedLabelColor,
+    this.borderWidth = 0,
+    this.borderColor = Colors.transparent,
+    this.unselectedBorderColor = Colors.transparent,
+    this.physics = const BouncingScrollPhysics(),
+    this.labelPadding = const EdgeInsets.symmetric(horizontal: 4),
+    this.buttonMargin = const EdgeInsets.all(4),
+    this.padding = EdgeInsets.zero,
+    this.borderRadius = 8.0,
+    this.elevation = 0,
+  }) : super(key: key);
+
+  /// Typically a list of two or more [Tab] widgets.
+  ///
+  /// The length of this list must match the [controller]'s [TabController.length]
+  /// and the length of the [TabBarView.children] list.
+  final List<Widget> tabs;
+
+  /// This widget's selection and animation state.
+  ///
+  /// If [TabController] is not provided, then the value of [DefaultTabController.of]
+  /// will be used.
+  final TabController? controller;
+
+  /// Whether this tab bar can be scrolled horizontally.
+  ///
+  /// If [isScrollable] is true, then each tab is as wide as needed for its label
+  /// and the entire [FlutterFlowButtonTabBar] is scrollable. Otherwise each tab gets an equal
+  /// share of the available space.
+  final bool isScrollable;
+
+  /// Whether the tab buttons should be styled as toggle buttons.
+  final bool useToggleButtonStyle;
+
+  /// The background [Color] of the button on its selected state.
+  final Color? backgroundColor;
+
+  /// The background [Color] of the button on its unselected state.
+  final Color? unselectedBackgroundColor;
+
+  /// The [BoxDecoration] of the button on its selected state.
+  ///
+  /// If [BoxDecoration] is not provided, [backgroundColor] is used.
+  final BoxDecoration? decoration;
+
+  /// The [BoxDecoration] of the button on its unselected state.
+  ///
+  /// If [BoxDecoration] is not provided, [unselectedBackgroundColor] is used.
+  final BoxDecoration? unselectedDecoration;
+
+  /// The [TextStyle] of the button's [Text] on its selected state. The color provided
+  /// on the TextStyle will be used for the [Icon]'s color.
+  final TextStyle? labelStyle;
+
+  /// The color of selected tab labels.
+  final Color? labelColor;
+
+  /// The color of unselected tab labels.
+  final Color? unselectedLabelColor;
+
+  /// The [TextStyle] of the button's [Text] on its unselected state. The color provided
+  /// on the TextStyle will be used for the [Icon]'s color.
+  final TextStyle? unselectedLabelStyle;
+
+  /// The with of solid [Border] for each button. If no value is provided, the border
+  /// is not drawn.
+  final double borderWidth;
+
+  /// The [Color] of solid [Border] for each button.
+  final Color? borderColor;
+
+  /// The [Color] of solid [Border] for each button. If no value is provided, the value of
+  /// [this.borderColor] is used.
+  final Color? unselectedBorderColor;
+
+  /// The [EdgeInsets] used for the [Padding] of the buttons' content.
+  ///
+  /// The default value is [EdgeInsets.symmetric(horizontal: 4)].
+  final EdgeInsetsGeometry labelPadding;
+
+  /// The [EdgeInsets] used for the [Margin] of the buttons.
+  ///
+  /// The default value is [EdgeInsets.all(4)].
+  final EdgeInsetsGeometry buttonMargin;
+
+  /// The amount of space by which to inset the tab bar.
+  final EdgeInsetsGeometry? padding;
+
+  /// The value of the [BorderRadius.circular] applied to each button.
+  final double borderRadius;
+
+  /// The value of the [elevation] applied to each button.
+  final double elevation;
+
+  final DragStartBehavior dragStartBehavior;
+
+  final ValueChanged<int>? onTap;
+
+  final ScrollPhysics? physics;
+
+  /// A size whose height depends on if the tabs have both icons and text.
+  ///
+  /// [AppBar] uses this size to compute its own preferred size.
+  @override
+  Size get preferredSize {
+    double maxHeight = _kTabHeight;
+    for (final Widget item in tabs) {
+      if (item is PreferredSizeWidget) {
+        final double itemHeight = item.preferredSize.height;
+        maxHeight = math.max(itemHeight, maxHeight);
+      }
+    }
+    return Size.fromHeight(
+        maxHeight + labelPadding.vertical + buttonMargin.vertical);
+  }
+
+  @override
+  State<FlutterFlowButtonTabBar> createState() =>
+      _FlutterFlowButtonTabBarState();
+}
+
+class _FlutterFlowButtonTabBarState extends State<FlutterFlowButtonTabBar>
+    with TickerProviderStateMixin {
+  ScrollController? _scrollController;
+  TabController? _controller;
+  _IndicatorPainter? _indicatorPainter;
+  late AnimationController _animationController;
+  int _currentIndex = 0;
+  int _prevIndex = -1;
+
+  late double _tabStripWidth;
+  late List<GlobalKey> _tabKeys;
+
+  final GlobalKey _tabsParentKey = GlobalKey();
+
+  bool _debugHasScheduledValidTabsCountCheck = false;
+
+  @override
+  void initState() {
+    super.initState();
+    // If indicatorSize is TabIndicatorSize.label, _tabKeys[i] is used to find
+    // the width of tab widget i. See _IndicatorPainter.indicatorRect().
+    _tabKeys = widget.tabs.map((tab) => GlobalKey()).toList();
+
+    /// The animation duration is 2/3 of the tab scroll animation duration in
+    /// Material design (kTabScrollDuration).
+    _animationController = AnimationController(
+        vsync: this, duration: const Duration(milliseconds: 200));
+
+    // so the buttons start in their "final" state (color)
+    _animationController
+      ..value = 1.0
+      ..addListener(() {
+        if (mounted) {
+          setState(() {});
+        }
+      });
+  }
+
+  // If the TabBar is rebuilt with a new tab controller, the caller should
+  // dispose the old one. In that case the old controller's animation will be
+  // null and should not be accessed.
+  bool get _controllerIsValid => _controller?.animation != null;
+
+  void _updateTabController() {
+    final TabController? newController =
+        widget.controller ?? DefaultTabController.maybeOf(context);
+    assert(() {
+      if (newController == null) {
+        throw FlutterError(
+          'No TabController for ${widget.runtimeType}.\n'
+          'When creating a ${widget.runtimeType}, you must either provide an explicit '
+          'TabController using the "controller" property, or you must ensure that there '
+          'is a DefaultTabController above the ${widget.runtimeType}.\n'
+          'In this case, there was neither an explicit controller nor a default controller.',
+        );
+      }
+      return true;
+    }());
+
+    if (newController == _controller) {
+      return;
+    }
+
+    if (_controllerIsValid) {
+      _controller!.animation!.removeListener(_handleTabControllerAnimationTick);
+      _controller!.removeListener(_handleTabControllerTick);
+    }
+    _controller = newController;
+    if (_controller != null) {
+      _controller!.animation!.addListener(_handleTabControllerAnimationTick);
+      _controller!.addListener(_handleTabControllerTick);
+      _currentIndex = _controller!.index;
+    }
+  }
+
+  void _initIndicatorPainter() {
+    _indicatorPainter = !_controllerIsValid
+        ? null
+        : _IndicatorPainter(
+            controller: _controller!,
+            tabKeys: _tabKeys,
+            old: _indicatorPainter,
+          );
+  }
+
+  @override
+  void didChangeDependencies() {
+    super.didChangeDependencies();
+    assert(debugCheckHasMaterial(context));
+    _updateTabController();
+    _initIndicatorPainter();
+  }
+
+  @override
+  void didUpdateWidget(FlutterFlowButtonTabBar oldWidget) {
+    super.didUpdateWidget(oldWidget);
+    if (widget.controller != oldWidget.controller) {
+      _updateTabController();
+      _initIndicatorPainter();
+      // Adjust scroll position.
+      if (_scrollController != null) {
+        final ScrollPosition position = _scrollController!.position;
+        if (position is _TabBarScrollPosition) {
+          position.markNeedsPixelsCorrection();
+        }
+      }
+    }
+
+    if (widget.tabs.length > _tabKeys.length) {
+      final int delta = widget.tabs.length - _tabKeys.length;
+      _tabKeys.addAll(List<GlobalKey>.generate(delta, (int n) => GlobalKey()));
+    } else if (widget.tabs.length < _tabKeys.length) {
+      _tabKeys.removeRange(widget.tabs.length, _tabKeys.length);
+    }
+  }
+
+  @override
+  void dispose() {
+    _indicatorPainter!.dispose();
+    if (_controllerIsValid) {
+      _controller!.animation!.removeListener(_handleTabControllerAnimationTick);
+      _controller!.removeListener(_handleTabControllerTick);
+    }
+    _controller = null;
+    // We don't own the _controller Animation, so it's not disposed here.
+    super.dispose();
+  }
+
+  int get maxTabIndex => _indicatorPainter!.maxTabIndex;
+
+  double _tabScrollOffset(
+      int index, double viewportWidth, double minExtent, double maxExtent) {
+    if (!widget.isScrollable) {
+      return 0.0;
+    }
+    double tabCenter = _indicatorPainter!.centerOf(index);
+    double paddingStart;
+    switch (Directionality.of(context)) {
+      case TextDirection.rtl:
+        paddingStart = widget.padding?.resolve(TextDirection.rtl).right ?? 0;
+        tabCenter = _tabStripWidth - tabCenter;
+        break;
+      case TextDirection.ltr:
+        paddingStart = widget.padding?.resolve(TextDirection.ltr).left ?? 0;
+        break;
+    }
+
+    return clampDouble(
+        tabCenter + paddingStart - viewportWidth / 2.0, minExtent, maxExtent);
+  }
+
+  double _tabCenteredScrollOffset(int index) {
+    final ScrollPosition position = _scrollController!.position;
+    return _tabScrollOffset(index, position.viewportDimension,
+        position.minScrollExtent, position.maxScrollExtent);
+  }
+
+  double _initialScrollOffset(
+      double viewportWidth, double minExtent, double maxExtent) {
+    return _tabScrollOffset(_currentIndex, viewportWidth, minExtent, maxExtent);
+  }
+
+  void _scrollToCurrentIndex() {
+    final double offset = _tabCenteredScrollOffset(_currentIndex);
+    _scrollController!
+        .animateTo(offset, duration: kTabScrollDuration, curve: Curves.ease);
+  }
+
+  void _scrollToControllerValue() {
+    final double? leadingPosition =
+        _currentIndex > 0 ? _tabCenteredScrollOffset(_currentIndex - 1) : null;
+    final double middlePosition = _tabCenteredScrollOffset(_currentIndex);
+    final double? trailingPosition = _currentIndex < maxTabIndex
+        ? _tabCenteredScrollOffset(_currentIndex + 1)
+        : null;
+
+    final double index = _controller!.index.toDouble();
+    final double value = _controller!.animation!.value;
+    final double offset;
+    if (value == index - 1.0) {
+      offset = leadingPosition ?? middlePosition;
+    } else if (value == index + 1.0) {
+      offset = trailingPosition ?? middlePosition;
+    } else if (value == index) {
+      offset = middlePosition;
+    } else if (value < index) {
+      offset = leadingPosition == null
+          ? middlePosition
+          : lerpDouble(middlePosition, leadingPosition, index - value)!;
+    } else {
+      offset = trailingPosition == null
+          ? middlePosition
+          : lerpDouble(middlePosition, trailingPosition, value - index)!;
+    }
+
+    _scrollController!.jumpTo(offset);
+  }
+
+  void _handleTabControllerAnimationTick() {
+    assert(mounted);
+    if (!_controller!.indexIsChanging && widget.isScrollable) {
+      // Sync the TabBar's scroll position with the TabBarView's PageView.
+      _currentIndex = _controller!.index;
+      _scrollToControllerValue();
+    }
+  }
+
+  void _handleTabControllerTick() {
+    if (_controller!.index != _currentIndex) {
+      _prevIndex = _currentIndex;
+      _currentIndex = _controller!.index;
+      _triggerAnimation();
+      if (widget.isScrollable) {
+        _scrollToCurrentIndex();
+      }
+    }
+    setState(() {
+      // Rebuild the tabs after a (potentially animated) index change
+      // has completed.
+    });
+  }
+
+  void _triggerAnimation() {
+    // reset the animation so it's ready to go
+    _animationController
+      ..reset()
+      ..forward();
+  }
+
+  // Called each time layout completes.
+  void _saveTabOffsets(
+      List<double> tabOffsets, TextDirection textDirection, double width) {
+    _tabStripWidth = width;
+    _indicatorPainter?.saveTabOffsets(tabOffsets, textDirection);
+  }
+
+  void _handleTap(int index) {
+    assert(index >= 0 && index < widget.tabs.length);
+    _controller?.animateTo(index);
+    widget.onTap?.call(index);
+  }
+
+  Widget _buildStyledTab(Widget child, int index) {
+    final TabBarTheme tabBarTheme = TabBarTheme.of(context);
+
+    final double animationValue;
+    if (index == _currentIndex) {
+      animationValue = _animationController.value;
+    } else if (index == _prevIndex) {
+      animationValue = 1 - _animationController.value;
+    } else {
+      animationValue = 0;
+    }
+
+    final TextStyle? textStyle = TextStyle.lerp(
+        (widget.unselectedLabelStyle ??
+                tabBarTheme.labelStyle ??
+                DefaultTextStyle.of(context).style)
+            .copyWith(
+          color: widget.unselectedLabelColor,
+        ),
+        (widget.labelStyle ??
+                tabBarTheme.labelStyle ??
+                DefaultTextStyle.of(context).style)
+            .copyWith(
+          color: widget.labelColor,
+        ),
+        animationValue);
+
+    final Color? textColor = Color.lerp(
+        widget.unselectedLabelColor, widget.labelColor, animationValue);
+
+    final Color? borderColor = Color.lerp(
+        widget.unselectedBorderColor, widget.borderColor, animationValue);
+
+    BoxDecoration? boxDecoration = BoxDecoration.lerp(
+        BoxDecoration(
+          color: widget.unselectedDecoration?.color ??
+              widget.unselectedBackgroundColor ??
+              Colors.transparent,
+          boxShadow: widget.unselectedDecoration?.boxShadow,
+          gradient: widget.unselectedDecoration?.gradient,
+          borderRadius: widget.useToggleButtonStyle
+              ? null
+              : BorderRadius.circular(widget.borderRadius),
+        ),
+        BoxDecoration(
+          color: widget.decoration?.color ??
+              widget.backgroundColor ??
+              Colors.transparent,
+          boxShadow: widget.decoration?.boxShadow,
+          gradient: widget.decoration?.gradient,
+          borderRadius: widget.useToggleButtonStyle
+              ? null
+              : BorderRadius.circular(widget.borderRadius),
+        ),
+        animationValue);
+
+    if (widget.useToggleButtonStyle &&
+        widget.borderWidth > 0 &&
+        boxDecoration != null) {
+      if (index == 0) {
+        boxDecoration = boxDecoration.copyWith(
+          border: Border(
+            right: BorderSide(
+              color: widget.unselectedBorderColor ?? Colors.transparent,
+              width: widget.borderWidth / 2,
+            ),
+          ),
+        );
+      } else if (index == widget.tabs.length - 1) {
+        boxDecoration = boxDecoration.copyWith(
+          border: Border(
+            left: BorderSide(
+              color: widget.unselectedBorderColor ?? Colors.transparent,
+              width: widget.borderWidth / 2,
+            ),
+          ),
+        );
+      } else {
+        boxDecoration = boxDecoration.copyWith(
+          border: Border.symmetric(
+            vertical: BorderSide(
+              color: widget.unselectedBorderColor ?? Colors.transparent,
+              width: widget.borderWidth / 2,
+            ),
+          ),
+        );
+      }
+    }
+
+    return Padding(
+      key: _tabKeys[index],
+      // padding for the buttons
+      padding:
+          widget.useToggleButtonStyle ? EdgeInsets.zero : widget.buttonMargin,
+      child: TextButton(
+        onPressed: () => _handleTap(index),
+        style: ButtonStyle(
+          elevation: MaterialStateProperty.all(
+              widget.useToggleButtonStyle ? 0 : widget.elevation),
+
+          /// give a pretty small minimum size
+          minimumSize: MaterialStateProperty.all(const Size(10, 10)),
+          padding: MaterialStateProperty.all(EdgeInsets.zero),
+          textStyle: MaterialStateProperty.all(textStyle),
+          foregroundColor: MaterialStateProperty.all(textColor),
+          tapTargetSize: MaterialTapTargetSize.shrinkWrap,
+          shape: MaterialStateProperty.all(
+            widget.useToggleButtonStyle
+                ? const RoundedRectangleBorder(
+                    side: BorderSide.none,
+                    borderRadius: BorderRadius.zero,
+                  )
+                : RoundedRectangleBorder(
+                    side: (widget.borderWidth == 0)
+                        ? BorderSide.none
+                        : BorderSide(
+                            color: borderColor ?? Colors.transparent,
+                            width: widget.borderWidth,
+                          ),
+                    borderRadius: BorderRadius.circular(widget.borderRadius),
+                  ),
+          ),
+        ),
+        child: Ink(
+          decoration: boxDecoration,
+          child: Container(
+            padding: widget.labelPadding,
+            alignment: Alignment.center,
+            child: child,
+          ),
+        ),
+      ),
+    );
+  }
+
+  bool _debugScheduleCheckHasValidTabsCount() {
+    if (_debugHasScheduledValidTabsCountCheck) {
+      return true;
+    }
+    WidgetsBinding.instance.addPostFrameCallback((Duration duration) {
+      _debugHasScheduledValidTabsCountCheck = false;
+      if (!mounted) {
+        return;
+      }
+      assert(() {
+        if (_controller!.length != widget.tabs.length) {
+          throw FlutterError(
+            "Controller's length property (${_controller!.length}) does not match the "
+            "number of tabs (${widget.tabs.length}) present in TabBar's tabs property.",
+          );
+        }
+        return true;
+      }());
+    });
+    _debugHasScheduledValidTabsCountCheck = true;
+    return true;
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    assert(_debugScheduleCheckHasValidTabsCount());
+
+    if (_controller!.length == 0) {
+      return Container(
+        height: _kTabHeight +
+            widget.labelPadding.vertical +
+            widget.buttonMargin.vertical,
+      );
+    }
+
+    final List<Widget> wrappedTabs =
+        List<Widget>.generate(widget.tabs.length, (int index) {
+      return _buildStyledTab(widget.tabs[index], index);
+    });
+
+    final int tabCount = widget.tabs.length;
+    // Add the tap handler to each tab. If the tab bar is not scrollable,
+    // then give all of the tabs equal flexibility so that they each occupy
+    // the same share of the tab bar's overall width.
+
+    for (int index = 0; index < tabCount; index += 1) {
+      if (!widget.isScrollable) {
+        wrappedTabs[index] = Expanded(child: wrappedTabs[index]);
+      }
+    }
+
+    Widget tabBar = AnimatedBuilder(
+      animation: _animationController,
+      key: _tabsParentKey,
+      builder: (context, child) {
+        Widget tabBarTemp = _TabLabelBar(
+          onPerformLayout: _saveTabOffsets,
+          children: wrappedTabs,
+        );
+
+        if (widget.useToggleButtonStyle) {
+          tabBarTemp = Material(
+            shape: widget.useToggleButtonStyle
+                ? RoundedRectangleBorder(
+                    side: (widget.borderWidth == 0)
+                        ? BorderSide.none
+                        : BorderSide(
+                            color: widget.borderColor ?? Colors.transparent,
+                            width: widget.borderWidth,
+                            style: BorderStyle.solid,
+                          ),
+                    borderRadius: BorderRadius.circular(widget.borderRadius),
+                  )
+                : null,
+            elevation: widget.useToggleButtonStyle ? widget.elevation : 0,
+            clipBehavior: Clip.antiAliasWithSaveLayer,
+            child: tabBarTemp,
+          );
+        }
+        return CustomPaint(
+          painter: _indicatorPainter,
+          child: tabBarTemp,
+        );
+      },
+    );
+
+    if (widget.isScrollable) {
+      _scrollController ??= _TabBarScrollController(this);
+      tabBar = SingleChildScrollView(
+        dragStartBehavior: widget.dragStartBehavior,
+        scrollDirection: Axis.horizontal,
+        controller: _scrollController,
+        padding: widget.padding,
+        physics: widget.physics,
+        child: tabBar,
+      );
+    } else if (widget.padding != null) {
+      tabBar = Padding(
+        padding: widget.padding!,
+        child: tabBar,
+      );
+    }
+
+    return tabBar;
+  }
+}
diff --git a/lib/flutter_flow/flutter_flow_util.dart b/lib/flutter_flow/flutter_flow_util.dart
index dddf82e..114e6c0 100644
--- a/lib/flutter_flow/flutter_flow_util.dart
+++ b/lib/flutter_flow/flutter_flow_util.dart
@@ -12,6 +12,7 @@ import '../main.dart';
 
 import 'lat_lng.dart';
 
+export 'keep_alive_wrapper.dart';
 export 'lat_lng.dart';
 export 'place.dart';
 export 'uploaded_file.dart';
@@ -21,16 +22,25 @@ export 'dart:typed_data' show Uint8List;
 export 'dart:convert' show jsonEncode, jsonDecode;
 export 'package:intl/intl.dart';
 export 'package:page_transition/page_transition.dart';
+export 'internationalization.dart' show FFLocalizations;
 export 'nav/nav.dart';
 
 T valueOrDefault<T>(T? value, T defaultValue) =>
     (value is String && value.isEmpty) || value == null ? defaultValue : value;
 
+void _setTimeagoLocales() {
+  timeago.setLocaleMessages('en', timeago.EnMessages());
+  timeago.setLocaleMessages('en_short', timeago.EnShortMessages());
+  timeago.setLocaleMessages('de', timeago.DeMessages());
+  timeago.setLocaleMessages('de_short', timeago.DeShortMessages());
+}
+
 String dateTimeFormat(String format, DateTime? dateTime, {String? locale}) {
   if (dateTime == null) {
     return '';
   }
   if (format == 'relative') {
+    _setTimeagoLocales();
     return timeago.format(dateTime, locale: locale, allowFromNow: true);
   }
   return DateFormat(format, locale).format(dateTime);
diff --git a/lib/flutter_flow/form_field_controller.dart b/lib/flutter_flow/form_field_controller.dart
new file mode 100644
index 0000000..99b4ecb
--- /dev/null
+++ b/lib/flutter_flow/form_field_controller.dart
@@ -0,0 +1,9 @@
+import 'package:flutter/foundation.dart';
+
+class FormFieldController<T> extends ValueNotifier<T?> {
+  FormFieldController(this.initialValue) : super(initialValue);
+
+  final T? initialValue;
+
+  void reset() => value = initialValue;
+}
diff --git a/lib/flutter_flow/internationalization.dart b/lib/flutter_flow/internationalization.dart
index f9ea258..321b993 100644
--- a/lib/flutter_flow/internationalization.dart
+++ b/lib/flutter_flow/internationalization.dart
@@ -12,7 +12,7 @@ class FFLocalizations {
   static FFLocalizations of(BuildContext context) =>
       Localizations.of<FFLocalizations>(context, FFLocalizations)!;
 
-  static List<String> languages() => ['en'];
+  static List<String> languages() => ['en', 'de'];
 
   static late SharedPreferences _prefs;
   static Future initialize() async =>
@@ -38,8 +38,9 @@ class FFLocalizations {
 
   String getVariableText({
     String? enText = '',
+    String? deText = '',
   }) =>
-      [enText][languageIndex] ?? '';
+      [enText, deText][languageIndex] ?? '';
 
   static const Set<String> _languagesWithShortCode = {
     'ar',
@@ -103,5 +104,490 @@ Locale createLocale(String language) => language.contains('_')
       )
     : Locale(language);
 
-final kTranslationsMap =
-    <Map<String, Map<String, String>>>[].reduce((a, b) => a..addAll(b));
+final kTranslationsMap = <Map<String, Map<String, String>>>[
+  // HomePage
+  {
+    'kmtxfw8n': {
+      'en': 'Ada',
+      'de': '',
+    },
+    'g1c1njeh': {
+      'en': 'pacemaker Data Repository',
+      'de': '',
+    },
+    'z33syfmw': {
+      'en': 'Hypatia',
+      'de': '',
+    },
+    'wu0zrts5': {
+      'en': 'Event Hub',
+      'de': '',
+    },
+    'ts92epfq': {
+      'en': 'Home',
+      'de': '',
+    },
+  },
+  // Dashboard
+  {
+    'sz1x8ixi': {
+      'en': 'admin@pacemaker.ai',
+      'de': '',
+    },
+    'hf3ioiuz': {
+      'en': 'Home',
+      'de': '',
+    },
+  },
+  // Category
+  {
+    'y7rw6tn4': {
+      'en': 'admin@pacemaker.ai',
+      'de': '',
+    },
+    'gw7tj0s4': {
+      'en': 'Home',
+      'de': '',
+    },
+  },
+  // subCategory
+  {
+    'tefcrq5d': {
+      'en': 'admin@pacemaker.ai',
+      'de': '',
+    },
+    'axq6dpnj': {
+      'en': 'Home',
+      'de': '',
+    },
+  },
+  // singleSub
+  {
+    'f62hqwqs': {
+      'en': 'admin@pacemaker.ai',
+      'de': '',
+    },
+    'bnvb06wn': {
+      'en': 'Product Name',
+      'de': '',
+    },
+    'pv0r6ci9': {
+      'en': 'Data Type',
+      'de': '',
+    },
+    'jw8be9ba': {
+      'en': 'Source/Origin',
+      'de': '',
+    },
+    'zq233egm': {
+      'en': 'Number of Entries',
+      'de': '',
+    },
+    '91e0ikwr': {
+      'en': 'Last Update',
+      'de': '',
+    },
+    'eawe34wj': {
+      'en': 'Status',
+      'de': '',
+    },
+    'yu2x6eyf': {
+      'en': 'WTI Oil',
+      'de': '',
+    },
+    'q2p6to9y': {
+      'en': 'Finance',
+      'de': '',
+    },
+    'qp848f9z': {
+      'en': 'alphavantage',
+      'de': '',
+    },
+    'd69zmqx7': {
+      'en': '42',
+      'de': '',
+    },
+    'zyaxgcwi': {
+      'en': '17.08.2023',
+      'de': '',
+    },
+    'u7hfg3wq': {
+      'en': 'Updated',
+      'de': '',
+    },
+    'mxuoi1is': {
+      'en': 'Brent Oil',
+      'de': '',
+    },
+    'iazhftxa': {
+      'en': 'Finance',
+      'de': '',
+    },
+    '88q0jodk': {
+      'en': 'alphavantage',
+      'de': '',
+    },
+    'vxrkaj0p': {
+      'en': '39',
+      'de': '',
+    },
+    'kgcnfq9r': {
+      'en': '17.08.2023',
+      'de': '',
+    },
+    'set7sa7e': {
+      'en': 'Updated',
+      'de': '',
+    },
+    'n69smgq4': {
+      'en': 'WTI Oil',
+      'de': '',
+    },
+    '5jx2y51j': {
+      'en': 'Finance',
+      'de': '',
+    },
+    'k2wh633l': {
+      'en': 'alphavantage',
+      'de': '',
+    },
+    'ga5xi6is': {
+      'en': '42',
+      'de': '',
+    },
+    'wwr0vqtm': {
+      'en': '17.08.2023',
+      'de': '',
+    },
+    '47xt083g': {
+      'en': 'Updated',
+      'de': '',
+    },
+    'l00fnsgv': {
+      'en': 'WTI Oil',
+      'de': '',
+    },
+    'cchf5cw8': {
+      'en': 'Finance',
+      'de': '',
+    },
+    'rfauslh7': {
+      'en': 'alphavantage',
+      'de': '',
+    },
+    'dz4d4gxb': {
+      'en': '42',
+      'de': '',
+    },
+    'du9jh0hg': {
+      'en': '17.08.2023',
+      'de': '',
+    },
+    'uh9f6hd5': {
+      'en': 'Updated',
+      'de': '',
+    },
+    '6msp9c6n': {
+      'en': 'WTI Oil',
+      'de': '',
+    },
+    'fhfottja': {
+      'en': 'Finance',
+      'de': '',
+    },
+    'logleoew': {
+      'en': 'alphavantage',
+      'de': '',
+    },
+    'us6dw4qd': {
+      'en': '42',
+      'de': '',
+    },
+    'an02z02t': {
+      'en': '17.08.2023',
+      'de': '',
+    },
+    'ou3hj173': {
+      'en': 'Updated',
+      'de': '',
+    },
+    '0h9i9t7d': {
+      'en': 'WTI Oil',
+      'de': '',
+    },
+    '24ds0t1k': {
+      'en': 'Finance',
+      'de': '',
+    },
+    'pp7xtzhn': {
+      'en': 'alphavantage',
+      'de': '',
+    },
+    'q0nwn91v': {
+      'en': '42',
+      'de': '',
+    },
+    '815gvw5j': {
+      'en': '17.08.2023',
+      'de': '',
+    },
+    'qqjx5epd': {
+      'en': 'Updated',
+      'de': '',
+    },
+    '0plfg5sq': {
+      'en': 'WTI Oil',
+      'de': '',
+    },
+    'du3gi9hp': {
+      'en': 'Finance',
+      'de': '',
+    },
+    'x2snfe1r': {
+      'en': 'alphavantage',
+      'de': '',
+    },
+    'l8ciwqxd': {
+      'en': '42',
+      'de': '',
+    },
+    '00y7i2ne': {
+      'en': '17.08.2023',
+      'de': '',
+    },
+    'w9edrnl1': {
+      'en': 'Updated',
+      'de': '',
+    },
+    'zuy0fxes': {
+      'en': 'Home',
+      'de': '',
+    },
+  },
+  // singleItem
+  {
+    'ejygfrmk': {
+      'en': 'admin@pacemaker.ai',
+      'de': '',
+    },
+    'mqxr4vsj': {
+      'en': 'WTI Oil',
+      'de': '',
+    },
+    'hz7yuyto': {
+      'en': 'DB Table:',
+      'de': '',
+    },
+    'koug62m3': {
+      'en': ' finance_commodities_wtioil',
+      'de': '',
+    },
+    'r2b2cx77': {
+      'en': 'Account Name:',
+      'de': '',
+    },
+    'qvp3j716': {
+      'en': ' adastorageaccount',
+      'de': '',
+    },
+    '7zy85926': {
+      'en': 'ENDPOINT:',
+      'de': '',
+    },
+    'y0pxcv58': {
+      'en': ' https//pacemakerdataplatform.table.cosmis.azure:443/',
+      'de': '',
+    },
+    'k2pa6utc': {
+      'en': 'PRIMARY KEY:',
+      'de': '',
+    },
+    'jrbk309k': {
+      'en': ' 8J388JJ1949DJKDL91019A1KFJ828NF8J9==',
+      'de': '',
+    },
+    'hl1p5r9m': {
+      'en': 'SECONDARY KEY:',
+      'de': '',
+    },
+    'k0eikjxr': {
+      'en': '  1NYMMTJ8AJJF74JDJ72NNC82LA91AKF0A ==',
+      'de': '',
+    },
+    'ttqo4cxp': {
+      'en': 'PRIMARY CONNECTION STRING:',
+      'de': '',
+    },
+    'ekzb2b8z': {
+      'en':
+          ' DefaultEndpointsProtocoll=https;AccountName=adastorageaccount;AccountKey=8J388JJ1949DJKDL91019A1KFJ828NF8J9==',
+      'de': '',
+    },
+    'q4xigyp6': {
+      'en': 'SECONDARY CONNECTION STRING:',
+      'de': '',
+    },
+    '3s7noixt': {
+      'en':
+          ' DefaultEndpointsProtocoll=https;AccountName=adastorageaccount;AccountKey=1NYMMTJ8AJJF74JDJ72NNC82LA91AKF0A==',
+      'de': '',
+    },
+    'puja4ek2': {
+      'en': 'Home',
+      'de': '',
+    },
+  },
+  // AuthenticateSolo1
+  {
+    'vymklxe7': {
+      'en': 'Login',
+      'de': '',
+    },
+    'xzjihr7v': {
+      'en': 'Email Address',
+      'de': '',
+    },
+    'cfco8cq6': {
+      'en': 'Password',
+      'de': '',
+    },
+    'tstxq2u0': {
+      'en': 'Password',
+      'de': '',
+    },
+    'j3zrsklq': {
+      'en': 'Save Credentials ',
+      'de': '',
+    },
+    'pdnqp7u9': {
+      'en': 'Login',
+      'de': '',
+    },
+    'bi1xolfq': {
+      'en': 'Forgot Password?',
+      'de': '',
+    },
+  },
+  // forgotPassword
+  {
+    'qzopzqgt': {
+      'en': 'Forgot Password',
+      'de': '',
+    },
+    'r4radlgi': {
+      'en': 'Enter your email address to reset your password.',
+      'de': '',
+    },
+    'ukvo0oc3': {
+      'en': 'Email Address',
+      'de': '',
+    },
+    'g71bp7tt': {
+      'en': 'Reset Password',
+      'de': '',
+    },
+    'lj4bhj7y': {
+      'en': 'Remember your password? ',
+      'de': '',
+    },
+    'djnu8kp5': {
+      'en': 'Sign In',
+      'de': '',
+    },
+  },
+  // Miscellaneous
+  {
+    '92bz9mis': {
+      'en': '',
+      'de': '',
+    },
+    'tbmph6cc': {
+      'en': '',
+      'de': '',
+    },
+    '67hl714l': {
+      'en': '',
+      'de': '',
+    },
+    'yg80e8ly': {
+      'en': '',
+      'de': '',
+    },
+    'kyhpznof': {
+      'en': '',
+      'de': '',
+    },
+    'hsu7xnzf': {
+      'en': '',
+      'de': '',
+    },
+    'ikwirmog': {
+      'en': '',
+      'de': '',
+    },
+    '2fqk46o9': {
+      'en': '',
+      'de': '',
+    },
+    'wouypgzq': {
+      'en': '',
+      'de': '',
+    },
+    'ayuzuyyt': {
+      'en': '',
+      'de': '',
+    },
+    'lljv2jci': {
+      'en': '',
+      'de': '',
+    },
+    'y7qopndj': {
+      'en': '',
+      'de': '',
+    },
+    '6i552bqj': {
+      'en': '',
+      'de': '',
+    },
+    '2wy3huc0': {
+      'en': '',
+      'de': '',
+    },
+    'qx51hulm': {
+      'en': '',
+      'de': '',
+    },
+    'mg8sqrzx': {
+      'en': '',
+      'de': '',
+    },
+    'elc5dx66': {
+      'en': '',
+      'de': '',
+    },
+    '0yppfgju': {
+      'en': '',
+      'de': '',
+    },
+    'pp59ln9o': {
+      'en': '',
+      'de': '',
+    },
+    'mac2wzvu': {
+      'en': '',
+      'de': '',
+    },
+    'a0t5q0ou': {
+      'en': '',
+      'de': '',
+    },
+    'n1gmzu3y': {
+      'en': '',
+      'de': '',
+    },
+    'nb61ezp6': {
+      'en': '',
+      'de': '',
+    },
+  },
+].reduce((a, b) => a..addAll(b));
diff --git a/lib/flutter_flow/keep_alive_wrapper.dart b/lib/flutter_flow/keep_alive_wrapper.dart
new file mode 100644
index 0000000..9b747f8
--- /dev/null
+++ b/lib/flutter_flow/keep_alive_wrapper.dart
@@ -0,0 +1,25 @@
+import 'package:flutter/material.dart';
+
+class KeepAliveWidgetWrapper extends StatefulWidget {
+  const KeepAliveWidgetWrapper({
+    Key? key,
+    required this.builder,
+  }) : super(key: key);
+
+  final WidgetBuilder builder;
+
+  @override
+  State<KeepAliveWidgetWrapper> createState() => _KeepAliveWidgetWrapperState();
+}
+
+class _KeepAliveWidgetWrapperState extends State<KeepAliveWidgetWrapper>
+    with AutomaticKeepAliveClientMixin {
+  @override
+  bool get wantKeepAlive => true;
+
+  @override
+  Widget build(BuildContext context) {
+    super.build(context);
+    return widget.builder(context);
+  }
+}
diff --git a/lib/flutter_flow/nav/nav.dart b/lib/flutter_flow/nav/nav.dart
index 0183ef5..13787f2 100644
--- a/lib/flutter_flow/nav/nav.dart
+++ b/lib/flutter_flow/nav/nav.dart
@@ -5,6 +5,8 @@ import 'package:flutter_spinkit/flutter_spinkit.dart';
 import 'package:go_router/go_router.dart';
 import 'package:page_transition/page_transition.dart';
 
+import '../../auth/base_auth_user_provider.dart';
+
 import '/index.dart';
 import '/main.dart';
 import '/flutter_flow/flutter_flow_theme.dart';
@@ -24,7 +26,46 @@ class AppStateNotifier extends ChangeNotifier {
   static AppStateNotifier? _instance;
   static AppStateNotifier get instance => _instance ??= AppStateNotifier._();
 
+  BaseAuthUser? initialUser;
+  BaseAuthUser? user;
   bool showSplashImage = true;
+  String? _redirectLocation;
+
+  /// Determines whether the app will refresh and build again when a sign
+  /// in or sign out happens. This is useful when the app is launched or
+  /// on an unexpected logout. However, this must be turned off when we
+  /// intend to sign in/out and then navigate or perform any actions after.
+  /// Otherwise, this will trigger a refresh and interrupt the action(s).
+  bool notifyOnAuthChange = true;
+
+  bool get loading => user == null || showSplashImage;
+  bool get loggedIn => user?.loggedIn ?? false;
+  bool get initiallyLoggedIn => initialUser?.loggedIn ?? false;
+  bool get shouldRedirect => loggedIn && _redirectLocation != null;
+
+  String getRedirectLocation() => _redirectLocation!;
+  bool hasRedirect() => _redirectLocation != null;
+  void setRedirectLocationIfUnset(String loc) => _redirectLocation ??= loc;
+  void clearRedirectLocation() => _redirectLocation = null;
+
+  /// Mark as not needing to notify on a sign in / out when we intend
+  /// to perform subsequent actions (such as navigation) afterwards.
+  void updateNotifyOnAuthChange(bool notify) => notifyOnAuthChange = notify;
+
+  void update(BaseAuthUser newUser) {
+    final shouldUpdate =
+        user?.uid == null || newUser.uid == null || user?.uid != newUser.uid;
+    initialUser ??= newUser;
+    user = newUser;
+    // Refresh the app on auth change unless explicitly marked otherwise.
+    // No need to update unless the user has changed.
+    if (notifyOnAuthChange && shouldUpdate) {
+      notifyListeners();
+    }
+    // Once again mark the notifier as needing to update on auth change
+    // (in order to catch sign in / out events).
+    updateNotifyOnAuthChange(true);
+  }
 
   void stopShowingSplashImage() {
     showSplashImage = false;
@@ -36,12 +77,16 @@ GoRouter createRouter(AppStateNotifier appStateNotifier) => GoRouter(
       initialLocation: '/',
       debugLogDiagnostics: true,
       refreshListenable: appStateNotifier,
-      errorBuilder: (context, state) => HomePageWidget(),
+      errorBuilder: (context, state) => appStateNotifier.loggedIn
+          ? DashboardWidget()
+          : AuthenticateSolo1Widget(),
       routes: [
         FFRoute(
           name: '_initialize',
           path: '/',
-          builder: (context, _) => HomePageWidget(),
+          builder: (context, _) => appStateNotifier.loggedIn
+              ? DashboardWidget()
+              : AuthenticateSolo1Widget(),
         ),
         FFRoute(
           name: 'HomePage',
@@ -72,6 +117,16 @@ GoRouter createRouter(AppStateNotifier appStateNotifier) => GoRouter(
           name: 'singleItem',
           path: '/singleItem',
           builder: (context, params) => SingleItemWidget(),
+        ),
+        FFRoute(
+          name: 'AuthenticateSolo1',
+          path: '/authenticateSolo1',
+          builder: (context, params) => AuthenticateSolo1Widget(),
+        ),
+        FFRoute(
+          name: 'forgotPassword',
+          path: '/forgotPassword',
+          builder: (context, params) => ForgotPasswordWidget(),
         )
       ].map((r) => r.toRoute(appStateNotifier)).toList(),
     );
@@ -85,6 +140,40 @@ extension NavParamExtensions on Map<String, String?> {
 }
 
 extension NavigationExtensions on BuildContext {
+  void goNamedAuth(
+    String name,
+    bool mounted, {
+    Map<String, String> pathParameters = const <String, String>{},
+    Map<String, String> queryParameters = const <String, String>{},
+    Object? extra,
+    bool ignoreRedirect = false,
+  }) =>
+      !mounted || GoRouter.of(this).shouldRedirect(ignoreRedirect)
+          ? null
+          : goNamed(
+              name,
+              pathParameters: pathParameters,
+              queryParameters: queryParameters,
+              extra: extra,
+            );
+
+  void pushNamedAuth(
+    String name,
+    bool mounted, {
+    Map<String, String> pathParameters = const <String, String>{},
+    Map<String, String> queryParameters = const <String, String>{},
+    Object? extra,
+    bool ignoreRedirect = false,
+  }) =>
+      !mounted || GoRouter.of(this).shouldRedirect(ignoreRedirect)
+          ? null
+          : pushNamed(
+              name,
+              pathParameters: pathParameters,
+              queryParameters: queryParameters,
+              extra: extra,
+            );
+
   void safePop() {
     // If there is only one route on the stack, navigate to the initial
     // page instead of popping.
@@ -96,6 +185,19 @@ extension NavigationExtensions on BuildContext {
   }
 }
 
+extension GoRouterExtensions on GoRouter {
+  AppStateNotifier get appState => AppStateNotifier.instance;
+  void prepareAuthEvent([bool ignoreRedirect = false]) =>
+      appState.hasRedirect() && !ignoreRedirect
+          ? null
+          : appState.updateNotifyOnAuthChange(false);
+  bool shouldRedirect(bool ignoreRedirect) =>
+      !ignoreRedirect && appState.hasRedirect();
+  void clearRedirectLocation() => appState.clearRedirectLocation();
+  void setRedirectLocationIfUnset(String location) =>
+      appState.updateNotifyOnAuthChange(false);
+}
+
 extension _GoRouterStateExtensions on GoRouterState {
   Map<String, dynamic> get extraMap =>
       extra != null ? extra as Map<String, dynamic> : {};
@@ -184,6 +286,19 @@ class FFRoute {
   GoRoute toRoute(AppStateNotifier appStateNotifier) => GoRoute(
         name: name,
         path: path,
+        redirect: (context, state) {
+          if (appStateNotifier.shouldRedirect) {
+            final redirectLocation = appStateNotifier.getRedirectLocation();
+            appStateNotifier.clearRedirectLocation();
+            return redirectLocation;
+          }
+
+          if (requireAuth && !appStateNotifier.loggedIn) {
+            appStateNotifier.setRedirectLocationIfUnset(state.location);
+            return '/authenticateSolo1';
+          }
+          return null;
+        },
         pageBuilder: (context, state) {
           final ffParams = FFParameters(state, asyncParams);
           final page = ffParams.hasFutures
@@ -192,7 +307,18 @@ class FFRoute {
                   builder: (context, _) => builder(context, ffParams),
                 )
               : builder(context, ffParams);
-          final child = page;
+          final child = appStateNotifier.loading
+              ? Center(
+                  child: SizedBox(
+                    width: 50.0,
+                    height: 50.0,
+                    child: SpinKitFoldingCube(
+                      color: FlutterFlowTheme.of(context).primary,
+                      size: 50.0,
+                    ),
+                  ),
+                )
+              : page;
 
           final transitionInfo = state.transitionInfo;
           return transitionInfo.hasTransition
diff --git a/lib/flutter_flow/uploaded_file.dart b/lib/flutter_flow/uploaded_file.dart
index 221dfed..2dfd2ff 100644
--- a/lib/flutter_flow/uploaded_file.dart
+++ b/lib/flutter_flow/uploaded_file.dart
@@ -41,7 +41,7 @@ class FFUploadedFile {
     };
     return FFUploadedFile(
       name: data['name'] as String,
-      bytes: data['bytes'] as Uint8List,
+      bytes: Uint8List.fromList(data['bytes'].cast<int>().toList()),
       height: data['height'] as double?,
       width: data['width'] as double?,
       blurHash: data['blurHash'] as String?,
diff --git a/lib/forgot_password/forgot_password_model.dart b/lib/forgot_password/forgot_password_model.dart
new file mode 100644
index 0000000..b79221a
--- /dev/null
+++ b/lib/forgot_password/forgot_password_model.dart
@@ -0,0 +1,30 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter_spinkit/flutter_spinkit.dart';
+import 'package:flutter_svg/flutter_svg.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class ForgotPasswordModel extends FlutterFlowModel {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  // State field(s) for TextField widget.
+  TextEditingController? textController;
+  String? Function(BuildContext, String?)? textControllerValidator;
+
+  /// Initialization and disposal methods.
+
+  void initState(BuildContext context) {}
+
+  void dispose() {
+    unfocusNode.dispose();
+    textController?.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
diff --git a/lib/forgot_password/forgot_password_widget.dart b/lib/forgot_password/forgot_password_widget.dart
new file mode 100644
index 0000000..ba8ec2b
--- /dev/null
+++ b/lib/forgot_password/forgot_password_widget.dart
@@ -0,0 +1,279 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter_spinkit/flutter_spinkit.dart';
+import 'package:flutter_svg/flutter_svg.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'forgot_password_model.dart';
+export 'forgot_password_model.dart';
+
+class ForgotPasswordWidget extends StatefulWidget {
+  const ForgotPasswordWidget({Key? key}) : super(key: key);
+
+  @override
+  _ForgotPasswordWidgetState createState() => _ForgotPasswordWidgetState();
+}
+
+class _ForgotPasswordWidgetState extends State<ForgotPasswordWidget> {
+  late ForgotPasswordModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => ForgotPasswordModel());
+
+    _model.textController ??= TextEditingController();
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return GestureDetector(
+      onTap: () => FocusScope.of(context).requestFocus(_model.unfocusNode),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: Colors.white,
+        body: SafeArea(
+          top: true,
+          child: Container(
+            width: MediaQuery.sizeOf(context).width * 1.0,
+            height: MediaQuery.sizeOf(context).height * 1.0,
+            decoration: BoxDecoration(
+              color: FlutterFlowTheme.of(context).secondaryBackground,
+              image: DecorationImage(
+                fit: BoxFit.cover,
+                image: Image.asset(
+                  'assets/images/MicrosoftTeams-image_(1).png',
+                ).image,
+              ),
+            ),
+            child: SingleChildScrollView(
+              child: Column(
+                mainAxisSize: MainAxisSize.max,
+                mainAxisAlignment: MainAxisAlignment.center,
+                children: [
+                  Container(
+                    width: double.infinity,
+                    height: 140.0,
+                    decoration: BoxDecoration(
+                      color: Colors.white,
+                      borderRadius: BorderRadius.only(
+                        bottomLeft: Radius.circular(16.0),
+                        bottomRight: Radius.circular(16.0),
+                        topLeft: Radius.circular(0.0),
+                        topRight: Radius.circular(0.0),
+                      ),
+                    ),
+                    alignment: AlignmentDirectional(-1.0, 0.0),
+                    child: ClipRRect(
+                      borderRadius: BorderRadius.circular(8.0),
+                      child: SvgPicture.asset(
+                        'assets/images/pacemaker_logo.svg',
+                        width: 300.0,
+                        height: 200.0,
+                        fit: BoxFit.cover,
+                      ),
+                    ),
+                  ),
+                  Align(
+                    alignment: AlignmentDirectional(0.0, 0.0),
+                    child: Padding(
+                      padding: EdgeInsetsDirectional.fromSTEB(
+                          32.0, 32.0, 32.0, 32.0),
+                      child: Column(
+                        mainAxisSize: MainAxisSize.max,
+                        crossAxisAlignment: CrossAxisAlignment.start,
+                        children: [
+                          Text(
+                            FFLocalizations.of(context).getText(
+                              'qzopzqgt' /* Forgot Password */,
+                            ),
+                            style: FlutterFlowTheme.of(context)
+                                .displaySmall
+                                .override(
+                                  fontFamily: 'Readex Pro',
+                                  color: Color(0xFF12151C),
+                                  fontSize: 32.0,
+                                  fontWeight: FontWeight.w600,
+                                ),
+                          ),
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                0.0, 12.0, 0.0, 24.0),
+                            child: Text(
+                              FFLocalizations.of(context).getText(
+                                'r4radlgi' /* Enter your email address to re... */,
+                              ),
+                              style: FlutterFlowTheme.of(context)
+                                  .labelMedium
+                                  .override(
+                                    fontFamily: 'Inter',
+                                    color: Color(0xFF5A5C60),
+                                    fontSize: 14.0,
+                                    fontWeight: FontWeight.w500,
+                                  ),
+                            ),
+                          ),
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                0.0, 0.0, 0.0, 16.0),
+                            child: TextFormField(
+                              controller: _model.textController,
+                              obscureText: false,
+                              decoration: InputDecoration(
+                                labelText: FFLocalizations.of(context).getText(
+                                  'ukvo0oc3' /* Email Address */,
+                                ),
+                                hintStyle: FlutterFlowTheme.of(context)
+                                    .bodyLarge
+                                    .override(
+                                      fontFamily: 'Inter',
+                                      color: Color(0xFF12151C),
+                                      fontSize: 16.0,
+                                      fontWeight: FontWeight.normal,
+                                    ),
+                                enabledBorder: OutlineInputBorder(
+                                  borderSide: BorderSide(
+                                    color: Color(0xFFE0E3E7),
+                                    width: 2.0,
+                                  ),
+                                  borderRadius: BorderRadius.circular(12.0),
+                                ),
+                                focusedBorder: OutlineInputBorder(
+                                  borderSide: BorderSide(
+                                    color: Color(0x00000000),
+                                    width: 2.0,
+                                  ),
+                                  borderRadius: BorderRadius.circular(12.0),
+                                ),
+                                errorBorder: OutlineInputBorder(
+                                  borderSide: BorderSide(
+                                    color: Color(0x00000000),
+                                    width: 2.0,
+                                  ),
+                                  borderRadius: BorderRadius.circular(12.0),
+                                ),
+                                focusedErrorBorder: OutlineInputBorder(
+                                  borderSide: BorderSide(
+                                    color: Color(0x00000000),
+                                    width: 2.0,
+                                  ),
+                                  borderRadius: BorderRadius.circular(12.0),
+                                ),
+                              ),
+                              style: FlutterFlowTheme.of(context)
+                                  .bodyMedium
+                                  .override(
+                                    fontFamily: 'Inter',
+                                    color: Color(0xFF12151C),
+                                    fontSize: 14.0,
+                                    fontWeight: FontWeight.normal,
+                                  ),
+                              validator: _model.textControllerValidator
+                                  .asValidator(context),
+                            ),
+                          ),
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                0.0, 0.0, 0.0, 16.0),
+                            child: FFButtonWidget(
+                              onPressed: () {
+                                print('Button pressed ...');
+                              },
+                              text: FFLocalizations.of(context).getText(
+                                'g71bp7tt' /* Reset Password */,
+                              ),
+                              options: FFButtonOptions(
+                                width: 370.0,
+                                height: 44.0,
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    0.0, 0.0, 0.0, 0.0),
+                                iconPadding: EdgeInsetsDirectional.fromSTEB(
+                                    0.0, 0.0, 0.0, 0.0),
+                                color: Color(0xFF105DFB),
+                                textStyle: FlutterFlowTheme.of(context)
+                                    .titleSmall
+                                    .override(
+                                      fontFamily: 'Inter',
+                                      color: Colors.white,
+                                      fontSize: 16.0,
+                                      fontWeight: FontWeight.w500,
+                                    ),
+                                elevation: 3.0,
+                                borderRadius: BorderRadius.circular(12.0),
+                              ),
+                            ),
+                          ),
+                          Row(
+                            mainAxisSize: MainAxisSize.max,
+                            mainAxisAlignment: MainAxisAlignment.center,
+                            children: [
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    0.0, 4.0, 0.0, 4.0),
+                                child: Text(
+                                  FFLocalizations.of(context).getText(
+                                    'lj4bhj7y' /* Remember your password?  */,
+                                  ),
+                                  style: FlutterFlowTheme.of(context)
+                                      .bodyMedium
+                                      .override(
+                                        fontFamily: 'Inter',
+                                        color: Color(0xFF12151C),
+                                        fontSize: 14.0,
+                                        fontWeight: FontWeight.normal,
+                                      ),
+                                ),
+                              ),
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    4.0, 4.0, 0.0, 4.0),
+                                child: InkWell(
+                                  splashColor: Colors.transparent,
+                                  focusColor: Colors.transparent,
+                                  hoverColor: Colors.transparent,
+                                  highlightColor: Colors.transparent,
+                                  onTap: () async {
+                                    context.pushNamed('AuthenticateSolo1');
+                                  },
+                                  child: Text(
+                                    FFLocalizations.of(context).getText(
+                                      'djnu8kp5' /* Sign In */,
+                                    ),
+                                    style: FlutterFlowTheme.of(context)
+                                        .bodyMedium
+                                        .override(
+                                          fontFamily: 'Inter',
+                                          color: Color(0xFF105DFB),
+                                          fontSize: 14.0,
+                                          fontWeight: FontWeight.normal,
+                                        ),
+                                  ),
+                                ),
+                              ),
+                            ],
+                          ),
+                        ],
+                      ),
+                    ),
+                  ),
+                ],
+              ),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
diff --git a/lib/index.dart b/lib/index.dart
index f27787e..e66917c 100644
--- a/lib/index.dart
+++ b/lib/index.dart
@@ -5,3 +5,6 @@ export '/pages/category/category_widget.dart' show CategoryWidget;
 export '/pages/sub_category/sub_category_widget.dart' show SubCategoryWidget;
 export '/pages/single_sub/single_sub_widget.dart' show SingleSubWidget;
 export '/pages/single_item/single_item_widget.dart' show SingleItemWidget;
+export '/authenticate_solo1/authenticate_solo1_widget.dart'
+    show AuthenticateSolo1Widget;
+export '/forgot_password/forgot_password_widget.dart' show ForgotPasswordWidget;
diff --git a/lib/main.dart b/lib/main.dart
index 0bf0420..9adb63c 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -3,6 +3,11 @@ import 'package:flutter/material.dart';
 
 import 'package:flutter_localizations/flutter_localizations.dart';
 import 'package:flutter_web_plugins/url_strategy.dart';
+import 'package:firebase_core/firebase_core.dart';
+import 'auth/firebase_auth/firebase_user_provider.dart';
+import 'auth/firebase_auth/auth_util.dart';
+
+import 'backend/firebase/firebase_config.dart';
 import 'flutter_flow/flutter_flow_theme.dart';
 import 'flutter_flow/flutter_flow_util.dart';
 import 'flutter_flow/internationalization.dart';
@@ -13,6 +18,7 @@ import 'index.dart';
 void main() async {
   WidgetsFlutterBinding.ensureInitialized();
   usePathUrlStrategy();
+  await initFirebase();
 
   await FlutterFlowTheme.initialize();
 
@@ -32,6 +38,8 @@ class _MyAppState extends State<MyApp> {
   Locale? _locale;
   ThemeMode _themeMode = FlutterFlowTheme.themeMode;
 
+  late Stream<BaseAuthUser> userStream;
+
   late AppStateNotifier _appStateNotifier;
   late GoRouter _router;
 
@@ -40,6 +48,13 @@ class _MyAppState extends State<MyApp> {
     super.initState();
     _appStateNotifier = AppStateNotifier.instance;
     _router = createRouter(_appStateNotifier);
+    userStream = pacemakerDataPlatformFirebaseUserStream()
+      ..listen((user) => _appStateNotifier.update(user));
+    jwtTokenStream.listen((_) {});
+    Future.delayed(
+      Duration(milliseconds: 1000),
+      () => _appStateNotifier.stopShowingSplashImage(),
+    );
   }
 
   void setLocale(String language) {
@@ -62,9 +77,18 @@ class _MyAppState extends State<MyApp> {
         GlobalCupertinoLocalizations.delegate,
       ],
       locale: _locale,
-      supportedLocales: const [Locale('en', '')],
-      theme: ThemeData(brightness: Brightness.light),
-      darkTheme: ThemeData(brightness: Brightness.dark),
+      supportedLocales: const [
+        Locale('en'),
+        Locale('de'),
+      ],
+      theme: ThemeData(
+        brightness: Brightness.light,
+        scrollbarTheme: ScrollbarThemeData(),
+      ),
+      darkTheme: ThemeData(
+        brightness: Brightness.dark,
+        scrollbarTheme: ScrollbarThemeData(),
+      ),
       themeMode: _themeMode,
       routerConfig: _router,
     );
diff --git a/lib/pages/.DS_Store b/lib/pages/.DS_Store
new file mode 100644
index 0000000..dad8e9b
Binary files /dev/null and b/lib/pages/.DS_Store differ
diff --git a/lib/pages/category/category_widget.dart b/lib/pages/category/category_widget.dart
index d51324f..9594056 100644
--- a/lib/pages/category/category_widget.dart
+++ b/lib/pages/category/category_widget.dart
@@ -26,6 +26,8 @@ class _CategoryWidgetState extends State<CategoryWidget> {
   void initState() {
     super.initState();
     _model = createModel(context, () => CategoryModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
   }
 
   @override
@@ -48,8 +50,8 @@ class _CategoryWidgetState extends State<CategoryWidget> {
             mainAxisSize: MainAxisSize.max,
             children: [
               Container(
-                width: double.infinity,
-                height: 125.0,
+                width: MediaQuery.sizeOf(context).width * 1.0,
+                height: MediaQuery.sizeOf(context).height * 0.15,
                 decoration: BoxDecoration(
                   color: FlutterFlowTheme.of(context).secondaryBackground,
                   border: Border.all(
@@ -87,7 +89,9 @@ class _CategoryWidgetState extends State<CategoryWidget> {
                               padding: EdgeInsetsDirectional.fromSTEB(
                                   0.0, 0.0, 0.0, 25.0),
                               child: Text(
-                                'admin@pacemaker.ai',
+                                FFLocalizations.of(context).getText(
+                                  'y7rw6tn4' /* admin@pacemaker.ai */,
+                                ),
                                 style: FlutterFlowTheme.of(context)
                                     .bodyMedium
                                     .override(
@@ -143,8 +147,8 @@ class _CategoryWidgetState extends State<CategoryWidget> {
                 ),
               ),
               Container(
-                width: double.infinity,
-                height: MediaQuery.sizeOf(context).height * 0.9,
+                width: MediaQuery.sizeOf(context).width * 1.0,
+                height: MediaQuery.sizeOf(context).height * 0.85,
                 decoration: BoxDecoration(
                   color: FlutterFlowTheme.of(context).secondaryBackground,
                 ),
@@ -154,8 +158,8 @@ class _CategoryWidgetState extends State<CategoryWidget> {
                     Align(
                       alignment: AlignmentDirectional(0.0, 0.0),
                       child: Container(
-                        width: 250.0,
-                        height: MediaQuery.sizeOf(context).height * 0.9,
+                        width: MediaQuery.sizeOf(context).width * 0.15,
+                        height: MediaQuery.sizeOf(context).height * 0.85,
                         decoration: BoxDecoration(
                           color:
                               FlutterFlowTheme.of(context).secondaryBackground,
@@ -166,457 +170,240 @@ class _CategoryWidgetState extends State<CategoryWidget> {
                       ),
                     ),
                     Container(
-                      width: MediaQuery.sizeOf(context).width * 0.9,
-                      height: MediaQuery.sizeOf(context).height * 0.95,
+                      width: MediaQuery.sizeOf(context).width * 0.85,
+                      height: MediaQuery.sizeOf(context).height * 0.85,
                       decoration: BoxDecoration(
                         color: FlutterFlowTheme.of(context).lineColor,
                       ),
-                      child: SingleChildScrollView(
-                        child: Column(
-                          mainAxisSize: MainAxisSize.min,
-                          mainAxisAlignment: MainAxisAlignment.spaceAround,
-                          crossAxisAlignment: CrossAxisAlignment.center,
-                          children: [
-                            Padding(
-                              padding: EdgeInsetsDirectional.fromSTEB(
-                                  0.0, 25.0, 55.0, 0.0),
-                              child: Container(
-                                width: MediaQuery.sizeOf(context).width * 0.95,
+                      child: Column(
+                        mainAxisSize: MainAxisSize.max,
+                        mainAxisAlignment: MainAxisAlignment.spaceAround,
+                        children: [
+                          Row(
+                            mainAxisSize: MainAxisSize.max,
+                            mainAxisAlignment: MainAxisAlignment.spaceAround,
+                            children: [
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
                                 height:
-                                    MediaQuery.sizeOf(context).height * 0.95,
-                                constraints: BoxConstraints(
-                                  minWidth:
-                                      MediaQuery.sizeOf(context).width * 0.8,
-                                  minHeight:
-                                      MediaQuery.sizeOf(context).height * 0.8,
-                                  maxWidth:
-                                      MediaQuery.sizeOf(context).width * 0.85,
-                                  maxHeight:
-                                      MediaQuery.sizeOf(context).height * 0.85,
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
                                 ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
                                 decoration: BoxDecoration(
                                   color: FlutterFlowTheme.of(context)
-                                      .primaryBtnText,
+                                      .secondaryBackground,
                                   borderRadius: BorderRadius.circular(20.0),
                                 ),
-                                child: GridView(
-                                  padding: EdgeInsets.zero,
-                                  gridDelegate:
-                                      SliverGridDelegateWithFixedCrossAxisCount(
-                                    crossAxisCount: 4,
-                                    crossAxisSpacing: 10.0,
-                                    mainAxisSpacing: 5.0,
-                                    childAspectRatio: 0.8,
-                                  ),
-                                  primary: false,
-                                  shrinkWrap: true,
-                                  scrollDirection: Axis.horizontal,
-                                  children: [
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context).info,
-                                      elevation: 2.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/500/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/391/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/80/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/391/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/542/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/523/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/818/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/203/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/214/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/152/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/52/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/494/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/190/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/991/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/679/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/58/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/199/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/166/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/207/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                    Card(
-                                      clipBehavior: Clip.antiAliasWithSaveLayer,
-                                      color: FlutterFlowTheme.of(context)
-                                          .secondaryBackground,
-                                      elevation: 4.0,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                      ),
-                                      child: ClipRRect(
-                                        borderRadius:
-                                            BorderRadius.circular(8.0),
-                                        child: Image.network(
-                                          'https://picsum.photos/seed/497/600',
-                                          width: 300.0,
-                                          height: 200.0,
-                                          fit: BoxFit.cover,
-                                        ),
-                                      ),
-                                    ),
-                                  ],
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
                                 ),
                               ),
-                            ),
-                          ],
-                        ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                            ],
+                          ),
+                          Row(
+                            mainAxisSize: MainAxisSize.max,
+                            mainAxisAlignment: MainAxisAlignment.spaceAround,
+                            children: [
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                            ],
+                          ),
+                          Row(
+                            mainAxisSize: MainAxisSize.max,
+                            mainAxisAlignment: MainAxisAlignment.spaceAround,
+                            children: [
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                            ],
+                          ),
+                          Row(
+                            mainAxisSize: MainAxisSize.max,
+                            mainAxisAlignment: MainAxisAlignment.spaceAround,
+                            children: [
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.15,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.15,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                            ],
+                          ),
+                        ],
                       ),
                     ),
                   ],
diff --git a/lib/pages/dashboard/dashboard_model.dart b/lib/pages/dashboard/dashboard_model.dart
index 295a6b5..ce6b99e 100644
--- a/lib/pages/dashboard/dashboard_model.dart
+++ b/lib/pages/dashboard/dashboard_model.dart
@@ -12,6 +12,8 @@ class DashboardModel extends FlutterFlowModel {
   ///  State fields for stateful widgets in this page.
 
   final unfocusNode = FocusNode();
+  // State field(s) for Switch widget.
+  bool? switchValue;
 
   /// Initialization and disposal methods.
 
diff --git a/lib/pages/dashboard/dashboard_widget.dart b/lib/pages/dashboard/dashboard_widget.dart
index 6979821..fd79b92 100644
--- a/lib/pages/dashboard/dashboard_widget.dart
+++ b/lib/pages/dashboard/dashboard_widget.dart
@@ -26,6 +26,8 @@ class _DashboardWidgetState extends State<DashboardWidget> {
   void initState() {
     super.initState();
     _model = createModel(context, () => DashboardModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
   }
 
   @override
@@ -49,7 +51,7 @@ class _DashboardWidgetState extends State<DashboardWidget> {
             children: [
               Container(
                 width: double.infinity,
-                height: 125.0,
+                height: MediaQuery.sizeOf(context).height * 0.15,
                 decoration: BoxDecoration(
                   color: FlutterFlowTheme.of(context).secondaryBackground,
                   border: Border.all(
@@ -61,7 +63,7 @@ class _DashboardWidgetState extends State<DashboardWidget> {
                   mainAxisAlignment: MainAxisAlignment.spaceBetween,
                   children: [
                     Container(
-                      width: 300.0,
+                      width: MediaQuery.sizeOf(context).width * 0.15,
                       height: 125.0,
                       decoration: BoxDecoration(
                         color: FlutterFlowTheme.of(context).secondaryBackground,
@@ -87,7 +89,9 @@ class _DashboardWidgetState extends State<DashboardWidget> {
                               padding: EdgeInsetsDirectional.fromSTEB(
                                   0.0, 0.0, 0.0, 25.0),
                               child: Text(
-                                'admin@pacemaker.ai',
+                                FFLocalizations.of(context).getText(
+                                  'sz1x8ixi' /* admin@pacemaker.ai */,
+                                ),
                                 style: FlutterFlowTheme.of(context)
                                     .bodyMedium
                                     .override(
@@ -108,33 +112,55 @@ class _DashboardWidgetState extends State<DashboardWidget> {
                       ),
                       child: Row(
                         mainAxisSize: MainAxisSize.max,
-                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                         children: [
-                          FlutterFlowIconButton(
-                            borderColor: Colors.transparent,
-                            borderRadius: 30.0,
-                            borderWidth: 1.0,
-                            buttonSize: 60.0,
-                            icon: FaIcon(
-                              FontAwesomeIcons.bell,
-                              color: FlutterFlowTheme.of(context).primaryText,
-                              size: 30.0,
-                            ),
-                            onPressed: () {
-                              print('IconButton pressed ...');
-                            },
+                          Row(
+                            mainAxisSize: MainAxisSize.max,
+                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
+                            children: [
+                              FlutterFlowIconButton(
+                                borderColor: Colors.transparent,
+                                borderRadius: 30.0,
+                                borderWidth: 1.0,
+                                buttonSize: 60.0,
+                                icon: FaIcon(
+                                  FontAwesomeIcons.bell,
+                                  color:
+                                      FlutterFlowTheme.of(context).primaryText,
+                                  size: 30.0,
+                                ),
+                                onPressed: () {
+                                  print('IconButton pressed ...');
+                                },
+                              ),
+                              Container(
+                                width: 50.0,
+                                height: 50.0,
+                                clipBehavior: Clip.antiAlias,
+                                decoration: BoxDecoration(
+                                  shape: BoxShape.circle,
+                                ),
+                                child: Image.asset(
+                                  'assets/images/Ellipse_9.png',
+                                  fit: BoxFit.cover,
+                                ),
+                              ),
+                            ],
                           ),
-                          Container(
-                            width: 50.0,
-                            height: 50.0,
-                            clipBehavior: Clip.antiAlias,
-                            decoration: BoxDecoration(
-                              shape: BoxShape.circle,
-                            ),
-                            child: Image.asset(
-                              'assets/images/Ellipse_9.png',
-                              fit: BoxFit.cover,
-                            ),
+                          Switch.adaptive(
+                            value: _model.switchValue ??= true,
+                            onChanged: (newValue) async {
+                              setState(() => _model.switchValue = newValue!);
+                              if (newValue!) {
+                                setDarkModeSetting(context, ThemeMode.light);
+                              }
+                            },
+                            activeColor: FlutterFlowTheme.of(context).primary,
+                            activeTrackColor:
+                                FlutterFlowTheme.of(context).accent1,
+                            inactiveTrackColor:
+                                FlutterFlowTheme.of(context).alternate,
+                            inactiveThumbColor:
+                                FlutterFlowTheme.of(context).secondaryText,
                           ),
                         ],
                       ),
@@ -143,8 +169,8 @@ class _DashboardWidgetState extends State<DashboardWidget> {
                 ),
               ),
               Container(
-                width: double.infinity,
-                height: MediaQuery.sizeOf(context).height * 0.9,
+                width: MediaQuery.sizeOf(context).width * 1.0,
+                height: MediaQuery.sizeOf(context).height * 0.85,
                 decoration: BoxDecoration(
                   color: FlutterFlowTheme.of(context).secondaryBackground,
                 ),
@@ -154,8 +180,8 @@ class _DashboardWidgetState extends State<DashboardWidget> {
                     Align(
                       alignment: AlignmentDirectional(0.0, 0.0),
                       child: Container(
-                        width: 250.0,
-                        height: MediaQuery.sizeOf(context).height * 0.9,
+                        width: MediaQuery.sizeOf(context).width * 0.15,
+                        height: MediaQuery.sizeOf(context).height * 0.85,
                         decoration: BoxDecoration(
                           color:
                               FlutterFlowTheme.of(context).secondaryBackground,
@@ -166,82 +192,133 @@ class _DashboardWidgetState extends State<DashboardWidget> {
                       ),
                     ),
                     Container(
-                      width: 1450.0,
-                      height: MediaQuery.sizeOf(context).height * 0.9,
+                      width: MediaQuery.sizeOf(context).width * 0.85,
+                      height: MediaQuery.sizeOf(context).height * 0.85,
                       decoration: BoxDecoration(
                         color: FlutterFlowTheme.of(context).lineColor,
                       ),
                       child: Column(
                         mainAxisSize: MainAxisSize.max,
-                        mainAxisAlignment: MainAxisAlignment.center,
+                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                         children: [
-                          Align(
-                            alignment: AlignmentDirectional(0.0, 11.0),
-                            child: Row(
-                              mainAxisSize: MainAxisSize.max,
-                              mainAxisAlignment: MainAxisAlignment.spaceAround,
-                              crossAxisAlignment: CrossAxisAlignment.center,
-                              children: [
-                                Align(
-                                  alignment: AlignmentDirectional(0.0, 0.0),
-                                  child: Column(
-                                    mainAxisSize: MainAxisSize.min,
-                                    mainAxisAlignment:
-                                        MainAxisAlignment.spaceAround,
-                                    crossAxisAlignment:
-                                        CrossAxisAlignment.center,
-                                    children: [
-                                      Container(
-                                        width:
-                                            MediaQuery.sizeOf(context).width *
-                                                0.25,
-                                        height:
-                                            MediaQuery.sizeOf(context).height *
-                                                0.2,
-                                        decoration: BoxDecoration(
-                                          color: FlutterFlowTheme.of(context)
-                                              .secondaryBackground,
-                                          borderRadius:
-                                              BorderRadius.circular(20.0),
-                                        ),
-                                      ),
-                                      Container(
-                                        width:
-                                            MediaQuery.sizeOf(context).width *
-                                                0.25,
-                                        height:
-                                            MediaQuery.sizeOf(context).height *
-                                                0.2,
-                                        decoration: BoxDecoration(
-                                          color: FlutterFlowTheme.of(context)
-                                              .secondaryBackground,
-                                          borderRadius:
-                                              BorderRadius.circular(20.0),
-                                        ),
-                                      ),
-                                    ],
-                                  ),
+                          Row(
+                            mainAxisSize: MainAxisSize.max,
+                            mainAxisAlignment: MainAxisAlignment.spaceAround,
+                            children: [
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.52,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.17,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.26,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.17,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(29.0),
                                 ),
-                                Column(
+                              ),
+                            ],
+                          ),
+                          Row(
+                            mainAxisSize: MainAxisSize.max,
+                            mainAxisAlignment: MainAxisAlignment.spaceAround,
+                            children: [
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.52,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.36,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(20.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.26,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.36,
+                                decoration: BoxDecoration(
+                                  color: Color(0xFFE0E3E7),
+                                ),
+                                child: Column(
                                   mainAxisSize: MainAxisSize.max,
+                                  mainAxisAlignment:
+                                      MainAxisAlignment.spaceAround,
                                   children: [
                                     Container(
                                       width: MediaQuery.sizeOf(context).width *
-                                          0.35,
+                                          0.26,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.16,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .primaryBtnText,
+                                        borderRadius:
+                                            BorderRadius.circular(20.0),
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.26,
                                       height:
                                           MediaQuery.sizeOf(context).height *
-                                              0.75,
+                                              0.16,
                                       decoration: BoxDecoration(
                                         color: FlutterFlowTheme.of(context)
-                                            .secondaryBackground,
+                                            .primaryBtnText,
                                         borderRadius:
                                             BorderRadius.circular(20.0),
                                       ),
                                     ),
                                   ],
                                 ),
-                              ],
-                            ),
+                              ),
+                            ],
+                          ),
+                          Row(
+                            mainAxisSize: MainAxisSize.max,
+                            mainAxisAlignment: MainAxisAlignment.spaceAround,
+                            children: [
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.25,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.26,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(29.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.25,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.26,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(29.0),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.26,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.26,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(29.0),
+                                ),
+                              ),
+                            ],
                           ),
                         ],
                       ),
diff --git a/lib/pages/home_page/home_page_widget.dart b/lib/pages/home_page/home_page_widget.dart
index 0f792a6..d6f5e93 100644
--- a/lib/pages/home_page/home_page_widget.dart
+++ b/lib/pages/home_page/home_page_widget.dart
@@ -23,6 +23,8 @@ class _HomePageWidgetState extends State<HomePageWidget> {
   void initState() {
     super.initState();
     _model = createModel(context, () => HomePageModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
   }
 
   @override
@@ -88,7 +90,9 @@ class _HomePageWidgetState extends State<HomePageWidget> {
                               mainAxisAlignment: MainAxisAlignment.center,
                               children: [
                                 Text(
-                                  'Ada',
+                                  FFLocalizations.of(context).getText(
+                                    'kmtxfw8n' /* Ada */,
+                                  ),
                                   style: FlutterFlowTheme.of(context)
                                       .bodyMedium
                                       .override(
@@ -98,7 +102,9 @@ class _HomePageWidgetState extends State<HomePageWidget> {
                                       ),
                                 ),
                                 Text(
-                                  'pacemaker Data Repository',
+                                  FFLocalizations.of(context).getText(
+                                    'g1c1njeh' /* pacemaker Data Repository */,
+                                  ),
                                   style:
                                       FlutterFlowTheme.of(context).bodyMedium,
                                 ),
@@ -133,7 +139,9 @@ class _HomePageWidgetState extends State<HomePageWidget> {
                             mainAxisAlignment: MainAxisAlignment.center,
                             children: [
                               Text(
-                                'Hypatia',
+                                FFLocalizations.of(context).getText(
+                                  'z33syfmw' /* Hypatia */,
+                                ),
                                 style: FlutterFlowTheme.of(context)
                                     .bodyMedium
                                     .override(
@@ -143,7 +151,9 @@ class _HomePageWidgetState extends State<HomePageWidget> {
                                     ),
                               ),
                               Text(
-                                'Event Hub',
+                                FFLocalizations.of(context).getText(
+                                  'wu0zrts5' /* Event Hub */,
+                                ),
                                 style: FlutterFlowTheme.of(context).bodyMedium,
                               ),
                             ],
diff --git a/lib/pages/single_item/single_item_model.dart b/lib/pages/single_item/single_item_model.dart
index 4dc8fe0..a1f92ac 100644
--- a/lib/pages/single_item/single_item_model.dart
+++ b/lib/pages/single_item/single_item_model.dart
@@ -1,7 +1,6 @@
 import '/flutter_flow/flutter_flow_icon_button.dart';
 import '/flutter_flow/flutter_flow_theme.dart';
 import '/flutter_flow/flutter_flow_util.dart';
-import 'package:data_table_2/data_table_2.dart';
 import 'package:flutter/gestures.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_spinkit/flutter_spinkit.dart';
@@ -17,9 +16,7 @@ class SingleItemModel extends FlutterFlowModel {
 
   /// Initialization and disposal methods.
 
-  void initState(BuildContext context) {
-    dataTableShowLogs = false; // Disables noisy DataTable2 debug statements.
-  }
+  void initState(BuildContext context) {}
 
   void dispose() {
     unfocusNode.dispose();
diff --git a/lib/pages/single_item/single_item_widget.dart b/lib/pages/single_item/single_item_widget.dart
index 0443669..1e68c2e 100644
--- a/lib/pages/single_item/single_item_widget.dart
+++ b/lib/pages/single_item/single_item_widget.dart
@@ -1,7 +1,6 @@
 import '/flutter_flow/flutter_flow_icon_button.dart';
 import '/flutter_flow/flutter_flow_theme.dart';
 import '/flutter_flow/flutter_flow_util.dart';
-import 'package:data_table_2/data_table_2.dart';
 import 'package:flutter/gestures.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_spinkit/flutter_spinkit.dart';
@@ -28,6 +27,8 @@ class _SingleItemWidgetState extends State<SingleItemWidget> {
   void initState() {
     super.initState();
     _model = createModel(context, () => SingleItemModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
   }
 
   @override
@@ -50,8 +51,8 @@ class _SingleItemWidgetState extends State<SingleItemWidget> {
             mainAxisSize: MainAxisSize.max,
             children: [
               Container(
-                width: double.infinity,
-                height: 125.0,
+                width: MediaQuery.sizeOf(context).width * 1.0,
+                height: MediaQuery.sizeOf(context).height * 0.15,
                 decoration: BoxDecoration(
                   color: FlutterFlowTheme.of(context).secondaryBackground,
                   border: Border.all(
@@ -89,7 +90,9 @@ class _SingleItemWidgetState extends State<SingleItemWidget> {
                               padding: EdgeInsetsDirectional.fromSTEB(
                                   0.0, 0.0, 0.0, 25.0),
                               child: Text(
-                                'admin@pacemaker.ai',
+                                FFLocalizations.of(context).getText(
+                                  'ejygfrmk' /* admin@pacemaker.ai */,
+                                ),
                                 style: FlutterFlowTheme.of(context)
                                     .bodyMedium
                                     .override(
@@ -145,8 +148,8 @@ class _SingleItemWidgetState extends State<SingleItemWidget> {
                 ),
               ),
               Container(
-                width: double.infinity,
-                height: MediaQuery.sizeOf(context).height * 0.9,
+                width: MediaQuery.sizeOf(context).width * 1.0,
+                height: MediaQuery.sizeOf(context).height * 0.85,
                 decoration: BoxDecoration(
                   color: FlutterFlowTheme.of(context).secondaryBackground,
                 ),
@@ -156,8 +159,8 @@ class _SingleItemWidgetState extends State<SingleItemWidget> {
                     Align(
                       alignment: AlignmentDirectional(0.0, 0.0),
                       child: Container(
-                        width: 250.0,
-                        height: MediaQuery.sizeOf(context).height * 0.9,
+                        width: MediaQuery.sizeOf(context).width * 0.15,
+                        height: MediaQuery.sizeOf(context).height * 0.85,
                         decoration: BoxDecoration(
                           color:
                               FlutterFlowTheme.of(context).secondaryBackground,
@@ -168,399 +171,313 @@ class _SingleItemWidgetState extends State<SingleItemWidget> {
                       ),
                     ),
                     Container(
-                      width: MediaQuery.sizeOf(context).width * 0.9,
-                      height: MediaQuery.sizeOf(context).height * 0.95,
+                      width: MediaQuery.sizeOf(context).width * 0.85,
+                      height: MediaQuery.sizeOf(context).height * 0.85,
                       decoration: BoxDecoration(
                         color: FlutterFlowTheme.of(context).lineColor,
                       ),
                       child: SingleChildScrollView(
                         child: Column(
                           mainAxisSize: MainAxisSize.min,
-                          mainAxisAlignment: MainAxisAlignment.spaceAround,
+                          mainAxisAlignment: MainAxisAlignment.center,
                           crossAxisAlignment: CrossAxisAlignment.center,
                           children: [
                             Column(
                               mainAxisSize: MainAxisSize.max,
                               children: [
-                                Padding(
-                                  padding: EdgeInsetsDirectional.fromSTEB(
-                                      0.0, 25.0, 55.0, 0.0),
-                                  child: Container(
-                                    width:
-                                        MediaQuery.sizeOf(context).width * 0.08,
-                                    height: MediaQuery.sizeOf(context).height *
-                                        0.95,
-                                    constraints: BoxConstraints(
-                                      minWidth:
-                                          MediaQuery.sizeOf(context).width *
-                                              0.8,
-                                      minHeight:
-                                          MediaQuery.sizeOf(context).height *
-                                              0.8,
-                                      maxWidth:
-                                          MediaQuery.sizeOf(context).width *
-                                              0.85,
-                                      maxHeight:
-                                          MediaQuery.sizeOf(context).height *
-                                              0.85,
-                                    ),
-                                    decoration: BoxDecoration(
-                                      color: FlutterFlowTheme.of(context)
-                                          .primaryBtnText,
-                                      borderRadius: BorderRadius.circular(20.0),
-                                    ),
-                                    child: Column(
-                                      mainAxisSize: MainAxisSize.max,
-                                      children: [
-                                        Padding(
-                                          padding:
-                                              EdgeInsetsDirectional.fromSTEB(
-                                                  0.0, 20.0, 0.0, 0.0),
-                                          child: Text(
-                                            'WTI Oil',
-                                            style: FlutterFlowTheme.of(context)
-                                                .headlineLarge,
+                                Container(
+                                  width:
+                                      MediaQuery.sizeOf(context).width * 0.08,
+                                  height:
+                                      MediaQuery.sizeOf(context).height * 0.83,
+                                  constraints: BoxConstraints(
+                                    minWidth:
+                                        MediaQuery.sizeOf(context).width * 0.8,
+                                    minHeight:
+                                        MediaQuery.sizeOf(context).height * 0.8,
+                                    maxWidth:
+                                        MediaQuery.sizeOf(context).width * 0.85,
+                                    maxHeight:
+                                        MediaQuery.sizeOf(context).height *
+                                            0.85,
+                                  ),
+                                  decoration: BoxDecoration(
+                                    color: FlutterFlowTheme.of(context)
+                                        .primaryBtnText,
+                                    borderRadius: BorderRadius.circular(20.0),
+                                  ),
+                                  child: Column(
+                                    mainAxisSize: MainAxisSize.max,
+                                    mainAxisAlignment: MainAxisAlignment.start,
+                                    children: [
+                                      Padding(
+                                        padding: EdgeInsetsDirectional.fromSTEB(
+                                            0.0, 20.0, 0.0, 0.0),
+                                        child: Text(
+                                          FFLocalizations.of(context).getText(
+                                            'mqxr4vsj' /* WTI Oil */,
                                           ),
+                                          style: FlutterFlowTheme.of(context)
+                                              .headlineLarge,
                                         ),
-                                        Padding(
-                                          padding:
-                                              EdgeInsetsDirectional.fromSTEB(
-                                                  10.0, 0.0, 0.0, 0.0),
-                                          child: ListView(
-                                            padding: EdgeInsets.zero,
-                                            shrinkWrap: true,
-                                            scrollDirection: Axis.vertical,
-                                            children: [
-                                              RichText(
-                                                text: TextSpan(
-                                                  children: [
-                                                    TextSpan(
-                                                      text: 'DB Table:',
-                                                      style:
-                                                          FlutterFlowTheme.of(
-                                                                  context)
-                                                              .bodyMedium
-                                                              .override(
-                                                                fontFamily:
-                                                                    'Poppins',
-                                                                color: FlutterFlowTheme.of(
-                                                                        context)
-                                                                    .backgroundComponents,
-                                                                fontWeight:
-                                                                    FontWeight
-                                                                        .bold,
-                                                              ),
+                                      ),
+                                      Padding(
+                                        padding: EdgeInsetsDirectional.fromSTEB(
+                                            10.0, 0.0, 0.0, 0.0),
+                                        child: ListView(
+                                          padding: EdgeInsets.zero,
+                                          shrinkWrap: true,
+                                          scrollDirection: Axis.vertical,
+                                          children: [
+                                            RichText(
+                                              text: TextSpan(
+                                                children: [
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'hz7yuyto' /* DB Table: */,
                                                     ),
-                                                    TextSpan(
-                                                      text:
-                                                          ' finance_commodities_wtioil',
-                                                      style: TextStyle(),
-                                                    )
-                                                  ],
-                                                  style: FlutterFlowTheme.of(
-                                                          context)
-                                                      .bodyMedium,
-                                                ),
-                                              ),
-                                              RichText(
-                                                text: TextSpan(
-                                                  children: [
-                                                    TextSpan(
-                                                      text: 'Account Name:',
-                                                      style:
-                                                          FlutterFlowTheme.of(
-                                                                  context)
-                                                              .bodyMedium
-                                                              .override(
-                                                                fontFamily:
-                                                                    'Poppins',
-                                                                color: FlutterFlowTheme.of(
-                                                                        context)
-                                                                    .backgroundComponents,
-                                                                fontWeight:
-                                                                    FontWeight
-                                                                        .bold,
-                                                              ),
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .bodyMedium
+                                                        .override(
+                                                          fontFamily: 'Poppins',
+                                                          color: FlutterFlowTheme
+                                                                  .of(context)
+                                                              .backgroundComponents,
+                                                          fontWeight:
+                                                              FontWeight.bold,
+                                                        ),
+                                                  ),
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'koug62m3' /*  finance_commodities_wtioil */,
                                                     ),
-                                                    TextSpan(
-                                                      text:
-                                                          ' adastorageaccount',
-                                                      style: TextStyle(),
-                                                    )
-                                                  ],
-                                                  style: FlutterFlowTheme.of(
-                                                          context)
-                                                      .bodyMedium,
-                                                ),
+                                                    style: TextStyle(),
+                                                  )
+                                                ],
+                                                style:
+                                                    FlutterFlowTheme.of(context)
+                                                        .bodyMedium,
                                               ),
-                                              RichText(
-                                                text: TextSpan(
-                                                  children: [
-                                                    TextSpan(
-                                                      text: 'ENDPOINT:',
-                                                      style:
-                                                          FlutterFlowTheme.of(
-                                                                  context)
-                                                              .bodyMedium
-                                                              .override(
-                                                                fontFamily:
-                                                                    'Poppins',
-                                                                color: FlutterFlowTheme.of(
-                                                                        context)
-                                                                    .backgroundComponents,
-                                                                fontWeight:
-                                                                    FontWeight
-                                                                        .bold,
-                                                              ),
+                                            ),
+                                            RichText(
+                                              text: TextSpan(
+                                                children: [
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'r2b2cx77' /* Account Name: */,
                                                     ),
-                                                    TextSpan(
-                                                      text:
-                                                          ' https//pacemakerdataplatform.table.cosmis.azure:443/',
-                                                      style: TextStyle(),
-                                                    )
-                                                  ],
-                                                  style: FlutterFlowTheme.of(
-                                                          context)
-                                                      .bodyMedium,
-                                                ),
-                                              ),
-                                              RichText(
-                                                text: TextSpan(
-                                                  children: [
-                                                    TextSpan(
-                                                      text: 'PRIMARY KEY:',
-                                                      style:
-                                                          FlutterFlowTheme.of(
-                                                                  context)
-                                                              .bodyMedium
-                                                              .override(
-                                                                fontFamily:
-                                                                    'Poppins',
-                                                                color: FlutterFlowTheme.of(
-                                                                        context)
-                                                                    .backgroundComponents,
-                                                                fontWeight:
-                                                                    FontWeight
-                                                                        .bold,
-                                                              ),
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .bodyMedium
+                                                        .override(
+                                                          fontFamily: 'Poppins',
+                                                          color: FlutterFlowTheme
+                                                                  .of(context)
+                                                              .backgroundComponents,
+                                                          fontWeight:
+                                                              FontWeight.bold,
+                                                        ),
+                                                  ),
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'qvp3j716' /*  adastorageaccount */,
                                                     ),
-                                                    TextSpan(
-                                                      text:
-                                                          ' 8J388JJ1949DJKDL91019A1KFJ828NF8J9==',
-                                                      style: TextStyle(),
-                                                    )
-                                                  ],
-                                                  style: FlutterFlowTheme.of(
-                                                          context)
-                                                      .bodyMedium,
-                                                ),
+                                                    style: TextStyle(),
+                                                  )
+                                                ],
+                                                style:
+                                                    FlutterFlowTheme.of(context)
+                                                        .bodyMedium,
                                               ),
-                                              RichText(
-                                                text: TextSpan(
-                                                  children: [
-                                                    TextSpan(
-                                                      text: 'SECONDARY KEY:',
-                                                      style:
-                                                          FlutterFlowTheme.of(
-                                                                  context)
-                                                              .bodyMedium
-                                                              .override(
-                                                                fontFamily:
-                                                                    'Poppins',
-                                                                color: FlutterFlowTheme.of(
-                                                                        context)
-                                                                    .backgroundComponents,
-                                                                fontWeight:
-                                                                    FontWeight
-                                                                        .bold,
-                                                              ),
+                                            ),
+                                            RichText(
+                                              text: TextSpan(
+                                                children: [
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      '7zy85926' /* ENDPOINT: */,
                                                     ),
-                                                    TextSpan(
-                                                      text:
-                                                          '  1NYMMTJ8AJJF74JDJ72NNC82LA91AKF0A ==',
-                                                      style: TextStyle(),
-                                                    )
-                                                  ],
-                                                  style: FlutterFlowTheme.of(
-                                                          context)
-                                                      .bodyMedium,
-                                                ),
-                                              ),
-                                              RichText(
-                                                text: TextSpan(
-                                                  children: [
-                                                    TextSpan(
-                                                      text:
-                                                          'PRIMARY CONNECTION STRING:',
-                                                      style:
-                                                          FlutterFlowTheme.of(
-                                                                  context)
-                                                              .bodyMedium
-                                                              .override(
-                                                                fontFamily:
-                                                                    'Poppins',
-                                                                color: FlutterFlowTheme.of(
-                                                                        context)
-                                                                    .backgroundComponents,
-                                                                fontWeight:
-                                                                    FontWeight
-                                                                        .bold,
-                                                              ),
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .bodyMedium
+                                                        .override(
+                                                          fontFamily: 'Poppins',
+                                                          color: FlutterFlowTheme
+                                                                  .of(context)
+                                                              .backgroundComponents,
+                                                          fontWeight:
+                                                              FontWeight.bold,
+                                                        ),
+                                                  ),
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'y0pxcv58' /*  https//pacemakerdataplatform.... */,
                                                     ),
-                                                    TextSpan(
-                                                      text:
-                                                          ' DefaultEndpointsProtocoll=https;AccountName=adastorageaccount;AccountKey=8J388JJ1949DJKDL91019A1KFJ828NF8J9==',
-                                                      style: TextStyle(),
-                                                    )
-                                                  ],
-                                                  style: FlutterFlowTheme.of(
-                                                          context)
-                                                      .bodyMedium,
-                                                ),
+                                                    style: TextStyle(),
+                                                  )
+                                                ],
+                                                style:
+                                                    FlutterFlowTheme.of(context)
+                                                        .bodyMedium,
                                               ),
-                                              RichText(
-                                                text: TextSpan(
-                                                  children: [
-                                                    TextSpan(
-                                                      text:
-                                                          'SECONDARY CONNECTION STRING:',
-                                                      style:
-                                                          FlutterFlowTheme.of(
-                                                                  context)
-                                                              .bodyMedium
-                                                              .override(
-                                                                fontFamily:
-                                                                    'Poppins',
-                                                                color: FlutterFlowTheme.of(
-                                                                        context)
-                                                                    .backgroundComponents,
-                                                                fontWeight:
-                                                                    FontWeight
-                                                                        .bold,
-                                                              ),
+                                            ),
+                                            RichText(
+                                              text: TextSpan(
+                                                children: [
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'k2pa6utc' /* PRIMARY KEY: */,
+                                                    ),
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .bodyMedium
+                                                        .override(
+                                                          fontFamily: 'Poppins',
+                                                          color: FlutterFlowTheme
+                                                                  .of(context)
+                                                              .backgroundComponents,
+                                                          fontWeight:
+                                                              FontWeight.bold,
+                                                        ),
+                                                  ),
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'jrbk309k' /*  8J388JJ1949DJKDL91019A1KFJ828... */,
                                                     ),
-                                                    TextSpan(
-                                                      text:
-                                                          ' DefaultEndpointsProtocoll=https;AccountName=adastorageaccount;AccountKey=1NYMMTJ8AJJF74JDJ72NNC82LA91AKF0A==',
-                                                      style: TextStyle(),
-                                                    )
-                                                  ],
-                                                  style: FlutterFlowTheme.of(
-                                                          context)
-                                                      .bodyMedium,
-                                                ),
+                                                    style: TextStyle(),
+                                                  )
+                                                ],
+                                                style:
+                                                    FlutterFlowTheme.of(context)
+                                                        .bodyMedium,
                                               ),
-                                            ],
-                                          ),
-                                        ),
-                                        Expanded(
-                                          child: Padding(
-                                            padding:
-                                                EdgeInsetsDirectional.fromSTEB(
-                                                    10.0, 50.0, 0.0, 0.0),
-                                            child: DataTable2(
-                                              columns: [
-                                                DataColumn2(
-                                                  label: DefaultTextStyle.merge(
-                                                    softWrap: true,
-                                                    child: Text(
-                                                      'Feature / Column',
-                                                      style:
-                                                          FlutterFlowTheme.of(
-                                                                  context)
-                                                              .labelLarge,
+                                            ),
+                                            RichText(
+                                              text: TextSpan(
+                                                children: [
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'hl1p5r9m' /* SECONDARY KEY: */,
                                                     ),
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .bodyMedium
+                                                        .override(
+                                                          fontFamily: 'Poppins',
+                                                          color: FlutterFlowTheme
+                                                                  .of(context)
+                                                              .backgroundComponents,
+                                                          fontWeight:
+                                                              FontWeight.bold,
+                                                        ),
                                                   ),
-                                                ),
-                                                DataColumn2(
-                                                  label: DefaultTextStyle.merge(
-                                                    softWrap: true,
-                                                    child: Text(
-                                                      'Data type',
-                                                      style:
-                                                          FlutterFlowTheme.of(
-                                                                  context)
-                                                              .labelLarge,
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'k0eikjxr' /*   1NYMMTJ8AJJF74JDJ72NNC82LA91... */,
                                                     ),
-                                                  ),
-                                                ),
-                                                DataColumn2(
-                                                  label: DefaultTextStyle.merge(
-                                                    softWrap: true,
-                                                    child: Text(
-                                                      'Description',
-                                                      style:
-                                                          FlutterFlowTheme.of(
-                                                                  context)
-                                                              .labelLarge,
+                                                    style: TextStyle(),
+                                                  )
+                                                ],
+                                                style:
+                                                    FlutterFlowTheme.of(context)
+                                                        .bodyMedium,
+                                              ),
+                                            ),
+                                            RichText(
+                                              text: TextSpan(
+                                                children: [
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'ttqo4cxp' /* PRIMARY CONNECTION STRING: */,
                                                     ),
-                                                  ),
-                                                ),
-                                              ],
-                                              rows: dataTableRecordList
-                                                  .mapIndexed((dataTableIndex,
-                                                          dataTableRecord) =>
-                                                      [
-                                                        Text(
-                                                          'Date',
-                                                          style: FlutterFlowTheme
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .bodyMedium
+                                                        .override(
+                                                          fontFamily: 'Poppins',
+                                                          color: FlutterFlowTheme
                                                                   .of(context)
-                                                              .bodyMedium,
+                                                              .backgroundComponents,
+                                                          fontWeight:
+                                                              FontWeight.bold,
                                                         ),
-                                                        Text(
-                                                          'datetime',
-                                                          style: FlutterFlowTheme
+                                                  ),
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'ekzb2b8z' /*  DefaultEndpointsProtocoll=htt... */,
+                                                    ),
+                                                    style: TextStyle(),
+                                                  )
+                                                ],
+                                                style:
+                                                    FlutterFlowTheme.of(context)
+                                                        .bodyMedium,
+                                              ),
+                                            ),
+                                            RichText(
+                                              text: TextSpan(
+                                                children: [
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      'q4xigyp6' /* SECONDARY CONNECTION STRING: */,
+                                                    ),
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .bodyMedium
+                                                        .override(
+                                                          fontFamily: 'Poppins',
+                                                          color: FlutterFlowTheme
                                                                   .of(context)
-                                                              .bodyMedium,
-                                                        ),
-                                                        Column(
-                                                          mainAxisSize:
-                                                              MainAxisSize.max,
-                                                          children: [
-                                                            Text(
-                                                              'the datetime',
-                                                              style: FlutterFlowTheme
-                                                                      .of(context)
-                                                                  .bodyMedium,
-                                                            ),
-                                                            Text(
-                                                              'Hello World',
-                                                              style: FlutterFlowTheme
-                                                                      .of(context)
-                                                                  .bodyMedium,
-                                                            ),
-                                                          ],
+                                                              .backgroundComponents,
+                                                          fontWeight:
+                                                              FontWeight.bold,
                                                         ),
-                                                      ]
-                                                          .map((c) =>
-                                                              DataCell(c))
-                                                          .toList())
-                                                  .map((e) => DataRow(cells: e))
-                                                  .toList(),
-                                              headingRowColor:
-                                                  MaterialStateProperty.all(
-                                                FlutterFlowTheme.of(context)
-                                                    .primaryBackground,
-                                              ),
-                                              headingRowHeight: 56.0,
-                                              dataRowColor:
-                                                  MaterialStateProperty.all(
-                                                FlutterFlowTheme.of(context)
-                                                    .secondaryBackground,
-                                              ),
-                                              dataRowHeight: 56.0,
-                                              border: TableBorder(
-                                                borderRadius:
-                                                    BorderRadius.circular(0.0),
+                                                  ),
+                                                  TextSpan(
+                                                    text: FFLocalizations.of(
+                                                            context)
+                                                        .getText(
+                                                      '3s7noixt' /*  DefaultEndpointsProtocoll=htt... */,
+                                                    ),
+                                                    style: TextStyle(),
+                                                  )
+                                                ],
+                                                style:
+                                                    FlutterFlowTheme.of(context)
+                                                        .bodyMedium,
                                               ),
-                                              dividerThickness: 1.0,
-                                              showBottomBorder: true,
-                                              minWidth: 49.0,
                                             ),
-                                          ),
+                                          ],
                                         ),
-                                      ],
-                                    ),
+                                      ),
+                                    ],
                                   ),
                                 ),
                               ],
diff --git a/lib/pages/single_sub/single_sub_widget.dart b/lib/pages/single_sub/single_sub_widget.dart
index 0525244..be7aa49 100644
--- a/lib/pages/single_sub/single_sub_widget.dart
+++ b/lib/pages/single_sub/single_sub_widget.dart
@@ -27,6 +27,8 @@ class _SingleSubWidgetState extends State<SingleSubWidget> {
   void initState() {
     super.initState();
     _model = createModel(context, () => SingleSubModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
   }
 
   @override
@@ -49,8 +51,8 @@ class _SingleSubWidgetState extends State<SingleSubWidget> {
             mainAxisSize: MainAxisSize.max,
             children: [
               Container(
-                width: double.infinity,
-                height: 125.0,
+                width: MediaQuery.sizeOf(context).width * 1.0,
+                height: MediaQuery.sizeOf(context).height * 0.15,
                 decoration: BoxDecoration(
                   color: FlutterFlowTheme.of(context).secondaryBackground,
                   border: Border.all(
@@ -88,7 +90,9 @@ class _SingleSubWidgetState extends State<SingleSubWidget> {
                               padding: EdgeInsetsDirectional.fromSTEB(
                                   0.0, 0.0, 0.0, 25.0),
                               child: Text(
-                                'admin@pacemaker.ai',
+                                FFLocalizations.of(context).getText(
+                                  'f62hqwqs' /* admin@pacemaker.ai */,
+                                ),
                                 style: FlutterFlowTheme.of(context)
                                     .bodyMedium
                                     .override(
@@ -144,8 +148,8 @@ class _SingleSubWidgetState extends State<SingleSubWidget> {
                 ),
               ),
               Container(
-                width: double.infinity,
-                height: MediaQuery.sizeOf(context).height * 0.9,
+                width: MediaQuery.sizeOf(context).width * 1.0,
+                height: MediaQuery.sizeOf(context).height * 0.85,
                 decoration: BoxDecoration(
                   color: FlutterFlowTheme.of(context).secondaryBackground,
                 ),
@@ -155,8 +159,8 @@ class _SingleSubWidgetState extends State<SingleSubWidget> {
                     Align(
                       alignment: AlignmentDirectional(0.0, 0.0),
                       child: Container(
-                        width: 250.0,
-                        height: MediaQuery.sizeOf(context).height * 0.9,
+                        width: MediaQuery.sizeOf(context).width * 0.15,
+                        height: MediaQuery.sizeOf(context).height * 0.85,
                         decoration: BoxDecoration(
                           color:
                               FlutterFlowTheme.of(context).secondaryBackground,
@@ -167,38 +171,28 @@ class _SingleSubWidgetState extends State<SingleSubWidget> {
                       ),
                     ),
                     Container(
-                      width: MediaQuery.sizeOf(context).width * 0.9,
-                      height: MediaQuery.sizeOf(context).height * 0.95,
+                      width: MediaQuery.sizeOf(context).width * 0.85,
+                      height: MediaQuery.sizeOf(context).height * 0.85,
                       decoration: BoxDecoration(
                         color: FlutterFlowTheme.of(context).lineColor,
                       ),
-                      child: SingleChildScrollView(
-                        child: Column(
-                          mainAxisSize: MainAxisSize.min,
-                          mainAxisAlignment: MainAxisAlignment.spaceAround,
-                          crossAxisAlignment: CrossAxisAlignment.center,
-                          children: [
-                            Padding(
-                              padding: EdgeInsetsDirectional.fromSTEB(
-                                  0.0, 25.0, 55.0, 0.0),
-                              child: Container(
-                                width: MediaQuery.sizeOf(context).width * 0.08,
+                      child: Padding(
+                        padding: EdgeInsetsDirectional.fromSTEB(
+                            25.0, 50.0, 0.0, 0.0),
+                        child: SingleChildScrollView(
+                          child: Column(
+                            mainAxisSize: MainAxisSize.min,
+                            mainAxisAlignment: MainAxisAlignment.spaceAround,
+                            crossAxisAlignment: CrossAxisAlignment.start,
+                            children: [
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.8,
                                 height:
-                                    MediaQuery.sizeOf(context).height * 0.95,
-                                constraints: BoxConstraints(
-                                  minWidth:
-                                      MediaQuery.sizeOf(context).width * 0.8,
-                                  minHeight:
-                                      MediaQuery.sizeOf(context).height * 0.8,
-                                  maxWidth:
-                                      MediaQuery.sizeOf(context).width * 0.85,
-                                  maxHeight:
-                                      MediaQuery.sizeOf(context).height * 0.85,
-                                ),
+                                    MediaQuery.sizeOf(context).height * 0.04,
                                 decoration: BoxDecoration(
                                   color: FlutterFlowTheme.of(context)
-                                      .primaryBtnText,
-                                  borderRadius: BorderRadius.circular(20.0),
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(10.0),
                                 ),
                                 child: Row(
                                   mainAxisSize: MainAxisSize.max,
@@ -207,109 +201,1446 @@ class _SingleSubWidgetState extends State<SingleSubWidget> {
                                   children: [
                                     Container(
                                       width: MediaQuery.sizeOf(context).width *
-                                          0.35,
-                                      height:
-                                          MediaQuery.sizeOf(context).height *
-                                              0.85,
-                                      decoration: BoxDecoration(
-                                        color: FlutterFlowTheme.of(context)
-                                            .secondaryBackground,
-                                      ),
-                                      child: ListView(
-                                        padding: EdgeInsets.zero,
-                                        scrollDirection: Axis.vertical,
-                                        children: [
-                                          Padding(
-                                            padding:
-                                                EdgeInsetsDirectional.fromSTEB(
-                                                    0.0, 50.0, 0.0, 0.0),
-                                            child: Container(
-                                              width: 150.0,
-                                              height: MediaQuery.sizeOf(context)
-                                                      .height *
-                                                  0.1,
-                                              decoration: BoxDecoration(
-                                                color:
-                                                    FlutterFlowTheme.of(context)
-                                                        .accent4,
-                                                borderRadius:
-                                                    BorderRadius.circular(20.0),
-                                              ),
-                                              child: AutoSizeText(
-                                                'WTI Oil',
-                                                textAlign: TextAlign.center,
-                                                style:
-                                                    FlutterFlowTheme.of(context)
-                                                        .bodyMedium,
-                                              ),
-                                            ),
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'bnvb06wn' /* Product Name */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'pv0r6ci9' /* Data Type */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'jw8be9ba' /* Source/Origin */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'zq233egm' /* Number of Entries */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          '91e0ikwr' /* Last Update */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'eawe34wj' /* Status */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    0.0, 25.0, 0.0, 0.0),
+                                child: Container(
+                                  width: MediaQuery.sizeOf(context).width * 0.8,
+                                  height:
+                                      MediaQuery.sizeOf(context).height * 0.04,
+                                  decoration: BoxDecoration(
+                                    color: FlutterFlowTheme.of(context)
+                                        .secondaryBackground,
+                                    borderRadius: BorderRadius.circular(10.0),
+                                    border: Border.all(
+                                      color:
+                                          FlutterFlowTheme.of(context).black600,
+                                    ),
+                                  ),
+                                  child: Row(
+                                    mainAxisSize: MainAxisSize.max,
+                                    mainAxisAlignment:
+                                        MainAxisAlignment.spaceAround,
+                                    children: [
+                                      Container(
+                                        width:
+                                            MediaQuery.sizeOf(context).width *
+                                                0.1,
+                                        height:
+                                            MediaQuery.sizeOf(context).height *
+                                                0.04,
+                                        decoration: BoxDecoration(
+                                          color: FlutterFlowTheme.of(context)
+                                              .secondaryBackground,
+                                        ),
+                                        child: AutoSizeText(
+                                          FFLocalizations.of(context).getText(
+                                            'yu2x6eyf' /* WTI Oil */,
+                                          ),
+                                          textAlign: TextAlign.center,
+                                          style: FlutterFlowTheme.of(context)
+                                              .bodyMedium,
+                                          minFontSize: 12.0,
+                                        ),
+                                      ),
+                                      SizedBox(
+                                        height: 100.0,
+                                        child: VerticalDivider(
+                                          thickness: 1.0,
+                                          color: FlutterFlowTheme.of(context)
+                                              .grayIcon,
+                                        ),
+                                      ),
+                                      Container(
+                                        width:
+                                            MediaQuery.sizeOf(context).width *
+                                                0.1,
+                                        height:
+                                            MediaQuery.sizeOf(context).height *
+                                                0.04,
+                                        decoration: BoxDecoration(
+                                          color: FlutterFlowTheme.of(context)
+                                              .secondaryBackground,
+                                        ),
+                                        child: AutoSizeText(
+                                          FFLocalizations.of(context).getText(
+                                            'q2p6to9y' /* Finance */,
+                                          ),
+                                          textAlign: TextAlign.center,
+                                          style: FlutterFlowTheme.of(context)
+                                              .bodyMedium,
+                                          minFontSize: 12.0,
+                                        ),
+                                      ),
+                                      SizedBox(
+                                        height: 100.0,
+                                        child: VerticalDivider(
+                                          thickness: 1.0,
+                                          color: FlutterFlowTheme.of(context)
+                                              .grayIcon,
+                                        ),
+                                      ),
+                                      Container(
+                                        width:
+                                            MediaQuery.sizeOf(context).width *
+                                                0.1,
+                                        height:
+                                            MediaQuery.sizeOf(context).height *
+                                                0.04,
+                                        decoration: BoxDecoration(
+                                          color: FlutterFlowTheme.of(context)
+                                              .secondaryBackground,
+                                        ),
+                                        child: AutoSizeText(
+                                          FFLocalizations.of(context).getText(
+                                            'qp848f9z' /* alphavantage */,
                                           ),
-                                          Padding(
-                                            padding:
-                                                EdgeInsetsDirectional.fromSTEB(
-                                                    0.0, 50.0, 0.0, 0.0),
-                                            child: Container(
-                                              width: 250.0,
-                                              height: MediaQuery.sizeOf(context)
-                                                      .height *
-                                                  0.1,
-                                              decoration: BoxDecoration(
-                                                color:
-                                                    FlutterFlowTheme.of(context)
-                                                        .accent4,
-                                                borderRadius:
-                                                    BorderRadius.circular(20.0),
-                                              ),
-                                              child: AutoSizeText(
-                                                'Wheat',
-                                                textAlign: TextAlign.center,
-                                                style:
-                                                    FlutterFlowTheme.of(context)
-                                                        .bodyMedium,
-                                              ),
-                                            ),
+                                          textAlign: TextAlign.center,
+                                          style: FlutterFlowTheme.of(context)
+                                              .bodyMedium,
+                                          minFontSize: 12.0,
+                                        ),
+                                      ),
+                                      SizedBox(
+                                        height: 100.0,
+                                        child: VerticalDivider(
+                                          thickness: 1.0,
+                                          color: FlutterFlowTheme.of(context)
+                                              .grayIcon,
+                                        ),
+                                      ),
+                                      Container(
+                                        width:
+                                            MediaQuery.sizeOf(context).width *
+                                                0.1,
+                                        height:
+                                            MediaQuery.sizeOf(context).height *
+                                                0.04,
+                                        decoration: BoxDecoration(
+                                          color: FlutterFlowTheme.of(context)
+                                              .secondaryBackground,
+                                        ),
+                                        child: AutoSizeText(
+                                          FFLocalizations.of(context).getText(
+                                            'd69zmqx7' /* 42 */,
+                                          ),
+                                          textAlign: TextAlign.center,
+                                          style: FlutterFlowTheme.of(context)
+                                              .bodyMedium,
+                                          minFontSize: 12.0,
+                                        ),
+                                      ),
+                                      SizedBox(
+                                        height: 100.0,
+                                        child: VerticalDivider(
+                                          thickness: 1.0,
+                                          color: FlutterFlowTheme.of(context)
+                                              .grayIcon,
+                                        ),
+                                      ),
+                                      Container(
+                                        width:
+                                            MediaQuery.sizeOf(context).width *
+                                                0.1,
+                                        height:
+                                            MediaQuery.sizeOf(context).height *
+                                                0.04,
+                                        decoration: BoxDecoration(
+                                          color: FlutterFlowTheme.of(context)
+                                              .secondaryBackground,
+                                        ),
+                                        child: AutoSizeText(
+                                          FFLocalizations.of(context).getText(
+                                            'zyaxgcwi' /* 17.08.2023 */,
                                           ),
-                                          Padding(
-                                            padding:
-                                                EdgeInsetsDirectional.fromSTEB(
-                                                    0.0, 50.0, 0.0, 0.0),
-                                            child: Container(
-                                              width: 250.0,
-                                              height: MediaQuery.sizeOf(context)
-                                                      .height *
-                                                  0.1,
-                                              decoration: BoxDecoration(
-                                                color:
-                                                    FlutterFlowTheme.of(context)
-                                                        .accent4,
-                                                borderRadius:
-                                                    BorderRadius.circular(20.0),
-                                              ),
-                                              child: AutoSizeText(
-                                                'Aluminium',
-                                                textAlign: TextAlign.center,
-                                                style:
-                                                    FlutterFlowTheme.of(context)
-                                                        .bodyMedium,
-                                              ),
-                                            ),
+                                          textAlign: TextAlign.center,
+                                          style: FlutterFlowTheme.of(context)
+                                              .bodyMedium,
+                                          minFontSize: 12.0,
+                                        ),
+                                      ),
+                                      SizedBox(
+                                        height: 100.0,
+                                        child: VerticalDivider(
+                                          thickness: 1.0,
+                                          color: FlutterFlowTheme.of(context)
+                                              .grayIcon,
+                                        ),
+                                      ),
+                                      Container(
+                                        width:
+                                            MediaQuery.sizeOf(context).width *
+                                                0.1,
+                                        height:
+                                            MediaQuery.sizeOf(context).height *
+                                                0.04,
+                                        decoration: BoxDecoration(
+                                          color: FlutterFlowTheme.of(context)
+                                              .secondaryBackground,
+                                        ),
+                                        child: AutoSizeText(
+                                          FFLocalizations.of(context).getText(
+                                            'u7hfg3wq' /* Updated */,
                                           ),
-                                        ],
+                                          textAlign: TextAlign.center,
+                                          style: FlutterFlowTheme.of(context)
+                                              .bodyMedium,
+                                          minFontSize: 12.0,
+                                        ),
+                                      ),
+                                    ],
+                                  ),
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.8,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.04,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(10.0),
+                                  border: Border.all(
+                                    color:
+                                        FlutterFlowTheme.of(context).black600,
+                                  ),
+                                ),
+                                child: Row(
+                                  mainAxisSize: MainAxisSize.max,
+                                  mainAxisAlignment:
+                                      MainAxisAlignment.spaceAround,
+                                  children: [
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'mxuoi1is' /* Brent Oil */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'iazhftxa' /* Finance */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          '88q0jodk' /* alphavantage */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'vxrkaj0p' /* 39 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
                                       ),
                                     ),
                                     Container(
-                                      width: 100.0,
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'kgcnfq9r' /* 17.08.2023 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
                                       height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
                                       decoration: BoxDecoration(
                                         color: FlutterFlowTheme.of(context)
                                             .secondaryBackground,
                                       ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'set7sa7e' /* Updated */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
                                     ),
                                   ],
                                 ),
                               ),
-                            ),
-                          ],
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.8,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.04,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(10.0),
+                                  border: Border.all(
+                                    color:
+                                        FlutterFlowTheme.of(context).black600,
+                                  ),
+                                ),
+                                child: Row(
+                                  mainAxisSize: MainAxisSize.max,
+                                  mainAxisAlignment:
+                                      MainAxisAlignment.spaceAround,
+                                  children: [
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'n69smgq4' /* WTI Oil */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          '5jx2y51j' /* Finance */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'k2wh633l' /* alphavantage */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'ga5xi6is' /* 42 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'wwr0vqtm' /* 17.08.2023 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          '47xt083g' /* Updated */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.8,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.04,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(10.0),
+                                  border: Border.all(
+                                    color:
+                                        FlutterFlowTheme.of(context).black600,
+                                  ),
+                                ),
+                                child: Row(
+                                  mainAxisSize: MainAxisSize.max,
+                                  mainAxisAlignment:
+                                      MainAxisAlignment.spaceAround,
+                                  children: [
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'l00fnsgv' /* WTI Oil */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'cchf5cw8' /* Finance */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'rfauslh7' /* alphavantage */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'dz4d4gxb' /* 42 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'du9jh0hg' /* 17.08.2023 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'uh9f6hd5' /* Updated */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.8,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.04,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(10.0),
+                                  border: Border.all(
+                                    color:
+                                        FlutterFlowTheme.of(context).black600,
+                                  ),
+                                ),
+                                child: Row(
+                                  mainAxisSize: MainAxisSize.max,
+                                  mainAxisAlignment:
+                                      MainAxisAlignment.spaceAround,
+                                  children: [
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          '6msp9c6n' /* WTI Oil */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'fhfottja' /* Finance */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'logleoew' /* alphavantage */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'us6dw4qd' /* 42 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'an02z02t' /* 17.08.2023 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'ou3hj173' /* Updated */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.8,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.04,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(10.0),
+                                  border: Border.all(
+                                    color:
+                                        FlutterFlowTheme.of(context).black600,
+                                  ),
+                                ),
+                                child: Row(
+                                  mainAxisSize: MainAxisSize.max,
+                                  mainAxisAlignment:
+                                      MainAxisAlignment.spaceAround,
+                                  children: [
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          '0h9i9t7d' /* WTI Oil */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          '24ds0t1k' /* Finance */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'pp7xtzhn' /* alphavantage */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'q0nwn91v' /* 42 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          '815gvw5j' /* 17.08.2023 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'qqjx5epd' /* Updated */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                              Container(
+                                width: MediaQuery.sizeOf(context).width * 0.8,
+                                height:
+                                    MediaQuery.sizeOf(context).height * 0.04,
+                                decoration: BoxDecoration(
+                                  color: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  borderRadius: BorderRadius.circular(10.0),
+                                  border: Border.all(
+                                    color:
+                                        FlutterFlowTheme.of(context).black600,
+                                  ),
+                                ),
+                                child: Row(
+                                  mainAxisSize: MainAxisSize.max,
+                                  mainAxisAlignment:
+                                      MainAxisAlignment.spaceAround,
+                                  children: [
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          '0plfg5sq' /* WTI Oil */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'du3gi9hp' /* Finance */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'x2snfe1r' /* alphavantage */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'l8ciwqxd' /* 42 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          '00y7i2ne' /* 17.08.2023 */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                    SizedBox(
+                                      height: 100.0,
+                                      child: VerticalDivider(
+                                        thickness: 1.0,
+                                        color: FlutterFlowTheme.of(context)
+                                            .grayIcon,
+                                      ),
+                                    ),
+                                    Container(
+                                      width: MediaQuery.sizeOf(context).width *
+                                          0.1,
+                                      height:
+                                          MediaQuery.sizeOf(context).height *
+                                              0.04,
+                                      decoration: BoxDecoration(
+                                        color: FlutterFlowTheme.of(context)
+                                            .secondaryBackground,
+                                      ),
+                                      child: AutoSizeText(
+                                        FFLocalizations.of(context).getText(
+                                          'w9edrnl1' /* Updated */,
+                                        ),
+                                        textAlign: TextAlign.center,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium,
+                                        minFontSize: 12.0,
+                                      ),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                            ],
+                          ),
                         ),
                       ),
                     ),
diff --git a/lib/pages/sub_category/sub_category_widget.dart b/lib/pages/sub_category/sub_category_widget.dart
index 0f42783..69c5e03 100644
--- a/lib/pages/sub_category/sub_category_widget.dart
+++ b/lib/pages/sub_category/sub_category_widget.dart
@@ -26,6 +26,8 @@ class _SubCategoryWidgetState extends State<SubCategoryWidget> {
   void initState() {
     super.initState();
     _model = createModel(context, () => SubCategoryModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
   }
 
   @override
@@ -48,8 +50,8 @@ class _SubCategoryWidgetState extends State<SubCategoryWidget> {
             mainAxisSize: MainAxisSize.max,
             children: [
               Container(
-                width: double.infinity,
-                height: 125.0,
+                width: MediaQuery.sizeOf(context).width * 1.0,
+                height: MediaQuery.sizeOf(context).height * 0.15,
                 decoration: BoxDecoration(
                   color: FlutterFlowTheme.of(context).secondaryBackground,
                   border: Border.all(
@@ -87,7 +89,9 @@ class _SubCategoryWidgetState extends State<SubCategoryWidget> {
                               padding: EdgeInsetsDirectional.fromSTEB(
                                   0.0, 0.0, 0.0, 25.0),
                               child: Text(
-                                'admin@pacemaker.ai',
+                                FFLocalizations.of(context).getText(
+                                  'tefcrq5d' /* admin@pacemaker.ai */,
+                                ),
                                 style: FlutterFlowTheme.of(context)
                                     .bodyMedium
                                     .override(
@@ -143,8 +147,8 @@ class _SubCategoryWidgetState extends State<SubCategoryWidget> {
                 ),
               ),
               Container(
-                width: double.infinity,
-                height: MediaQuery.sizeOf(context).height * 0.9,
+                width: MediaQuery.sizeOf(context).width * 1.0,
+                height: MediaQuery.sizeOf(context).height * 0.85,
                 decoration: BoxDecoration(
                   color: FlutterFlowTheme.of(context).secondaryBackground,
                 ),
@@ -154,8 +158,8 @@ class _SubCategoryWidgetState extends State<SubCategoryWidget> {
                     Align(
                       alignment: AlignmentDirectional(0.0, 0.0),
                       child: Container(
-                        width: 250.0,
-                        height: MediaQuery.sizeOf(context).height * 0.9,
+                        width: MediaQuery.sizeOf(context).width * 0.15,
+                        height: MediaQuery.sizeOf(context).height * 0.85,
                         decoration: BoxDecoration(
                           color:
                               FlutterFlowTheme.of(context).secondaryBackground,
@@ -166,8 +170,8 @@ class _SubCategoryWidgetState extends State<SubCategoryWidget> {
                       ),
                     ),
                     Container(
-                      width: MediaQuery.sizeOf(context).width * 0.9,
-                      height: MediaQuery.sizeOf(context).height * 0.95,
+                      width: MediaQuery.sizeOf(context).width * 0.85,
+                      height: MediaQuery.sizeOf(context).height * 0.85,
                       decoration: BoxDecoration(
                         color: FlutterFlowTheme.of(context).lineColor,
                       ),
diff --git a/pubspec.lock b/pubspec.lock
new file mode 100644
index 0000000..63edbe8
--- /dev/null
+++ b/pubspec.lock
@@ -0,0 +1,855 @@
+# Generated by pub
+# See https://dart.dev/tools/pub/glossary#lockfile
+packages:
+  _flutterfire_internals:
+    dependency: transitive
+    description:
+      name: _flutterfire_internals
+      sha256: "9ebe81588e666f7e2b21309f2b5653bd9642d7f27fd0a6894278d2ff40cb9481"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.2"
+  args:
+    dependency: transitive
+    description:
+      name: args
+      sha256: eef6c46b622e0494a36c5a12d10d77fb4e855501a91c1b9ef9339326e58f0596
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.4.2"
+  async:
+    dependency: transitive
+    description:
+      name: async
+      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.11.0"
+  auto_size_text:
+    dependency: "direct main"
+    description:
+      name: auto_size_text
+      sha256: "3f5261cd3fb5f2a9ab4e2fc3fba84fd9fcaac8821f20a1d4e71f557521b22599"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.0"
+  boolean_selector:
+    dependency: transitive
+    description:
+      name: boolean_selector
+      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.1"
+  cached_network_image:
+    dependency: "direct main"
+    description:
+      name: cached_network_image
+      sha256: e764e48ef036cabdf84319ba7b8b5871b6b43266e14de787cb43f77639089ae5
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.2.1"
+  cached_network_image_platform_interface:
+    dependency: transitive
+    description:
+      name: cached_network_image_platform_interface
+      sha256: "8e2b5befefec5063bee8f209fda21751f6328d405d4237c70f21104568b2fee7"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.0"
+  cached_network_image_web:
+    dependency: transitive
+    description:
+      name: cached_network_image_web
+      sha256: d4351c7eb16767df129b0474a5ebc4e028870379c063e8ba265a56aa00831e70
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.1"
+  characters:
+    dependency: transitive
+    description:
+      name: characters
+      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.0"
+  clock:
+    dependency: transitive
+    description:
+      name: clock
+      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.1"
+  collection:
+    dependency: transitive
+    description:
+      name: collection
+      sha256: "4a07be6cb69c84d677a6c3096fcf960cc3285a8330b4603e0d463d15d9bd934c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.17.1"
+  crypto:
+    dependency: transitive
+    description:
+      name: crypto
+      sha256: ff625774173754681d66daaf4a448684fb04b78f902da9cb3d308c19cc5e8bab
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.3"
+  cupertino_icons:
+    dependency: "direct main"
+    description:
+      name: cupertino_icons
+      sha256: e35129dc44c9118cee2a5603506d823bab99c68393879edb440e0090d07586be
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.5"
+  fake_async:
+    dependency: transitive
+    description:
+      name: fake_async
+      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.1"
+  ffi:
+    dependency: transitive
+    description:
+      name: ffi
+      sha256: ed5337a5660c506388a9f012be0288fb38b49020ce2b45fe1f8b8323fe429f99
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.2"
+  file:
+    dependency: transitive
+    description:
+      name: file
+      sha256: "1b92bec4fc2a72f59a8e15af5f52cd441e4a7860b49499d69dfa817af20e925d"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.1.4"
+  firebase_auth:
+    dependency: "direct main"
+    description:
+      name: firebase_auth
+      sha256: "19508428ca37f611ae47067ee6ebb3ba5a27014941177cc224f71bf7d0720cdd"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.6.2"
+  firebase_auth_platform_interface:
+    dependency: "direct main"
+    description:
+      name: firebase_auth_platform_interface
+      sha256: e46e136a6f6eec88b30f12445ff7f5b19b23b7ede694921ced4f8eba8eb634f6
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.15.2"
+  firebase_auth_web:
+    dependency: "direct main"
+    description:
+      name: firebase_auth_web
+      sha256: "553bd576d793d05b920971a2c7ab02bd049d4971153702074ea2555877efd392"
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.5.2"
+  firebase_core:
+    dependency: "direct main"
+    description:
+      name: firebase_core
+      sha256: e9b36b391690cf329c6fb1de220045e97c13784c303820cd33962319580a56c6
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.13.1"
+  firebase_core_platform_interface:
+    dependency: "direct main"
+    description:
+      name: firebase_core_platform_interface
+      sha256: b63e3be6c96ef5c33bdec1aab23c91eb00696f6452f0519401d640938c94cba2
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.8.0"
+  firebase_core_web:
+    dependency: "direct main"
+    description:
+      name: firebase_core_web
+      sha256: "8c0f4c87d20e2d001a5915df238c1f9c88704231f591324205f5a5d2a7740a45"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.5.0"
+  flutter:
+    dependency: "direct main"
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  flutter_animate:
+    dependency: "direct main"
+    description:
+      name: flutter_animate
+      sha256: f611a67082d4c5ff9b8b7737ec7e675a22af70a94c8c3c22109f14b078d4d2bf
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.1.1+1"
+  flutter_blurhash:
+    dependency: transitive
+    description:
+      name: flutter_blurhash
+      sha256: "05001537bd3fac7644fa6558b09ec8c0a3f2eba78c0765f88912882b1331a5c6"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.7.0"
+  flutter_cache_manager:
+    dependency: "direct main"
+    description:
+      name: flutter_cache_manager
+      sha256: "32cd900555219333326a2d0653aaaf8671264c29befa65bbd9856d204a4c9fb3"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.3.0"
+  flutter_localizations:
+    dependency: "direct main"
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  flutter_spinkit:
+    dependency: "direct main"
+    description:
+      name: flutter_spinkit
+      sha256: "77a2117c0517ff909221f3160b8eb20052ab5216107581168af574ac1f05dff8"
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.1.0"
+  flutter_svg:
+    dependency: "direct main"
+    description:
+      name: flutter_svg
+      sha256: "12006889e2987c549c4c1ec1a5ba4ec4b24d34d2469ee5f9476c926dcecff266"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.4"
+  flutter_test:
+    dependency: "direct dev"
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  flutter_web_plugins:
+    dependency: transitive
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  font_awesome_flutter:
+    dependency: "direct main"
+    description:
+      name: font_awesome_flutter
+      sha256: "7811c8b4e7455d2f60ef30022a6a07376de2858b47aecbe2861965b348fe2016"
+      url: "https://pub.dev"
+    source: hosted
+    version: "10.1.0"
+  from_css_color:
+    dependency: "direct main"
+    description:
+      name: from_css_color
+      sha256: "5e4d1795c8d10af94e51dd97636b2a29170a132be1aceba103e9866028d20823"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.0"
+  go_router:
+    dependency: "direct main"
+    description:
+      name: go_router
+      sha256: "00d1b67d6e9fa443331da229084dd3eb04407f5a2dff22940bd7bba6af5722c3"
+      url: "https://pub.dev"
+    source: hosted
+    version: "7.1.1"
+  google_fonts:
+    dependency: "direct main"
+    description:
+      name: google_fonts
+      sha256: "927573f2e8a8d65c17931e21918ad0ab0666b1b636537de7c4932bdb487b190f"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.3"
+  google_identity_services_web:
+    dependency: transitive
+    description:
+      name: google_identity_services_web
+      sha256: "7940fdc3b1035db4d65d387c1bdd6f9574deaa6777411569c05ecc25672efacd"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.2.1"
+  google_sign_in:
+    dependency: "direct main"
+    description:
+      name: google_sign_in
+      sha256: "750d08ffb4cd469f13068d15844ffd1d60c7ac1ca3c815918ba4ce4af22a2ddb"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.0.2"
+  google_sign_in_android:
+    dependency: "direct main"
+    description:
+      name: google_sign_in_android
+      sha256: "6a740e8498920ecf5fc2849ae0e4412536d700230bc3169493a1d031fdfe1cca"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.1.8"
+  google_sign_in_ios:
+    dependency: "direct main"
+    description:
+      name: google_sign_in_ios
+      sha256: "2e1df687b17f7fddcaf9a0c7f994d0d19b5d41e8ce1d943013befd0a0ae67403"
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.6.1"
+  google_sign_in_platform_interface:
+    dependency: "direct main"
+    description:
+      name: google_sign_in_platform_interface
+      sha256: "95a9e0a8701b5485f2ca330fd1fc6f918f5ce088042ce1019c5e389d8574ae4c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.4.0"
+  google_sign_in_web:
+    dependency: "direct main"
+    description:
+      name: google_sign_in_web
+      sha256: "9f883b9b525297663510dfbbe8b04d39715aa0abba430851f501b7d1e4b0f465"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.11.0+2"
+  http:
+    dependency: transitive
+    description:
+      name: http
+      sha256: "5895291c13fa8a3bd82e76d5627f69e0d85ca6a30dcac95c4ea19a5d555879c2"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.13.6"
+  http_parser:
+    dependency: transitive
+    description:
+      name: http_parser
+      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.2"
+  intl:
+    dependency: "direct main"
+    description:
+      name: intl
+      sha256: a3715e3bc90294e971cb7dc063fbf3cd9ee0ebf8604ffeafabd9e6f16abbdbe6
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.18.0"
+  js:
+    dependency: transitive
+    description:
+      name: js
+      sha256: f2c445dce49627136094980615a031419f7f3eb393237e4ecd97ac15dea343f3
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.6.7"
+  json_path:
+    dependency: "direct main"
+    description:
+      name: json_path
+      sha256: e1ff18e87737fd5bee5d3408a58c51452b3351ab1292fdcf4ee597ab480123e2
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.4.1"
+  logging:
+    dependency: transitive
+    description:
+      name: logging
+      sha256: "623a88c9594aa774443aa3eb2d41807a48486b5613e67599fb4c41c0ad47c340"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.0"
+  matcher:
+    dependency: transitive
+    description:
+      name: matcher
+      sha256: "6501fbd55da300384b768785b83e5ce66991266cec21af89ab9ae7f5ce1c4cbb"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.12.15"
+  material_color_utilities:
+    dependency: transitive
+    description:
+      name: material_color_utilities
+      sha256: d92141dc6fe1dad30722f9aa826c7fbc896d021d792f80678280601aff8cf724
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.2.0"
+  meta:
+    dependency: transitive
+    description:
+      name: meta
+      sha256: "3c74dbf8763d36539f114c799d8a2d87343b5067e9d796ca22b5eb8437090ee3"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.9.1"
+  nested:
+    dependency: transitive
+    description:
+      name: nested
+      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.0"
+  octo_image:
+    dependency: transitive
+    description:
+      name: octo_image
+      sha256: "107f3ed1330006a3bea63615e81cf637433f5135a52466c7caa0e7152bca9143"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.2"
+  page_transition:
+    dependency: "direct main"
+    description:
+      name: page_transition
+      sha256: "12776be3ffb2d080095e912fc4e820a85be8846913a93261148b75256b9c7691"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.4"
+  path:
+    dependency: transitive
+    description:
+      name: path
+      sha256: "8829d8a55c13fc0e37127c29fedf290c102f4e40ae94ada574091fe0ff96c917"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.8.3"
+  path_parsing:
+    dependency: transitive
+    description:
+      name: path_parsing
+      sha256: e3e67b1629e6f7e8100b367d3db6ba6af4b1f0bb80f64db18ef1fbabd2fa9ccf
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.1"
+  path_provider:
+    dependency: "direct main"
+    description:
+      name: path_provider
+      sha256: c7edf82217d4b2952b2129a61d3ad60f1075b9299e629e149a8d2e39c2e6aad4
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.14"
+  path_provider_android:
+    dependency: "direct main"
+    description:
+      name: path_provider_android
+      sha256: da97262be945a72270513700a92b39dd2f4a54dad55d061687e2e37a6390366a
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.25"
+  path_provider_foundation:
+    dependency: "direct main"
+    description:
+      name: path_provider_foundation
+      sha256: ad4c4d011830462633f03eb34445a45345673dfd4faf1ab0b4735fbd93b19183
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.2"
+  path_provider_linux:
+    dependency: transitive
+    description:
+      name: path_provider_linux
+      sha256: ffbb8cc9ed2c9ec0e4b7a541e56fd79b138e8f47d2fb86815f15358a349b3b57
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.11"
+  path_provider_platform_interface:
+    dependency: "direct main"
+    description:
+      name: path_provider_platform_interface
+      sha256: "57585299a729335f1298b43245842678cb9f43a6310351b18fb577d6e33165ec"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.6"
+  path_provider_windows:
+    dependency: transitive
+    description:
+      name: path_provider_windows
+      sha256: "1cb68ba4cd3a795033de62ba1b7b4564dace301f952de6bfb3cd91b202b6ee96"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.7"
+  pedantic:
+    dependency: transitive
+    description:
+      name: pedantic
+      sha256: "67fc27ed9639506c856c840ccce7594d0bdcd91bc8d53d6e52359449a1d50602"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.11.1"
+  petitparser:
+    dependency: transitive
+    description:
+      name: petitparser
+      sha256: cb3798bef7fc021ac45b308f4b51208a152792445cce0448c9a4ba5879dd8750
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.4.0"
+  platform:
+    dependency: transitive
+    description:
+      name: platform
+      sha256: "4a451831508d7d6ca779f7ac6e212b4023dd5a7d08a27a63da33756410e32b76"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.1.0"
+  plugin_platform_interface:
+    dependency: "direct main"
+    description:
+      name: plugin_platform_interface
+      sha256: dbf0f707c78beedc9200146ad3cb0ab4d5da13c246336987be6940f026500d3a
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.3"
+  provider:
+    dependency: "direct main"
+    description:
+      name: provider
+      sha256: e1e7413d70444ea3096815a60fe5da1b11bda8a9dc4769252cc82c53536f8bcc
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.0.4"
+  quiver:
+    dependency: transitive
+    description:
+      name: quiver
+      sha256: b1c1ac5ce6688d77f65f3375a9abb9319b3cb32486bdc7a1e0fdf004d7ba4e47
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.2.1"
+  rfc_6901:
+    dependency: transitive
+    description:
+      name: rfc_6901
+      sha256: "8d97680dada633146cf75ab9382f2ce2b7e4bd63ceecd867416cf43b5832b988"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.1.1"
+  rxdart:
+    dependency: "direct main"
+    description:
+      name: rxdart
+      sha256: "0c7c0cedd93788d996e33041ffecda924cc54389199cde4e6a34b440f50044cb"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.27.7"
+  shared_preferences:
+    dependency: "direct main"
+    description:
+      name: shared_preferences
+      sha256: "76917b7d4b9526b2ba416808a7eb9fb2863c1a09cf63ec85f1453da240fa818a"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.15"
+  shared_preferences_android:
+    dependency: "direct main"
+    description:
+      name: shared_preferences_android
+      sha256: "8304d8a1f7d21a429f91dee552792249362b68a331ac5c3c1caf370f658873f6"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.0"
+  shared_preferences_ios:
+    dependency: "direct main"
+    description:
+      name: shared_preferences_ios
+      sha256: "585a14cefec7da8c9c2fb8cd283a3bb726b4155c0952afe6a0caaa7b2272de34"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.1"
+  shared_preferences_linux:
+    dependency: transitive
+    description:
+      name: shared_preferences_linux
+      sha256: "9d387433ca65717bbf1be88f4d5bb18f10508917a8fa2fb02e0fd0d7479a9afa"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.0"
+  shared_preferences_macos:
+    dependency: transitive
+    description:
+      name: shared_preferences_macos
+      sha256: "81b6a60b2d27020eb0fc41f4cebc91353047309967901a79ee8203e40c42ed46"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.5"
+  shared_preferences_platform_interface:
+    dependency: "direct main"
+    description:
+      name: shared_preferences_platform_interface
+      sha256: fb5cf25c0235df2d0640ac1b1174f6466bd311f621574997ac59018a6664548d
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.0"
+  shared_preferences_web:
+    dependency: "direct main"
+    description:
+      name: shared_preferences_web
+      sha256: "74083203a8eae241e0de4a0d597dbedab3b8fef5563f33cf3c12d7e93c655ca5"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.0"
+  shared_preferences_windows:
+    dependency: transitive
+    description:
+      name: shared_preferences_windows
+      sha256: "5e588e2efef56916a3b229c3bfe81e6a525665a454519ca51dbcc4236a274173"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.0"
+  sign_in_with_apple:
+    dependency: "direct main"
+    description:
+      name: sign_in_with_apple
+      sha256: ac3b113767dfdd765078c507dad9d4d9fe96b669cc7bd88fc36fc15376fb3400
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.3.0"
+  sign_in_with_apple_platform_interface:
+    dependency: "direct main"
+    description:
+      name: sign_in_with_apple_platform_interface
+      sha256: a5883edee09ed6be19de19e7d9f618a617fe41a6fa03f76d082dfb787e9ea18d
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.0"
+  sign_in_with_apple_web:
+    dependency: "direct main"
+    description:
+      name: sign_in_with_apple_web
+      sha256: "44b66528f576e77847c14999d5e881e17e7223b7b0625a185417829e5306f47a"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.1"
+  sky_engine:
+    dependency: transitive
+    description: flutter
+    source: sdk
+    version: "0.0.99"
+  source_span:
+    dependency: transitive
+    description:
+      name: source_span
+      sha256: dd904f795d4b4f3b870833847c461801f6750a9fa8e61ea5ac53f9422b31f250
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.9.1"
+  sqflite:
+    dependency: "direct main"
+    description:
+      name: sqflite
+      sha256: "500d6fec583d2c021f2d25a056d96654f910662c64f836cd2063167b8f1fa758"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.6"
+  sqflite_common:
+    dependency: transitive
+    description:
+      name: sqflite_common
+      sha256: "1b92f368f44b0dee2425bb861cfa17b6f6cf3961f762ff6f941d20b33355660a"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.5.0"
+  stack_trace:
+    dependency: transitive
+    description:
+      name: stack_trace
+      sha256: c3c7d8edb15bee7f0f74debd4b9c5f3c2ea86766fe4178eb2a18eb30a0bdaed5
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.11.0"
+  stream_channel:
+    dependency: transitive
+    description:
+      name: stream_channel
+      sha256: "83615bee9045c1d322bbbd1ba209b7a749c2cbcdcb3fdd1df8eb488b3279c1c8"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.1"
+  string_scanner:
+    dependency: transitive
+    description:
+      name: string_scanner
+      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.0"
+  synchronized:
+    dependency: transitive
+    description:
+      name: synchronized
+      sha256: "5fcbd27688af6082f5abd611af56ee575342c30e87541d0245f7ff99faa02c60"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.1.0"
+  term_glyph:
+    dependency: transitive
+    description:
+      name: term_glyph
+      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.1"
+  test_api:
+    dependency: transitive
+    description:
+      name: test_api
+      sha256: eb6ac1540b26de412b3403a163d919ba86f6a973fe6cc50ae3541b80092fdcfb
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.5.1"
+  timeago:
+    dependency: "direct main"
+    description:
+      name: timeago
+      sha256: "3a38963615f1178531afa7177199e37522cf8dcbd93a144b597e32ec6d84bd9f"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.2.2"
+  typed_data:
+    dependency: transitive
+    description:
+      name: typed_data
+      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.2"
+  url_launcher:
+    dependency: "direct main"
+    description:
+      name: url_launcher
+      sha256: "75f2846facd11168d007529d6cd8fcb2b750186bea046af9711f10b907e1587e"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.1.10"
+  url_launcher_android:
+    dependency: "direct main"
+    description:
+      name: url_launcher_android
+      sha256: a52628068d282d01a07cd86e6ba99e497aa45ce8c91159015b2416907d78e411
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.0.27"
+  url_launcher_ios:
+    dependency: "direct main"
+    description:
+      name: url_launcher_ios
+      sha256: "9af7ea73259886b92199f9e42c116072f05ff9bea2dcb339ab935dfc957392c2"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.1.4"
+  url_launcher_linux:
+    dependency: transitive
+    description:
+      name: url_launcher_linux
+      sha256: "207f4ddda99b95b4d4868320a352d374b0b7e05eefad95a4a26f57da413443f5"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.5"
+  url_launcher_macos:
+    dependency: transitive
+    description:
+      name: url_launcher_macos
+      sha256: "1c4fdc0bfea61a70792ce97157e5cc17260f61abbe4f39354513f39ec6fd73b1"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.6"
+  url_launcher_platform_interface:
+    dependency: "direct main"
+    description:
+      name: url_launcher_platform_interface
+      sha256: "6c9ca697a5ae218ce56cece69d46128169a58aa8653c1b01d26fcd4aad8c4370"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.2"
+  url_launcher_web:
+    dependency: transitive
+    description:
+      name: url_launcher_web
+      sha256: cc26720eefe98c1b71d85f9dc7ef0cada5132617046369d9dc296b3ecaa5cbb4
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.18"
+  url_launcher_windows:
+    dependency: transitive
+    description:
+      name: url_launcher_windows
+      sha256: "7967065dd2b5fccc18c653b97958fdf839c5478c28e767c61ee879f4e7882422"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.7"
+  uuid:
+    dependency: transitive
+    description:
+      name: uuid
+      sha256: "648e103079f7c64a36dc7d39369cabb358d377078a051d6ae2ad3aa539519313"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.7"
+  vector_graphics:
+    dependency: transitive
+    description:
+      name: vector_graphics
+      sha256: "670f6e07aca990b4a2bcdc08a784193c4ccdd1932620244c3a86bb72a0eac67f"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.7"
+  vector_graphics_codec:
+    dependency: transitive
+    description:
+      name: vector_graphics_codec
+      sha256: "7451721781d967db9933b63f5733b1c4533022c0ba373a01bdd79d1a5457f69f"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.7"
+  vector_graphics_compiler:
+    dependency: transitive
+    description:
+      name: vector_graphics_compiler
+      sha256: "80a13c613c8bde758b1464a1755a7b3a8f2b6cec61fbf0f5a53c94c30f03ba2e"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.7"
+  vector_math:
+    dependency: transitive
+    description:
+      name: vector_math
+      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.4"
+  win32:
+    dependency: transitive
+    description:
+      name: win32
+      sha256: f2add6fa510d3ae152903412227bda57d0d5a8da61d2c39c1fb022c9429a41c0
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.0.6"
+  xdg_directories:
+    dependency: transitive
+    description:
+      name: xdg_directories
+      sha256: e0b1147eec179d3911f1f19b59206448f78195ca1d20514134e10641b7d7fbff
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.1"
+  xml:
+    dependency: transitive
+    description:
+      name: xml
+      sha256: "5bc72e1e45e941d825fd7468b9b4cc3b9327942649aeb6fc5cdbf135f0a86e84"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.3.0"
+sdks:
+  dart: ">=3.0.0 <4.0.0"
+  flutter: ">=3.7.0-0"
diff --git a/pubspec.yaml b/pubspec.yaml
index a5a3fce..ce72e5d 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -27,7 +27,12 @@ dependencies:
     sdk: flutter
   auto_size_text: 3.0.0
   cached_network_image: 3.2.1
-  data_table_2: 2.3.12
+  firebase_auth: 4.6.2
+  firebase_auth_platform_interface: 6.15.2
+  firebase_auth_web: 5.5.2
+  firebase_core: 2.13.1
+  firebase_core_platform_interface: 4.8.0
+  firebase_core_web: 2.5.0
   flutter_animate: 4.1.1+1
   flutter_cache_manager: 3.3.0
   flutter_spinkit: 5.1.0
@@ -36,6 +41,11 @@ dependencies:
   from_css_color: 2.0.0
   go_router: 7.1.1
   google_fonts: 4.0.3
+  google_sign_in: 6.0.2
+  google_sign_in_android: 6.1.8
+  google_sign_in_ios: 5.6.1
+  google_sign_in_platform_interface: 2.4.0
+  google_sign_in_web: 0.11.0+2
   intl: 0.18.0
   json_path: 0.4.1
   page_transition: 2.0.4
@@ -43,12 +53,17 @@ dependencies:
   path_provider_android: 2.0.25
   path_provider_foundation: 2.2.2
   path_provider_platform_interface: 2.0.6
+  plugin_platform_interface: 2.1.3
   provider: 6.0.4
+  rxdart: 0.27.7
   shared_preferences: 2.0.15
   shared_preferences_android: 2.1.0
   shared_preferences_ios: 2.1.1
   shared_preferences_platform_interface: 2.2.0
   shared_preferences_web: 2.1.0
+  sign_in_with_apple: 4.3.0
+  sign_in_with_apple_platform_interface: 1.0.0
+  sign_in_with_apple_web: 1.0.1
   sqflite: 2.2.6
   timeago: 3.2.2
   url_launcher: 6.1.10
diff --git a/web/index.html b/web/index.html
index 73b925f..f97683e 100644
--- a/web/index.html
+++ b/web/index.html
@@ -41,6 +41,10 @@
   <meta name="description" content="Built with FlutterFlow." />
     
 
+  <!-- Status Bar color in Safari browser (iOS) and PWA -->
+  <meta name="theme-color" media="(prefers-color-scheme: light)" content="#f1f4f8">
+  <meta name="theme-color" media="(prefers-color-scheme: dark)"  content="#101213">
+
   <link rel="manifest" href="manifest.json">
 </head>
 <body>
